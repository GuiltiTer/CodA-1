# Generated from C:/Users/yasein/PycharmProjects/CodeAnalayserByGraph\CPP14.g4 by ANTLR 4.8
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO


def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\3\u0098")
        buf.write("\u09b0\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7")
        buf.write("\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r\4\16")
        buf.write("\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23\t\23")
        buf.write("\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31")
        buf.write("\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36")
        buf.write("\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t")
        buf.write("&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.\t.\4")
        buf.write("/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64\t\64")
        buf.write("\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:\4;\t")
        buf.write(";\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA\4B\tB\4C\tC\4D\t")
        buf.write("D\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\tJ\4K\tK\4L\tL\4M\t")
        buf.write("M\4N\tN\4O\tO\4P\tP\4Q\tQ\4R\tR\4S\tS\4T\tT\4U\tU\4V\t")
        buf.write("V\4W\tW\4X\tX\4Y\tY\4Z\tZ\4[\t[\4\\\t\\\4]\t]\4^\t^\4")
        buf.write("_\t_\4`\t`\4a\ta\4b\tb\4c\tc\4d\td\4e\te\4f\tf\4g\tg\4")
        buf.write("h\th\4i\ti\4j\tj\4k\tk\4l\tl\4m\tm\4n\tn\4o\to\4p\tp\4")
        buf.write("q\tq\4r\tr\4s\ts\4t\tt\4u\tu\4v\tv\4w\tw\4x\tx\4y\ty\4")
        buf.write("z\tz\4{\t{\4|\t|\4}\t}\4~\t~\4\177\t\177\4\u0080\t\u0080")
        buf.write("\4\u0081\t\u0081\4\u0082\t\u0082\4\u0083\t\u0083\4\u0084")
        buf.write("\t\u0084\4\u0085\t\u0085\4\u0086\t\u0086\4\u0087\t\u0087")
        buf.write("\4\u0088\t\u0088\4\u0089\t\u0089\4\u008a\t\u008a\4\u008b")
        buf.write("\t\u008b\4\u008c\t\u008c\4\u008d\t\u008d\4\u008e\t\u008e")
        buf.write("\4\u008f\t\u008f\4\u0090\t\u0090\4\u0091\t\u0091\4\u0092")
        buf.write("\t\u0092\4\u0093\t\u0093\4\u0094\t\u0094\4\u0095\t\u0095")
        buf.write("\4\u0096\t\u0096\4\u0097\t\u0097\4\u0098\t\u0098\4\u0099")
        buf.write("\t\u0099\4\u009a\t\u009a\4\u009b\t\u009b\4\u009c\t\u009c")
        buf.write("\4\u009d\t\u009d\4\u009e\t\u009e\4\u009f\t\u009f\4\u00a0")
        buf.write("\t\u00a0\4\u00a1\t\u00a1\4\u00a2\t\u00a2\4\u00a3\t\u00a3")
        buf.write("\4\u00a4\t\u00a4\4\u00a5\t\u00a5\4\u00a6\t\u00a6\4\u00a7")
        buf.write("\t\u00a7\4\u00a8\t\u00a8\4\u00a9\t\u00a9\4\u00aa\t\u00aa")
        buf.write("\4\u00ab\t\u00ab\4\u00ac\t\u00ac\4\u00ad\t\u00ad\4\u00ae")
        buf.write("\t\u00ae\4\u00af\t\u00af\4\u00b0\t\u00b0\4\u00b1\t\u00b1")
        buf.write("\4\u00b2\t\u00b2\4\u00b3\t\u00b3\4\u00b4\t\u00b4\4\u00b5")
        buf.write("\t\u00b5\4\u00b6\t\u00b6\4\u00b7\t\u00b7\4\u00b8\t\u00b8")
        buf.write("\4\u00b9\t\u00b9\4\u00ba\t\u00ba\4\u00bb\t\u00bb\4\u00bc")
        buf.write("\t\u00bc\4\u00bd\t\u00bd\4\u00be\t\u00be\4\u00bf\t\u00bf")
        buf.write("\4\u00c0\t\u00c0\4\u00c1\t\u00c1\4\u00c2\t\u00c2\4\u00c3")
        buf.write("\t\u00c3\4\u00c4\t\u00c4\4\u00c5\t\u00c5\4\u00c6\t\u00c6")
        buf.write("\4\u00c7\t\u00c7\4\u00c8\t\u00c8\4\u00c9\t\u00c9\3\2\5")
        buf.write("\2\u0194\n\2\3\2\3\2\3\3\3\3\7\3\u019a\n\3\f\3\16\3\u019d")
        buf.write("\13\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\5\3\u01a6\n\3\3\4\3")
        buf.write("\4\5\4\u01aa\n\4\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\5")
        buf.write("\5\u01b5\n\5\3\6\3\6\5\6\u01b9\n\6\3\6\3\6\3\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\5\7\u01c8\n\7\3\7\3\7")
        buf.write("\3\7\3\7\3\7\5\7\u01cf\n\7\3\7\3\7\3\7\7\7\u01d4\n\7\f")
        buf.write("\7\16\7\u01d7\13\7\3\b\3\b\5\b\u01db\n\b\3\b\3\b\3\t\3")
        buf.write("\t\5\t\u01e1\n\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\5\n\u01eb")
        buf.write("\n\n\3\13\3\13\3\f\3\f\3\f\5\f\u01f2\n\f\3\f\3\f\3\f\3")
        buf.write("\f\5\f\u01f8\n\f\7\f\u01fa\n\f\f\f\16\f\u01fd\13\f\3\r")
        buf.write("\3\r\5\r\u0201\n\r\3\16\3\16\3\16\3\16\5\16\u0207\n\16")
        buf.write("\3\17\3\17\3\17\3\17\3\17\5\17\u020e\n\17\3\20\3\20\3")
        buf.write("\20\3\20\5\20\u0214\n\20\3\20\5\20\u0217\n\20\3\20\5\20")
        buf.write("\u021a\n\20\3\20\5\20\u021d\n\20\3\21\3\21\3\21\3\21\3")
        buf.write("\21\5\21\u0224\n\21\3\21\3\21\3\21\3\21\3\21\5\21\u022b")
        buf.write("\n\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\21\3\21\5\21\u025f\n\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21")
        buf.write("\3\21\3\21\5\21\u026e\n\21\3\21\3\21\3\21\3\21\5\21\u0274")
        buf.write("\n\21\3\21\3\21\3\21\3\21\5\21\u027a\n\21\3\21\3\21\3")
        buf.write("\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u0287")
        buf.write("\n\21\f\21\16\21\u028a\13\21\3\22\3\22\3\23\3\23\3\24")
        buf.write("\3\24\3\25\5\25\u0293\n\25\3\25\3\25\3\25\3\25\3\25\3")
        buf.write("\25\3\25\3\25\3\25\3\25\3\25\3\25\3\25\5\25\u02a2\n\25")
        buf.write("\3\25\3\25\3\25\3\25\5\25\u02a8\n\25\3\26\3\26\3\26\3")
        buf.write("\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26\3\26")
        buf.write("\3\26\3\26\3\26\5\26\u02c6\n\26\3\27\3\27\3\30\5\30\u02cb")
        buf.write("\n\30\3\30\3\30\5\30\u02cf\n\30\3\30\3\30\5\30\u02d3\n")
        buf.write("\30\3\30\5\30\u02d6\n\30\3\30\3\30\5\30\u02da\n\30\3\30")
        buf.write("\3\30\3\30\3\30\5\30\u02e0\n\30\5\30\u02e2\n\30\3\31\3")
        buf.write("\31\3\31\3\31\3\32\3\32\5\32\u02ea\n\32\3\33\3\33\5\33")
        buf.write("\u02ee\n\33\3\33\5\33\u02f1\n\33\3\34\3\34\3\34\3\34\3")
        buf.write("\34\5\34\u02f8\n\34\3\34\3\34\3\34\3\34\3\34\5\34\u02ff")
        buf.write("\n\34\7\34\u0301\n\34\f\34\16\34\u0304\13\34\3\35\3\35")
        buf.write("\5\35\u0308\n\35\3\35\3\35\5\35\u030c\n\35\3\36\5\36\u030f")
        buf.write("\n\36\3\36\3\36\3\36\5\36\u0314\n\36\3\36\3\36\3\36\3")
        buf.write("\36\5\36\u031a\n\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 ")
        buf.write("\3 \3 \3 \5 \u0327\n \3!\3!\3!\3!\3!\3!\3!\3!\3!\7!\u0332")
        buf.write("\n!\f!\16!\u0335\13!\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3\"\3")
        buf.write("\"\3\"\3\"\3\"\7\"\u0343\n\"\f\"\16\"\u0346\13\"\3#\3")
        buf.write("#\3#\3#\3#\3#\3#\3#\3#\7#\u0351\n#\f#\16#\u0354\13#\3")
        buf.write("$\3$\3$\3$\3$\3$\3$\7$\u035d\n$\f$\16$\u0360\13$\3%\3")
        buf.write("%\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\3&\7&\u0373")
        buf.write("\n&\f&\16&\u0376\13&\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3\'\3")
        buf.write("\'\7\'\u0381\n\'\f\'\16\'\u0384\13\'\3(\3(\3(\3(\3(\3")
        buf.write("(\7(\u038c\n(\f(\16(\u038f\13(\3)\3)\3)\3)\3)\3)\7)\u0397")
        buf.write("\n)\f)\16)\u039a\13)\3*\3*\3*\3*\3*\3*\7*\u03a2\n*\f*")
        buf.write("\16*\u03a5\13*\3+\3+\3+\3+\3+\3+\3+\3+\3+\7+\u03b0\n+")
        buf.write("\f+\16+\u03b3\13+\3,\3,\3,\3,\3,\3,\3,\3,\3,\7,\u03be")
        buf.write("\n,\f,\16,\u03c1\13,\3-\3-\3-\3-\3-\3-\3-\5-\u03ca\n-")
        buf.write("\3.\3.\3.\3.\3.\3.\5.\u03d2\n.\3/\3/\3\60\3\60\3\60\3")
        buf.write("\60\3\60\3\60\7\60\u03dc\n\60\f\60\16\60\u03df\13\60\3")
        buf.write("\61\3\61\3\62\3\62\5\62\u03e5\n\62\3\62\3\62\5\62\u03e9")
        buf.write("\n\62\3\62\3\62\5\62\u03ed\n\62\3\62\3\62\5\62\u03f1\n")
        buf.write("\62\3\62\3\62\5\62\u03f5\n\62\3\62\3\62\3\62\5\62\u03fa")
        buf.write("\n\62\3\62\5\62\u03fd\n\62\3\63\5\63\u0400\n\63\3\63\3")
        buf.write("\63\3\63\3\63\5\63\u0406\n\63\3\63\3\63\3\63\3\63\3\63")
        buf.write("\3\63\5\63\u040e\n\63\3\63\3\63\3\63\5\63\u0413\n\63\3")
        buf.write("\64\5\64\u0416\n\64\3\64\3\64\3\65\3\65\5\65\u041c\n\65")
        buf.write("\3\65\3\65\3\66\3\66\3\66\3\66\3\66\7\66\u0425\n\66\f")
        buf.write("\66\16\66\u0428\13\66\3\67\3\67\3\67\3\67\3\67\3\67\3")
        buf.write("\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67\3\67")
        buf.write("\3\67\3\67\3\67\5\67\u043e\n\67\38\38\58\u0442\n8\38\3")
        buf.write("8\38\38\38\38\58\u044a\n8\38\38\38\38\58\u0450\n8\39\3")
        buf.write("9\39\39\39\39\39\39\39\39\39\39\39\39\39\39\39\39\59\u0464")
        buf.write("\n9\39\39\59\u0468\n9\39\39\39\39\39\39\39\39\39\39\3")
        buf.write("9\59\u0475\n9\3:\3:\5:\u0479\n:\3;\5;\u047c\n;\3;\3;\3")
        buf.write(";\3<\3<\5<\u0483\n<\3=\3=\3=\3=\3=\3=\5=\u048b\n=\3=\3")
        buf.write("=\3=\3=\3=\3=\3=\3=\5=\u0495\n=\3>\3>\3?\3?\3?\3?\3?\7")
        buf.write("?\u049e\n?\f?\16?\u04a1\13?\3@\3@\3@\3@\3@\3@\3@\3@\3")
        buf.write("@\5@\u04ac\n@\3A\3A\3A\3A\3A\3A\3A\3A\5A\u04b6\nA\3B\3")
        buf.write("B\3B\5B\u04bb\nB\3B\3B\3B\3B\3C\5C\u04c2\nC\3C\5C\u04c5")
        buf.write("\nC\3C\3C\3C\5C\u04ca\nC\3C\3C\3C\5C\u04cf\nC\3D\3D\3")
        buf.write("D\3D\3D\3D\3D\3D\3E\3E\3F\3F\3F\3G\3G\3G\3G\3G\3G\5G\u04e4")
        buf.write("\nG\3H\3H\5H\u04e8\nH\3H\3H\3H\5H\u04ed\nH\3I\3I\3J\3")
        buf.write("J\3K\3K\3L\3L\3L\5L\u04f8\nL\3M\3M\3M\3M\5M\u04fe\nM\3")
        buf.write("N\3N\5N\u0502\nN\3N\3N\3N\5N\u0507\nN\3O\3O\5O\u050b\n")
        buf.write("O\3O\3O\3O\5O\u0510\nO\3P\5P\u0513\nP\3P\3P\3P\3P\3P\3")
        buf.write("P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\3P\5P\u0529\n")
        buf.write("P\3Q\3Q\3Q\3Q\5Q\u052f\nQ\3R\3R\3R\3R\3R\3R\3R\3R\3R\5")
        buf.write("R\u053a\nR\3S\3S\5S\u053e\nS\3S\5S\u0541\nS\3S\3S\3S\3")
        buf.write("S\3S\3S\3S\3S\5S\u054b\nS\3S\3S\3S\3S\5S\u0551\nS\3S\5")
        buf.write("S\u0554\nS\3T\3T\3U\3U\3U\5U\u055b\nU\3U\3U\3U\3U\3U\3")
        buf.write("U\3U\3U\5U\u0565\nU\3V\3V\5V\u0569\nV\3V\5V\u056c\nV\3")
        buf.write("V\5V\u056f\nV\3V\3V\5V\u0573\nV\3V\3V\3V\5V\u0578\nV\5")
        buf.write("V\u057a\nV\3W\3W\5W\u057e\nW\3W\3W\5W\u0582\nW\3W\3W\3")
        buf.write("X\3X\3X\3X\3X\5X\u058b\nX\3Y\3Y\3Y\3Z\3Z\3Z\3Z\3Z\3Z\7")
        buf.write("Z\u0596\nZ\fZ\16Z\u0599\13Z\3[\3[\3[\3[\3[\5[\u05a0\n")
        buf.write("[\3\\\3\\\3]\3]\5]\u05a6\n]\3^\3^\3_\3_\5_\u05ac\n_\3")
        buf.write("`\3`\5`\u05b0\n`\3a\5a\u05b3\na\3a\3a\3a\3a\3a\3a\3b\5")
        buf.write("b\u05bc\nb\3b\3b\3b\3b\3b\3b\3c\5c\u05c5\nc\3c\3c\3c\3")
        buf.write("c\3c\3d\5d\u05cd\nd\3e\3e\3f\3f\3f\3f\3f\3f\3g\5g\u05d8")
        buf.write("\ng\3g\3g\3h\3h\5h\u05de\nh\3h\3h\3h\3h\3h\3h\3h\3h\3")
        buf.write("h\5h\u05e9\nh\3i\5i\u05ec\ni\3i\3i\3i\5i\u05f1\ni\3i\3")
        buf.write("i\3i\3j\3j\3j\3j\3j\3j\3k\3k\3k\3k\5k\u0600\nk\3k\3k\3")
        buf.write("k\3k\5k\u0606\nk\3l\3l\3l\3l\3l\7l\u060d\nl\fl\16l\u0610")
        buf.write("\13l\3m\3m\3m\3m\3m\3m\3m\5m\u0619\nm\3n\3n\3n\3n\5n\u061f")
        buf.write("\nn\3n\3n\3n\3n\3n\3n\5n\u0627\nn\3n\3n\5n\u062b\nn\3")
        buf.write("o\3o\5o\u062f\no\3o\3o\3o\5o\u0634\no\3o\3o\3o\5o\u0639")
        buf.write("\no\3o\3o\3o\3o\3o\7o\u0640\no\fo\16o\u0643\13o\3p\3p")
        buf.write("\5p\u0647\np\3q\3q\5q\u064b\nq\3r\3r\3r\3r\3s\3s\3t\3")
        buf.write("t\3t\3t\3u\3u\5u\u0659\nu\3u\3u\7u\u065d\nu\fu\16u\u0660")
        buf.write("\13u\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\3v\6v\u066f\n")
        buf.write("v\rv\16v\u0670\5v\u0673\nv\3w\3w\3w\3w\3w\3w\7w\u067b")
        buf.write("\nw\fw\16w\u067e\13w\3x\3x\5x\u0682\nx\3y\3y\3y\3y\3y")
        buf.write("\5y\u0689\ny\3z\3z\3z\5z\u068e\nz\3z\3z\5z\u0692\nz\3")
        buf.write("{\3{\3{\5{\u0697\n{\3{\3{\3{\3{\5{\u069d\n{\3{\3{\3{\3")
        buf.write("{\3{\5{\u06a4\n{\3{\3{\5{\u06a8\n{\7{\u06aa\n{\f{\16{")
        buf.write("\u06ad\13{\3|\3|\3|\3|\5|\u06b3\n|\3|\5|\u06b6\n|\3|\5")
        buf.write("|\u06b9\n|\3|\5|\u06bc\n|\3}\3}\3}\5}\u06c1\n}\3~\3~\5")
        buf.write("~\u06c5\n~\3~\5~\u06c8\n~\3~\3~\5~\u06cc\n~\3~\3~\5~\u06d0")
        buf.write("\n~\3~\3~\3~\5~\u06d5\n~\3~\5~\u06d8\n~\5~\u06da\n~\3")
        buf.write("\177\3\177\5\177\u06de\n\177\3\u0080\3\u0080\3\u0081\3")
        buf.write("\u0081\3\u0082\5\u0082\u06e5\n\u0082\3\u0082\3\u0082\3")
        buf.write("\u0083\3\u0083\5\u0083\u06eb\n\u0083\3\u0084\3\u0084\5")
        buf.write("\u0084\u06ef\n\u0084\3\u0084\3\u0084\3\u0084\3\u0084\5")
        buf.write("\u0084\u06f5\n\u0084\3\u0085\3\u0085\3\u0085\5\u0085\u06fa")
        buf.write("\n\u0085\5\u0085\u06fc\n\u0085\3\u0086\3\u0086\3\u0086")
        buf.write("\3\u0086\5\u0086\u0702\n\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u0706\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\5\u0086")
        buf.write("\u070c\n\u0086\3\u0086\3\u0086\3\u0086\3\u0086\3\u0086")
        buf.write("\5\u0086\u0713\n\u0086\3\u0086\3\u0086\5\u0086\u0717\n")
        buf.write("\u0086\7\u0086\u0719\n\u0086\f\u0086\16\u0086\u071c\13")
        buf.write("\u0086\3\u0087\3\u0087\3\u0087\3\u0087\5\u0087\u0722\n")
        buf.write("\u0087\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088\3\u0088")
        buf.write("\3\u0088\3\u0088\5\u0088\u072c\n\u0088\3\u0088\3\u0088")
        buf.write("\5\u0088\u0730\n\u0088\7\u0088\u0732\n\u0088\f\u0088\16")
        buf.write("\u0088\u0735\13\u0088\3\u0089\5\u0089\u0738\n\u0089\3")
        buf.write("\u0089\5\u0089\u073b\n\u0089\3\u0089\3\u0089\3\u0089\3")
        buf.write("\u0089\5\u0089\u0741\n\u0089\3\u008a\3\u008a\3\u008a\3")
        buf.write("\u008a\3\u008a\3\u008a\7\u008a\u0749\n\u008a\f\u008a\16")
        buf.write("\u008a\u074c\13\u008a\3\u008b\5\u008b\u074f\n\u008b\3")
        buf.write("\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u0755\n\u008b\3")
        buf.write("\u008b\3\u008b\3\u008b\3\u008b\3\u008b\3\u008b\5\u008b")
        buf.write("\u075d\n\u008b\3\u008b\3\u008b\5\u008b\u0761\n\u008b\3")
        buf.write("\u008b\5\u008b\u0764\n\u008b\3\u008b\3\u008b\5\u008b\u0768")
        buf.write("\n\u008b\3\u008b\3\u008b\3\u008b\5\u008b\u076d\n\u008b")
        buf.write("\3\u008c\5\u008c\u0770\n\u008c\3\u008c\5\u008c\u0773\n")
        buf.write("\u008c\3\u008c\3\u008c\5\u008c\u0777\n\u008c\3\u008c\3")
        buf.write("\u008c\3\u008d\5\u008d\u077c\n\u008d\3\u008d\3\u008d\3")
        buf.write("\u008d\3\u008d\3\u008d\3\u008d\3\u008d\3\u008d\5\u008d")
        buf.write("\u0786\n\u008d\3\u008e\3\u008e\3\u008e\3\u008e\3\u008e")
        buf.write("\5\u008e\u078d\n\u008e\3\u008f\3\u008f\3\u008f\5\u008f")
        buf.write("\u0792\n\u008f\3\u0090\3\u0090\5\u0090\u0796\n\u0090\3")
        buf.write("\u0091\3\u0091\3\u0091\5\u0091\u079b\n\u0091\3\u0091\3")
        buf.write("\u0091\3\u0091\3\u0091\5\u0091\u07a1\n\u0091\7\u0091\u07a3")
        buf.write("\n\u0091\f\u0091\16\u0091\u07a6\13\u0091\3\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u07ab\n\u0092\3\u0092\3\u0092\3\u0092")
        buf.write("\3\u0092\5\u0092\u07b1\n\u0092\3\u0093\3\u0093\5\u0093")
        buf.write("\u07b5\n\u0093\3\u0094\3\u0094\3\u0094\5\u0094\u07ba\n")
        buf.write("\u0094\3\u0094\3\u0094\3\u0095\3\u0095\5\u0095\u07c0\n")
        buf.write("\u0095\3\u0095\3\u0095\5\u0095\u07c4\n\u0095\3\u0095\5")
        buf.write("\u0095\u07c7\n\u0095\3\u0095\3\u0095\5\u0095\u07cb\n\u0095")
        buf.write("\3\u0095\5\u0095\u07ce\n\u0095\5\u0095\u07d0\n\u0095\3")
        buf.write("\u0096\5\u0096\u07d3\n\u0096\3\u0096\3\u0096\3\u0097\3")
        buf.write("\u0097\3\u0098\3\u0098\3\u0099\3\u0099\5\u0099\u07dd\n")
        buf.write("\u0099\3\u0099\3\u0099\3\u0099\5\u0099\u07e2\n\u0099\5")
        buf.write("\u0099\u07e4\n\u0099\3\u009a\5\u009a\u07e7\n\u009a\3\u009a")
        buf.write("\5\u009a\u07ea\n\u009a\3\u009a\5\u009a\u07ed\n\u009a\3")
        buf.write("\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a\3\u009a")
        buf.write("\5\u009a\u07f6\n\u009a\3\u009b\3\u009b\3\u009b\3\u009b")
        buf.write("\3\u009b\3\u009b\7\u009b\u07fe\n\u009b\f\u009b\16\u009b")
        buf.write("\u0801\13\u009b\3\u009c\3\u009c\5\u009c\u0805\n\u009c")
        buf.write("\3\u009c\5\u009c\u0808\n\u009c\3\u009c\3\u009c\5\u009c")
        buf.write("\u080c\n\u009c\3\u009c\5\u009c\u080f\n\u009c\3\u009c\5")
        buf.write("\u009c\u0812\n\u009c\3\u009c\3\u009c\5\u009c\u0816\n\u009c")
        buf.write("\3\u009d\3\u009d\3\u009d\3\u009d\3\u009d\7\u009d\u081d")
        buf.write("\n\u009d\f\u009d\16\u009d\u0820\13\u009d\3\u009e\3\u009e")
        buf.write("\3\u009f\3\u009f\3\u009f\3\u009f\3\u00a0\3\u00a0\3\u00a0")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u082e\n\u00a1\3\u00a1")
        buf.write("\3\u00a1\3\u00a1\3\u00a1\5\u00a1\u0834\n\u00a1\7\u00a1")
        buf.write("\u0836\n\u00a1\f\u00a1\16\u00a1\u0839\13\u00a1\3\u00a2")
        buf.write("\5\u00a2\u083c\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0840\n")
        buf.write("\u00a2\3\u00a2\3\u00a2\5\u00a2\u0844\n\u00a2\3\u00a2\3")
        buf.write("\u00a2\5\u00a2\u0848\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u084c")
        buf.write("\n\u00a2\3\u00a2\3\u00a2\5\u00a2\u0850\n\u00a2\3\u00a3")
        buf.write("\5\u00a3\u0853\n\u00a3\3\u00a3\3\u00a3\5\u00a3\u0857\n")
        buf.write("\u00a3\3\u00a4\3\u00a4\3\u00a5\3\u00a5\3\u00a6\3\u00a6")
        buf.write("\3\u00a6\3\u00a7\3\u00a7\5\u00a7\u0862\n\u00a7\3\u00a8")
        buf.write("\3\u00a8\5\u00a8\u0866\n\u00a8\3\u00a9\3\u00a9\3\u00a9")
        buf.write("\3\u00aa\3\u00aa\5\u00aa\u086d\n\u00aa\3\u00aa\3\u00aa")
        buf.write("\5\u00aa\u0871\n\u00aa\3\u00aa\3\u00aa\3\u00aa\5\u00aa")
        buf.write("\u0876\n\u00aa\3\u00ab\3\u00ab\3\u00ab\5\u00ab\u087b\n")
        buf.write("\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\3\u00ab\5\u00ab")
        buf.write("\u0882\n\u00ab\3\u00ac\3\u00ac\5\u00ac\u0886\n\u00ac\3")
        buf.write("\u00ad\3\u00ad\3\u00ad\3\u00ae\3\u00ae\3\u00ae\3\u00ae")
        buf.write("\3\u00ae\5\u00ae\u0890\n\u00ae\3\u00af\3\u00af\3\u00af")
        buf.write("\3\u00af\3\u00af\3\u00af\3\u00b0\3\u00b0\3\u00b0\3\u00b0")
        buf.write("\3\u00b0\3\u00b0\7\u00b0\u089e\n\u00b0\f\u00b0\16\u00b0")
        buf.write("\u08a1\13\u00b0\3\u00b1\3\u00b1\5\u00b1\u08a5\n\u00b1")
        buf.write("\3\u00b2\3\u00b2\5\u00b2\u08a9\n\u00b2\3\u00b2\5\u00b2")
        buf.write("\u08ac\n\u00b2\3\u00b2\3\u00b2\5\u00b2\u08b0\n\u00b2\3")
        buf.write("\u00b2\3\u00b2\3\u00b2\3\u00b2\5\u00b2\u08b6\n\u00b2\3")
        buf.write("\u00b2\5\u00b2\u08b9\n\u00b2\3\u00b2\3\u00b2\5\u00b2\u08bd")
        buf.write("\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\3\u00b2\5\u00b2\u08c7\n\u00b2\3\u00b2\5\u00b2")
        buf.write("\u08ca\n\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\3\u00b2\5\u00b2\u08d2\n\u00b2\3\u00b2\3\u00b2\3\u00b2")
        buf.write("\5\u00b2\u08d7\n\u00b2\3\u00b3\3\u00b3\3\u00b3\5\u00b3")
        buf.write("\u08dc\n\u00b3\3\u00b3\3\u00b3\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\5\u00b4\u08e4\n\u00b4\3\u00b4\3\u00b4\3\u00b4")
        buf.write("\3\u00b4\3\u00b4\5\u00b4\u08eb\n\u00b4\3\u00b4\3\u00b4")
        buf.write("\5\u00b4\u08ef\n\u00b4\3\u00b5\3\u00b5\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\5\u00b6\u08f6\n\u00b6\3\u00b6\3\u00b6\3\u00b6")
        buf.write("\3\u00b6\5\u00b6\u08fc\n\u00b6\7\u00b6\u08fe\n\u00b6\f")
        buf.write("\u00b6\16\u00b6\u0901\13\u00b6\3\u00b7\3\u00b7\3\u00b7")
        buf.write("\5\u00b7\u0906\n\u00b7\3\u00b8\3\u00b8\3\u00b8\3\u00b8")
        buf.write("\3\u00b8\3\u00b8\3\u00b8\5\u00b8\u090f\n\u00b8\3\u00b8")
        buf.write("\3\u00b8\5\u00b8\u0913\n\u00b8\3\u00b9\5\u00b9\u0916\n")
        buf.write("\u00b9\3\u00b9\3\u00b9\3\u00b9\3\u00ba\3\u00ba\3\u00ba")
        buf.write("\3\u00ba\3\u00ba\3\u00bb\3\u00bb\3\u00bb\3\u00bb\3\u00bc")
        buf.write("\3\u00bc\5\u00bc\u0926\n\u00bc\3\u00bc\3\u00bc\3\u00bc")
        buf.write("\3\u00bd\3\u00bd\5\u00bd\u092d\n\u00bd\3\u00be\3\u00be")
        buf.write("\3\u00be\3\u00be\3\u00be\3\u00be\3\u00bf\5\u00bf\u0936")
        buf.write("\n\u00bf\3\u00bf\3\u00bf\3\u00bf\3\u00bf\5\u00bf\u093c")
        buf.write("\n\u00bf\3\u00bf\3\u00bf\5\u00bf\u0940\n\u00bf\3\u00bf")
        buf.write("\5\u00bf\u0943\n\u00bf\3\u00c0\3\u00c0\5\u00c0\u0947\n")
        buf.write("\u00c0\3\u00c1\3\u00c1\5\u00c1\u094b\n\u00c1\3\u00c2\3")
        buf.write("\u00c2\3\u00c2\5\u00c2\u0950\n\u00c2\3\u00c2\3\u00c2\3")
        buf.write("\u00c3\3\u00c3\3\u00c3\5\u00c3\u0957\n\u00c3\3\u00c3\3")
        buf.write("\u00c3\3\u00c3\3\u00c3\5\u00c3\u095d\n\u00c3\7\u00c3\u095f")
        buf.write("\n\u00c3\f\u00c3\16\u00c3\u0962\13\u00c3\3\u00c4\3\u00c4")
        buf.write("\3\u00c4\3\u00c4\3\u00c4\3\u00c4\5\u00c4\u096a\n\u00c4")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5\3\u00c5")
        buf.write("\3\u00c5\3\u00c5\5\u00c5\u099f\n\u00c5\3\u00c6\3\u00c6")
        buf.write("\3\u00c6\3\u00c6\3\u00c6\3\u00c6\3\u00c6\5\u00c6\u09a8")
        buf.write("\n\u00c6\3\u00c7\3\u00c7\3\u00c8\3\u00c8\3\u00c9\3\u00c9")
        buf.write("\3\u00c9\2$\f\26 \66@BDFJLNPRTV^j|\u00b2\u00d6\u00dc\u00e8")
        buf.write("\u00ec\u00f4\u010a\u010e\u0112\u0120\u0134\u0138\u0140")
        buf.write("\u015e\u016a\u0184\u00ca\2\4\6\b\n\f\16\20\22\24\26\30")
        buf.write("\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJLNPRTVXZ\\^`b")
        buf.write("dfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088\u008a\u008c")
        buf.write("\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c\u009e")
        buf.write("\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0")
        buf.write("\u00b2\u00b4\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2")
        buf.write("\u00c4\u00c6\u00c8\u00ca\u00cc\u00ce\u00d0\u00d2\u00d4")
        buf.write("\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4\u00e6")
        buf.write("\u00e8\u00ea\u00ec\u00ee\u00f0\u00f2\u00f4\u00f6\u00f8")
        buf.write("\u00fa\u00fc\u00fe\u0100\u0102\u0104\u0106\u0108\u010a")
        buf.write("\u010c\u010e\u0110\u0112\u0114\u0116\u0118\u011a\u011c")
        buf.write("\u011e\u0120\u0122\u0124\u0126\u0128\u012a\u012c\u012e")
        buf.write("\u0130\u0132\u0134\u0136\u0138\u013a\u013c\u013e\u0140")
        buf.write("\u0142\u0144\u0146\u0148\u014a\u014c\u014e\u0150\u0152")
        buf.write("\u0154\u0156\u0158\u015a\u015c\u015e\u0160\u0162\u0164")
        buf.write("\u0166\u0168\u016a\u016c\u016e\u0170\u0172\u0174\u0176")
        buf.write("\u0178\u017a\u017c\u017e\u0180\u0182\u0184\u0186\u0188")
        buf.write("\u018a\u018c\u018e\u0190\2\20\4\2bbff\5\2\3\4\\^bd\3\2")
        buf.write("qr\5\2ffipst\7\2%%\60\60::@@GG\5\2##--QQ\3\2V[\4\2\27")
        buf.write("\27SS\4\2\5\5bb\5\2\26\26CCNN\4\2\'\'\66\66\3\2\679\4")
        buf.write("\2&&II\3\2\u0091\u0094\2\u0ace\2\u0193\3\2\2\2\4\u01a5")
        buf.write("\3\2\2\2\6\u01a9\3\2\2\2\b\u01b4\3\2\2\2\n\u01b6\3\2\2")
        buf.write("\2\f\u01c7\3\2\2\2\16\u01d8\3\2\2\2\20\u01de\3\2\2\2\22")
        buf.write("\u01ea\3\2\2\2\24\u01ec\3\2\2\2\26\u01ee\3\2\2\2\30\u0200")
        buf.write("\3\2\2\2\32\u0206\3\2\2\2\34\u020d\3\2\2\2\36\u020f\3")
        buf.write("\2\2\2 \u025e\3\2\2\2\"\u028b\3\2\2\2$\u028d\3\2\2\2&")
        buf.write("\u028f\3\2\2\2(\u02a7\3\2\2\2*\u02c5\3\2\2\2,\u02c7\3")
        buf.write("\2\2\2.\u02e1\3\2\2\2\60\u02e3\3\2\2\2\62\u02e7\3\2\2")
        buf.write("\2\64\u02f0\3\2\2\2\66\u02f2\3\2\2\28\u030b\3\2\2\2:\u0319")
        buf.write("\3\2\2\2<\u031b\3\2\2\2>\u0326\3\2\2\2@\u0328\3\2\2\2")
        buf.write("B\u0336\3\2\2\2D\u0347\3\2\2\2F\u0355\3\2\2\2H\u0361\3")
        buf.write("\2\2\2J\u0363\3\2\2\2L\u0377\3\2\2\2N\u0385\3\2\2\2P\u0390")
        buf.write("\3\2\2\2R\u039b\3\2\2\2T\u03a6\3\2\2\2V\u03b4\3\2\2\2")
        buf.write("X\u03c9\3\2\2\2Z\u03d1\3\2\2\2\\\u03d3\3\2\2\2^\u03d5")
        buf.write("\3\2\2\2`\u03e0\3\2\2\2b\u03fc\3\2\2\2d\u0412\3\2\2\2")
        buf.write("f\u0415\3\2\2\2h\u0419\3\2\2\2j\u041f\3\2\2\2l\u043d\3")
        buf.write("\2\2\2n\u044f\3\2\2\2p\u0474\3\2\2\2r\u0478\3\2\2\2t\u047b")
        buf.write("\3\2\2\2v\u0482\3\2\2\2x\u0494\3\2\2\2z\u0496\3\2\2\2")
        buf.write("|\u0498\3\2\2\2~\u04ab\3\2\2\2\u0080\u04b5\3\2\2\2\u0082")
        buf.write("\u04b7\3\2\2\2\u0084\u04ce\3\2\2\2\u0086\u04d0\3\2\2\2")
        buf.write("\u0088\u04d8\3\2\2\2\u008a\u04da\3\2\2\2\u008c\u04e3\3")
        buf.write("\2\2\2\u008e\u04ec\3\2\2\2\u0090\u04ee\3\2\2\2\u0092\u04f0")
        buf.write("\3\2\2\2\u0094\u04f2\3\2\2\2\u0096\u04f7\3\2\2\2\u0098")
        buf.write("\u04fd\3\2\2\2\u009a\u0506\3\2\2\2\u009c\u050f\3\2\2\2")
        buf.write("\u009e\u0528\3\2\2\2\u00a0\u052e\3\2\2\2\u00a2\u0539\3")
        buf.write("\2\2\2\u00a4\u0553\3\2\2\2\u00a6\u0555\3\2\2\2\u00a8\u0564")
        buf.write("\3\2\2\2\u00aa\u0579\3\2\2\2\u00ac\u057b\3\2\2\2\u00ae")
        buf.write("\u058a\3\2\2\2\u00b0\u058c\3\2\2\2\u00b2\u058f\3\2\2\2")
        buf.write("\u00b4\u059f\3\2\2\2\u00b6\u05a1\3\2\2\2\u00b8\u05a5\3")
        buf.write("\2\2\2\u00ba\u05a7\3\2\2\2\u00bc\u05ab\3\2\2\2\u00be\u05af")
        buf.write("\3\2\2\2\u00c0\u05b2\3\2\2\2\u00c2\u05bb\3\2\2\2\u00c4")
        buf.write("\u05c4\3\2\2\2\u00c6\u05cc\3\2\2\2\u00c8\u05ce\3\2\2\2")
        buf.write("\u00ca\u05d0\3\2\2\2\u00cc\u05d7\3\2\2\2\u00ce\u05e8\3")
        buf.write("\2\2\2\u00d0\u05eb\3\2\2\2\u00d2\u05f5\3\2\2\2\u00d4\u0605")
        buf.write("\3\2\2\2\u00d6\u0607\3\2\2\2\u00d8\u0618\3\2\2\2\u00da")
        buf.write("\u062a\3\2\2\2\u00dc\u0633\3\2\2\2\u00de\u0644\3\2\2\2")
        buf.write("\u00e0\u064a\3\2\2\2\u00e2\u064c\3\2\2\2\u00e4\u0650\3")
        buf.write("\2\2\2\u00e6\u0652\3\2\2\2\u00e8\u0656\3\2\2\2\u00ea\u0672")
        buf.write("\3\2\2\2\u00ec\u0674\3\2\2\2\u00ee\u067f\3\2\2\2\u00f0")
        buf.write("\u0688\3\2\2\2\u00f2\u0691\3\2\2\2\u00f4\u069c\3\2\2\2")
        buf.write("\u00f6\u06ae\3\2\2\2\u00f8\u06bd\3\2\2\2\u00fa\u06d9\3")
        buf.write("\2\2\2\u00fc\u06db\3\2\2\2\u00fe\u06df\3\2\2\2\u0100\u06e1")
        buf.write("\3\2\2\2\u0102\u06e4\3\2\2\2\u0104\u06e8\3\2\2\2\u0106")
        buf.write("\u06f4\3\2\2\2\u0108\u06fb\3\2\2\2\u010a\u070b\3\2\2\2")
        buf.write("\u010c\u0721\3\2\2\2\u010e\u0723\3\2\2\2\u0110\u0740\3")
        buf.write("\2\2\2\u0112\u0742\3\2\2\2\u0114\u076c\3\2\2\2\u0116\u076f")
        buf.write("\3\2\2\2\u0118\u0785\3\2\2\2\u011a\u078c\3\2\2\2\u011c")
        buf.write("\u0791\3\2\2\2\u011e\u0795\3\2\2\2\u0120\u0797\3\2\2\2")
        buf.write("\u0122\u07b0\3\2\2\2\u0124\u07b4\3\2\2\2\u0126\u07b6\3")
        buf.write("\2\2\2\u0128\u07cf\3\2\2\2\u012a\u07d2\3\2\2\2\u012c\u07d6")
        buf.write("\3\2\2\2\u012e\u07d8\3\2\2\2\u0130\u07e3\3\2\2\2\u0132")
        buf.write("\u07f5\3\2\2\2\u0134\u07f7\3\2\2\2\u0136\u0815\3\2\2\2")
        buf.write("\u0138\u0817\3\2\2\2\u013a\u0821\3\2\2\2\u013c\u0823\3")
        buf.write("\2\2\2\u013e\u0827\3\2\2\2\u0140\u082a\3\2\2\2\u0142\u084f")
        buf.write("\3\2\2\2\u0144\u0856\3\2\2\2\u0146\u0858\3\2\2\2\u0148")
        buf.write("\u085a\3\2\2\2\u014a\u085c\3\2\2\2\u014c\u085f\3\2\2\2")
        buf.write("\u014e\u0863\3\2\2\2\u0150\u0867\3\2\2\2\u0152\u0875\3")
        buf.write("\2\2\2\u0154\u0881\3\2\2\2\u0156\u0885\3\2\2\2\u0158\u0887")
        buf.write("\3\2\2\2\u015a\u088f\3\2\2\2\u015c\u0891\3\2\2\2\u015e")
        buf.write("\u0897\3\2\2\2\u0160\u08a4\3\2\2\2\u0162\u08d6\3\2\2\2")
        buf.write("\u0164\u08d8\3\2\2\2\u0166\u08ee\3\2\2\2\u0168\u08f0\3")
        buf.write("\2\2\2\u016a\u08f2\3\2\2\2\u016c\u0905\3\2\2\2\u016e\u0912")
        buf.write("\3\2\2\2\u0170\u0915\3\2\2\2\u0172\u091a\3\2\2\2\u0174")
        buf.write("\u091f\3\2\2\2\u0176\u0923\3\2\2\2\u0178\u092a\3\2\2\2")
        buf.write("\u017a\u092e\3\2\2\2\u017c\u0942\3\2\2\2\u017e\u0944\3")
        buf.write("\2\2\2\u0180\u094a\3\2\2\2\u0182\u094c\3\2\2\2\u0184\u0953")
        buf.write("\3\2\2\2\u0186\u0969\3\2\2\2\u0188\u099e\3\2\2\2\u018a")
        buf.write("\u09a7\3\2\2\2\u018c\u09a9\3\2\2\2\u018e\u09ab\3\2\2\2")
        buf.write("\u0190\u09ad\3\2\2\2\u0192\u0194\5|?\2\u0193\u0192\3\2")
        buf.write("\2\2\u0193\u0194\3\2\2\2\u0194\u0195\3\2\2\2\u0195\u0196")
        buf.write("\7\2\2\3\u0196\3\3\2\2\2\u0197\u019b\5\u018a\u00c6\2\u0198")
        buf.write("\u019a\5\u018a\u00c6\2\u0199\u0198\3\2\2\2\u019a\u019d")
        buf.write("\3\2\2\2\u019b\u0199\3\2\2\2\u019b\u019c\3\2\2\2\u019c")
        buf.write("\u01a6\3\2\2\2\u019d\u019b\3\2\2\2\u019e\u01a6\7F\2\2")
        buf.write("\u019f\u01a0\7V\2\2\u01a0\u01a1\5^\60\2\u01a1\u01a2\7")
        buf.write("W\2\2\u01a2\u01a6\3\2\2\2\u01a3\u01a6\5\6\4\2\u01a4\u01a6")
        buf.write("\5\16\b\2\u01a5\u0197\3\2\2\2\u01a5\u019e\3\2\2\2\u01a5")
        buf.write("\u019f\3\2\2\2\u01a5\u01a3\3\2\2\2\u01a5\u01a4\3\2\2\2")
        buf.write("\u01a6\5\3\2\2\2\u01a7\u01aa\5\b\5\2\u01a8\u01aa\5\n\6")
        buf.write("\2\u01a9\u01a7\3\2\2\2\u01a9\u01a8\3\2\2\2\u01aa\7\3\2")
        buf.write("\2\2\u01ab\u01b5\7\u0087\2\2\u01ac\u01b5\5\u0158\u00ad")
        buf.write("\2\u01ad\u01b5\5\u014a\u00a6\2\u01ae\u01b5\5\u015a\u00ae")
        buf.write("\2\u01af\u01b0\7d\2\2\u01b0\u01b5\5\u0124\u0093\2\u01b1")
        buf.write("\u01b2\7d\2\2\u01b2\u01b5\5\u00a2R\2\u01b3\u01b5\5\u0166")
        buf.write("\u00b4\2\u01b4\u01ab\3\2\2\2\u01b4\u01ac\3\2\2\2\u01b4")
        buf.write("\u01ad\3\2\2\2\u01b4\u01ae\3\2\2\2\u01b4\u01af\3\2\2\2")
        buf.write("\u01b4\u01b1\3\2\2\2\u01b4\u01b3\3\2\2\2\u01b5\t\3\2\2")
        buf.write("\2\u01b6\u01b8\5\f\7\2\u01b7\u01b9\7E\2\2\u01b8\u01b7")
        buf.write("\3\2\2\2\u01b8\u01b9\3\2\2\2\u01b9\u01ba\3\2\2\2\u01ba")
        buf.write("\u01bb\5\b\5\2\u01bb\13\3\2\2\2\u01bc\u01bd\b\7\1\2\u01bd")
        buf.write("\u01c8\7\u0082\2\2\u01be\u01bf\5\u00a0Q\2\u01bf\u01c0")
        buf.write("\7\u0082\2\2\u01c0\u01c8\3\2\2\2\u01c1\u01c2\5\u00b8]")
        buf.write("\2\u01c2\u01c3\7\u0082\2\2\u01c3\u01c8\3\2\2\2\u01c4\u01c5")
        buf.write("\5\u00a2R\2\u01c5\u01c6\7\u0082\2\2\u01c6\u01c8\3\2\2")
        buf.write("\2\u01c7\u01bc\3\2\2\2\u01c7\u01be\3\2\2\2\u01c7\u01c1")
        buf.write("\3\2\2\2\u01c7\u01c4\3\2\2\2\u01c8\u01d5\3\2\2\2\u01c9")
        buf.write("\u01ca\f\4\2\2\u01ca\u01cb\7\u0087\2\2\u01cb\u01d4\7\u0082")
        buf.write("\2\2\u01cc\u01ce\f\3\2\2\u01cd\u01cf\7E\2\2\u01ce\u01cd")
        buf.write("\3\2\2\2\u01ce\u01cf\3\2\2\2\u01cf\u01d0\3\2\2\2\u01d0")
        buf.write("\u01d1\5\u0164\u00b3\2\u01d1\u01d2\7\u0082\2\2\u01d2\u01d4")
        buf.write("\3\2\2\2\u01d3\u01c9\3\2\2\2\u01d3\u01cc\3\2\2\2\u01d4")
        buf.write("\u01d7\3\2\2\2\u01d5\u01d3\3\2\2\2\u01d5\u01d6\3\2\2\2")
        buf.write("\u01d6\r\3\2\2\2\u01d7\u01d5\3\2\2\2\u01d8\u01da\5\20")
        buf.write("\t\2\u01d9\u01db\5\36\20\2\u01da\u01d9\3\2\2\2\u01da\u01db")
        buf.write("\3\2\2\2\u01db\u01dc\3\2\2\2\u01dc\u01dd\5h\65\2\u01dd")
        buf.write("\17\3\2\2\2\u01de\u01e0\7X\2\2\u01df\u01e1\5\22\n\2\u01e0")
        buf.write("\u01df\3\2\2\2\u01e0\u01e1\3\2\2\2\u01e1\u01e2\3\2\2\2")
        buf.write("\u01e2\u01e3\7Y\2\2\u01e3\21\3\2\2\2\u01e4\u01eb\5\24")
        buf.write("\13\2\u01e5\u01eb\5\26\f\2\u01e6\u01e7\5\24\13\2\u01e7")
        buf.write("\u01e8\7}\2\2\u01e8\u01e9\5\26\f\2\u01e9\u01eb\3\2\2\2")
        buf.write("\u01ea\u01e4\3\2\2\2\u01ea\u01e5\3\2\2\2\u01ea\u01e6\3")
        buf.write("\2\2\2\u01eb\23\3\2\2\2\u01ec\u01ed\t\2\2\2\u01ed\25\3")
        buf.write("\2\2\2\u01ee\u01ef\b\f\1\2\u01ef\u01f1\5\30\r\2\u01f0")
        buf.write("\u01f2\7\u0086\2\2\u01f1\u01f0\3\2\2\2\u01f1\u01f2\3\2")
        buf.write("\2\2\u01f2\u01fb\3\2\2\2\u01f3\u01f4\f\3\2\2\u01f4\u01f5")
        buf.write("\7}\2\2\u01f5\u01f7\5\30\r\2\u01f6\u01f8\7\u0086\2\2\u01f7")
        buf.write("\u01f6\3\2\2\2\u01f7\u01f8\3\2\2\2\u01f8\u01fa\3\2\2\2")
        buf.write("\u01f9\u01f3\3\2\2\2\u01fa\u01fd\3\2\2\2\u01fb\u01f9\3")
        buf.write("\2\2\2\u01fb\u01fc\3\2\2\2\u01fc\27\3\2\2\2\u01fd\u01fb")
        buf.write("\3\2\2\2\u01fe\u0201\5\32\16\2\u01ff\u0201\5\34\17\2\u0200")
        buf.write("\u01fe\3\2\2\2\u0200\u01ff\3\2\2\2\u0201\31\3\2\2\2\u0202")
        buf.write("\u0207\7\u0087\2\2\u0203\u0204\7b\2\2\u0204\u0207\7\u0087")
        buf.write("\2\2\u0205\u0207\7F\2\2\u0206\u0202\3\2\2\2\u0206\u0203")
        buf.write("\3\2\2\2\u0206\u0205\3\2\2\2\u0207\33\3\2\2\2\u0208\u0209")
        buf.write("\7\u0087\2\2\u0209\u020e\5\u011a\u008e\2\u020a\u020b\7")
        buf.write("b\2\2\u020b\u020c\7\u0087\2\2\u020c\u020e\5\u011a\u008e")
        buf.write("\2\u020d\u0208\3\2\2\2\u020d\u020a\3\2\2\2\u020e\35\3")
        buf.write("\2\2\2\u020f\u0210\7V\2\2\u0210\u0211\5\u0110\u0089\2")
        buf.write("\u0211\u0213\7W\2\2\u0212\u0214\7\60\2\2\u0213\u0212\3")
        buf.write("\2\2\2\u0213\u0214\3\2\2\2\u0214\u0216\3\2\2\2\u0215\u0217")
        buf.write("\5\u0180\u00c1\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2")
        buf.write("\2\u0217\u0219\3\2\2\2\u0218\u021a\5\u00d6l\2\u0219\u0218")
        buf.write("\3\2\2\2\u0219\u021a\3\2\2\2\u021a\u021c\3\2\2\2\u021b")
        buf.write("\u021d\5\u00f8}\2\u021c\u021b\3\2\2\2\u021c\u021d\3\2")
        buf.write("\2\2\u021d\37\3\2\2\2\u021e\u021f\b\21\1\2\u021f\u025f")
        buf.write("\5\4\3\2\u0220\u0221\5\u009eP\2\u0221\u0223\7V\2\2\u0222")
        buf.write("\u0224\5&\24\2\u0223\u0222\3\2\2\2\u0223\u0224\3\2\2\2")
        buf.write("\u0224\u0225\3\2\2\2\u0225\u0226\7W\2\2\u0226\u025f\3")
        buf.write("\2\2\2\u0227\u0228\5\u016e\u00b8\2\u0228\u022a\7V\2\2")
        buf.write("\u0229\u022b\5&\24\2\u022a\u0229\3\2\2\2\u022a\u022b\3")
        buf.write("\2\2\2\u022b\u022c\3\2\2\2\u022c\u022d\7W\2\2\u022d\u025f")
        buf.write("\3\2\2\2\u022e\u022f\5\u009eP\2\u022f\u0230\5\u0122\u0092")
        buf.write("\2\u0230\u025f\3\2\2\2\u0231\u0232\5\u016e\u00b8\2\u0232")
        buf.write("\u0233\5\u0122\u0092\2\u0233\u025f\3\2\2\2\u0234\u0235")
        buf.write("\7 \2\2\u0235\u0236\7g\2\2\u0236\u0237\5\u0104\u0083\2")
        buf.write("\u0237\u0238\7h\2\2\u0238\u0239\7V\2\2\u0239\u023a\5^")
        buf.write("\60\2\u023a\u023b\7W\2\2\u023b\u025f\3\2\2\2\u023c\u023d")
        buf.write("\7B\2\2\u023d\u023e\7g\2\2\u023e\u023f\5\u0104\u0083\2")
        buf.write("\u023f\u0240\7h\2\2\u0240\u0241\7V\2\2\u0241\u0242\5^")
        buf.write("\60\2\u0242\u0243\7W\2\2\u0243\u025f\3\2\2\2\u0244\u0245")
        buf.write("\7;\2\2\u0245\u0246\7g\2\2\u0246\u0247\5\u0104\u0083\2")
        buf.write("\u0247\u0248\7h\2\2\u0248\u0249\7V\2\2\u0249\u024a\5^")
        buf.write("\60\2\u024a\u024b\7W\2\2\u024b\u025f\3\2\2\2\u024c\u024d")
        buf.write("\7\31\2\2\u024d\u024e\7g\2\2\u024e\u024f\5\u0104\u0083")
        buf.write("\2\u024f\u0250\7h\2\2\u0250\u0251\7V\2\2\u0251\u0252\5")
        buf.write("^\60\2\u0252\u0253\7W\2\2\u0253\u025f\3\2\2\2\u0254\u0255")
        buf.write("\5$\23\2\u0255\u0256\7V\2\2\u0256\u0257\5^\60\2\u0257")
        buf.write("\u0258\7W\2\2\u0258\u025f\3\2\2\2\u0259\u025a\5$\23\2")
        buf.write("\u025a\u025b\7V\2\2\u025b\u025c\5\u0104\u0083\2\u025c")
        buf.write("\u025d\7W\2\2\u025d\u025f\3\2\2\2\u025e\u021e\3\2\2\2")
        buf.write("\u025e\u0220\3\2\2\2\u025e\u0227\3\2\2\2\u025e\u022e\3")
        buf.write("\2\2\2\u025e\u0231\3\2\2\2\u025e\u0234\3\2\2\2\u025e\u023c")
        buf.write("\3\2\2\2\u025e\u0244\3\2\2\2\u025e\u024c\3\2\2\2\u025e")
        buf.write("\u0254\3\2\2\2\u025e\u0259\3\2\2\2\u025f\u0288\3\2\2\2")
        buf.write("\u0260\u0261\f\25\2\2\u0261\u0262\7X\2\2\u0262\u0263\5")
        buf.write("^\60\2\u0263\u0264\7Y\2\2\u0264\u0287\3\2\2\2\u0265\u0266")
        buf.write("\f\24\2\2\u0266\u0267\7X\2\2\u0267\u0268\5\u0122\u0092")
        buf.write("\2\u0268\u0269\7Y\2\2\u0269\u0287\3\2\2\2\u026a\u026b")
        buf.write("\f\23\2\2\u026b\u026d\7V\2\2\u026c\u026e\5&\24\2\u026d")
        buf.write("\u026c\3\2\2\2\u026d\u026e\3\2\2\2\u026e\u026f\3\2\2\2")
        buf.write("\u026f\u0287\7W\2\2\u0270\u0271\f\16\2\2\u0271\u0273\7")
        buf.write("\u0084\2\2\u0272\u0274\7E\2\2\u0273\u0272\3\2\2\2\u0273")
        buf.write("\u0274\3\2\2\2\u0274\u0275\3\2\2\2\u0275\u0287\5\6\4\2")
        buf.write("\u0276\u0277\f\r\2\2\u0277\u0279\7\177\2\2\u0278\u027a")
        buf.write("\7E\2\2\u0279\u0278\3\2\2\2\u0279\u027a\3\2\2\2\u027a")
        buf.write("\u027b\3\2\2\2\u027b\u0287\5\6\4\2\u027c\u027d\f\f\2\2")
        buf.write("\u027d\u027e\7\u0084\2\2\u027e\u0287\5(\25\2\u027f\u0280")
        buf.write("\f\13\2\2\u0280\u0281\7\177\2\2\u0281\u0287\5(\25\2\u0282")
        buf.write("\u0283\f\n\2\2\u0283\u0287\7{\2\2\u0284\u0285\f\t\2\2")
        buf.write("\u0285\u0287\7|\2\2\u0286\u0260\3\2\2\2\u0286\u0265\3")
        buf.write("\2\2\2\u0286\u026a\3\2\2\2\u0286\u0270\3\2\2\2\u0286\u0276")
        buf.write("\3\2\2\2\u0286\u027c\3\2\2\2\u0286\u027f\3\2\2\2\u0286")
        buf.write("\u0282\3\2\2\2\u0286\u0284\3\2\2\2\u0287\u028a\3\2\2\2")
        buf.write("\u0288\u0286\3\2\2\2\u0288\u0289\3\2\2\2\u0289!\3\2\2")
        buf.write("\2\u028a\u0288\3\2\2\2\u028b\u028c\7L\2\2\u028c#\3\2\2")
        buf.write("\2\u028d\u028e\7L\2\2\u028e%\3\2\2\2\u028f\u0290\5\u0120")
        buf.write("\u0091\2\u0290\'\3\2\2\2\u0291\u0293\5\f\7\2\u0292\u0291")
        buf.write("\3\2\2\2\u0292\u0293\3\2\2\2\u0293\u0294\3\2\2\2\u0294")
        buf.write("\u0295\5\u00a0Q\2\u0295\u0296\7\u0082\2\2\u0296\u0297")
        buf.write("\7d\2\2\u0297\u0298\5\u00a0Q\2\u0298\u02a8\3\2\2\2\u0299")
        buf.write("\u029a\5\f\7\2\u029a\u029b\7E\2\2\u029b\u029c\5\u0164")
        buf.write("\u00b3\2\u029c\u029d\7\u0082\2\2\u029d\u029e\7d\2\2\u029e")
        buf.write("\u029f\5\u00a0Q\2\u029f\u02a8\3\2\2\2\u02a0\u02a2\5\f")
        buf.write("\7\2\u02a1\u02a0\3\2\2\2\u02a1\u02a2\3\2\2\2\u02a2\u02a3")
        buf.write("\3\2\2\2\u02a3\u02a4\7d\2\2\u02a4\u02a8\5\u00a0Q\2\u02a5")
        buf.write("\u02a6\7d\2\2\u02a6\u02a8\5\u00a2R\2\u02a7\u0292\3\2\2")
        buf.write("\2\u02a7\u0299\3\2\2\2\u02a7\u02a1\3\2\2\2\u02a7\u02a5")
        buf.write("\3\2\2\2\u02a8)\3\2\2\2\u02a9\u02c6\5 \21\2\u02aa\u02ab")
        buf.write("\7{\2\2\u02ab\u02c6\5> \2\u02ac\u02ad\7|\2\2\u02ad\u02c6")
        buf.write("\5> \2\u02ae\u02af\5,\27\2\u02af\u02b0\5> \2\u02b0\u02c6")
        buf.write("\3\2\2\2\u02b1\u02b2\7?\2\2\u02b2\u02c6\5*\26\2\u02b3")
        buf.write("\u02b4\7?\2\2\u02b4\u02b5\7V\2\2\u02b5\u02b6\5\u0104\u0083")
        buf.write("\2\u02b6\u02b7\7W\2\2\u02b7\u02c6\3\2\2\2\u02b8\u02b9")
        buf.write("\7?\2\2\u02b9\u02ba\7\u0086\2\2\u02ba\u02bb\7V\2\2\u02bb")
        buf.write("\u02bc\7\u0087\2\2\u02bc\u02c6\7W\2\2\u02bd\u02be\7\f")
        buf.write("\2\2\u02be\u02bf\7V\2\2\u02bf\u02c0\5\u0104\u0083\2\u02c0")
        buf.write("\u02c1\7W\2\2\u02c1\u02c6\3\2\2\2\u02c2\u02c6\5<\37\2")
        buf.write("\u02c3\u02c6\5.\30\2\u02c4\u02c6\5:\36\2\u02c5\u02a9\3")
        buf.write("\2\2\2\u02c5\u02aa\3\2\2\2\u02c5\u02ac\3\2\2\2\u02c5\u02ae")
        buf.write("\3\2\2\2\u02c5\u02b1\3\2\2\2\u02c5\u02b3\3\2\2\2\u02c5")
        buf.write("\u02b8\3\2\2\2\u02c5\u02bd\3\2\2\2\u02c5\u02c2\3\2\2\2")
        buf.write("\u02c5\u02c3\3\2\2\2\u02c5\u02c4\3\2\2\2\u02c6+\3\2\2")
        buf.write("\2\u02c7\u02c8\t\3\2\2\u02c8-\3\2\2\2\u02c9\u02cb\7\u0082")
        buf.write("\2\2\u02ca\u02c9\3\2\2\2\u02ca\u02cb\3\2\2\2\u02cb\u02cc")
        buf.write("\3\2\2\2\u02cc\u02ce\7\62\2\2\u02cd\u02cf\5\60\31\2\u02ce")
        buf.write("\u02cd\3\2\2\2\u02ce\u02cf\3\2\2\2\u02cf\u02d0\3\2\2\2")
        buf.write("\u02d0\u02d2\5\62\32\2\u02d1\u02d3\58\35\2\u02d2\u02d1")
        buf.write("\3\2\2\2\u02d2\u02d3\3\2\2\2\u02d3\u02e2\3\2\2\2\u02d4")
        buf.write("\u02d6\7\u0082\2\2\u02d5\u02d4\3\2\2\2\u02d5\u02d6\3\2")
        buf.write("\2\2\u02d6\u02d7\3\2\2\2\u02d7\u02d9\7\62\2\2\u02d8\u02da")
        buf.write("\5\60\31\2\u02d9\u02d8\3\2\2\2\u02d9\u02da\3\2\2\2\u02da")
        buf.write("\u02db\3\2\2\2\u02db\u02dc\7V\2\2\u02dc\u02dd\5\u0104")
        buf.write("\u0083\2\u02dd\u02df\7W\2\2\u02de\u02e0\58\35\2\u02df")
        buf.write("\u02de\3\2\2\2\u02df\u02e0\3\2\2\2\u02e0\u02e2\3\2\2\2")
        buf.write("\u02e1\u02ca\3\2\2\2\u02e1\u02d5\3\2\2\2\u02e2/\3\2\2")
        buf.write("\2\u02e3\u02e4\7V\2\2\u02e4\u02e5\5&\24\2\u02e5\u02e6")
        buf.write("\7W\2\2\u02e6\61\3\2\2\2\u02e7\u02e9\5\u009aN\2\u02e8")
        buf.write("\u02ea\5\64\33\2\u02e9\u02e8\3\2\2\2\u02e9\u02ea\3\2\2")
        buf.write("\2\u02ea\63\3\2\2\2\u02eb\u02ed\5\u00fa~\2\u02ec\u02ee")
        buf.write("\5\64\33\2\u02ed\u02ec\3\2\2\2\u02ed\u02ee\3\2\2\2\u02ee")
        buf.write("\u02f1\3\2\2\2\u02ef\u02f1\5\66\34\2\u02f0\u02eb\3\2\2")
        buf.write("\2\u02f0\u02ef\3\2\2\2\u02f1\65\3\2\2\2\u02f2\u02f3\b")
        buf.write("\34\1\2\u02f3\u02f4\7X\2\2\u02f4\u02f5\5^\60\2\u02f5\u02f7")
        buf.write("\7Y\2\2\u02f6\u02f8\5\u00d6l\2\u02f7\u02f6\3\2\2\2\u02f7")
        buf.write("\u02f8\3\2\2\2\u02f8\u0302\3\2\2\2\u02f9\u02fa\f\3\2\2")
        buf.write("\u02fa\u02fb\7X\2\2\u02fb\u02fc\5`\61\2\u02fc\u02fe\7")
        buf.write("Y\2\2\u02fd\u02ff\5\u00d6l\2\u02fe\u02fd\3\2\2\2\u02fe")
        buf.write("\u02ff\3\2\2\2\u02ff\u0301\3\2\2\2\u0300\u02f9\3\2\2\2")
        buf.write("\u0301\u0304\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303\3")
        buf.write("\2\2\2\u0303\67\3\2\2\2\u0304\u0302\3\2\2\2\u0305\u0307")
        buf.write("\7V\2\2\u0306\u0308\5&\24\2\u0307\u0306\3\2\2\2\u0307")
        buf.write("\u0308\3\2\2\2\u0308\u0309\3\2\2\2\u0309\u030c\7W\2\2")
        buf.write("\u030a\u030c\5\u0122\u0092\2\u030b\u0305\3\2\2\2\u030b")
        buf.write("\u030a\3\2\2\2\u030c9\3\2\2\2\u030d\u030f\7\u0082\2\2")
        buf.write("\u030e\u030d\3\2\2\2\u030e\u030f\3\2\2\2\u030f\u0310\3")
        buf.write("\2\2\2\u0310\u0311\7\35\2\2\u0311\u031a\5> \2\u0312\u0314")
        buf.write("\7\u0082\2\2\u0313\u0312\3\2\2\2\u0313\u0314\3\2\2\2\u0314")
        buf.write("\u0315\3\2\2\2\u0315\u0316\7\35\2\2\u0316\u0317\7X\2\2")
        buf.write("\u0317\u0318\7Y\2\2\u0318\u031a\5> \2\u0319\u030e\3\2")
        buf.write("\2\2\u0319\u0313\3\2\2\2\u031a;\3\2\2\2\u031b\u031c\7")
        buf.write("\63\2\2\u031c\u031d\7V\2\2\u031d\u031e\5^\60\2\u031e\u031f")
        buf.write("\7W\2\2\u031f=\3\2\2\2\u0320\u0327\5*\26\2\u0321\u0322")
        buf.write("\7V\2\2\u0322\u0323\5\u0104\u0083\2\u0323\u0324\7W\2\2")
        buf.write("\u0324\u0325\5> \2\u0325\u0327\3\2\2\2\u0326\u0320\3\2")
        buf.write("\2\2\u0326\u0321\3\2\2\2\u0327?\3\2\2\2\u0328\u0329\b")
        buf.write("!\1\2\u0329\u032a\5> \2\u032a\u0333\3\2\2\2\u032b\u032c")
        buf.write("\f\4\2\2\u032c\u032d\7\u0085\2\2\u032d\u0332\5> \2\u032e")
        buf.write("\u032f\f\3\2\2\u032f\u0330\7~\2\2\u0330\u0332\5> \2\u0331")
        buf.write("\u032b\3\2\2\2\u0331\u032e\3\2\2\2\u0332\u0335\3\2\2\2")
        buf.write("\u0333\u0331\3\2\2\2\u0333\u0334\3\2\2\2\u0334A\3\2\2")
        buf.write("\2\u0335\u0333\3\2\2\2\u0336\u0337\b\"\1\2\u0337\u0338")
        buf.write("\5@!\2\u0338\u0344\3\2\2\2\u0339\u033a\f\5\2\2\u033a\u033b")
        buf.write("\7^\2\2\u033b\u0343\5@!\2\u033c\u033d\f\4\2\2\u033d\u033e")
        buf.write("\7_\2\2\u033e\u0343\5@!\2\u033f\u0340\f\3\2\2\u0340\u0341")
        buf.write("\7`\2\2\u0341\u0343\5@!\2\u0342\u0339\3\2\2\2\u0342\u033c")
        buf.write("\3\2\2\2\u0342\u033f\3\2\2\2\u0343\u0346\3\2\2\2\u0344")
        buf.write("\u0342\3\2\2\2\u0344\u0345\3\2\2\2\u0345C\3\2\2\2\u0346")
        buf.write("\u0344\3\2\2\2\u0347\u0348\b#\1\2\u0348\u0349\5B\"\2\u0349")
        buf.write("\u0352\3\2\2\2\u034a\u034b\f\4\2\2\u034b\u034c\7\\\2\2")
        buf.write("\u034c\u0351\5B\"\2\u034d\u034e\f\3\2\2\u034e\u034f\7")
        buf.write("]\2\2\u034f\u0351\5B\"\2\u0350\u034a\3\2\2\2\u0350\u034d")
        buf.write("\3\2\2\2\u0351\u0354\3\2\2\2\u0352\u0350\3\2\2\2\u0352")
        buf.write("\u0353\3\2\2\2\u0353E\3\2\2\2\u0354\u0352\3\2\2\2\u0355")
        buf.write("\u0356\b$\1\2\u0356\u0357\5D#\2\u0357\u035e\3\2\2\2\u0358")
        buf.write("\u0359\f\3\2\2\u0359\u035a\5H%\2\u035a\u035b\5D#\2\u035b")
        buf.write("\u035d\3\2\2\2\u035c\u0358\3\2\2\2\u035d\u0360\3\2\2\2")
        buf.write("\u035e\u035c\3\2\2\2\u035e\u035f\3\2\2\2\u035fG\3\2\2")
        buf.write("\2\u0360\u035e\3\2\2\2\u0361\u0362\t\4\2\2\u0362I\3\2")
        buf.write("\2\2\u0363\u0364\b&\1\2\u0364\u0365\5F$\2\u0365\u0374")
        buf.write("\3\2\2\2\u0366\u0367\f\6\2\2\u0367\u0368\7g\2\2\u0368")
        buf.write("\u0373\5F$\2\u0369\u036a\f\5\2\2\u036a\u036b\7h\2\2\u036b")
        buf.write("\u0373\5F$\2\u036c\u036d\f\4\2\2\u036d\u036e\7w\2\2\u036e")
        buf.write("\u0373\5F$\2\u036f\u0370\f\3\2\2\u0370\u0371\7x\2\2\u0371")
        buf.write("\u0373\5F$\2\u0372\u0366\3\2\2\2\u0372\u0369\3\2\2\2\u0372")
        buf.write("\u036c\3\2\2\2\u0372\u036f\3\2\2\2\u0373\u0376\3\2\2\2")
        buf.write("\u0374\u0372\3\2\2\2\u0374\u0375\3\2\2\2\u0375K\3\2\2")
        buf.write("\2\u0376\u0374\3\2\2\2\u0377\u0378\b\'\1\2\u0378\u0379")
        buf.write("\5J&\2\u0379\u0382\3\2\2\2\u037a\u037b\f\4\2\2\u037b\u037c")
        buf.write("\7u\2\2\u037c\u0381\5J&\2\u037d\u037e\f\3\2\2\u037e\u037f")
        buf.write("\7v\2\2\u037f\u0381\5J&\2\u0380\u037a\3\2\2\2\u0380\u037d")
        buf.write("\3\2\2\2\u0381\u0384\3\2\2\2\u0382\u0380\3\2\2\2\u0382")
        buf.write("\u0383\3\2\2\2\u0383M\3\2\2\2\u0384\u0382\3\2\2\2\u0385")
        buf.write("\u0386\b(\1\2\u0386\u0387\5L\'\2\u0387\u038d\3\2\2\2\u0388")
        buf.write("\u0389\f\3\2\2\u0389\u038a\7b\2\2\u038a\u038c\5L\'\2\u038b")
        buf.write("\u0388\3\2\2\2\u038c\u038f\3\2\2\2\u038d\u038b\3\2\2\2")
        buf.write("\u038d\u038e\3\2\2\2\u038eO\3\2\2\2\u038f\u038d\3\2\2")
        buf.write("\2\u0390\u0391\b)\1\2\u0391\u0392\5N(\2\u0392\u0398\3")
        buf.write("\2\2\2\u0393\u0394\f\3\2\2\u0394\u0395\7a\2\2\u0395\u0397")
        buf.write("\5N(\2\u0396\u0393\3\2\2\2\u0397\u039a\3\2\2\2\u0398\u0396")
        buf.write("\3\2\2\2\u0398\u0399\3\2\2\2\u0399Q\3\2\2\2\u039a\u0398")
        buf.write("\3\2\2\2\u039b\u039c\b*\1\2\u039c\u039d\5P)\2\u039d\u03a3")
        buf.write("\3\2\2\2\u039e\u039f\f\3\2\2\u039f\u03a0\7c\2\2\u03a0")
        buf.write("\u03a2\5P)\2\u03a1\u039e\3\2\2\2\u03a2\u03a5\3\2\2\2\u03a3")
        buf.write("\u03a1\3\2\2\2\u03a3\u03a4\3\2\2\2\u03a4S\3\2\2\2\u03a5")
        buf.write("\u03a3\3\2\2\2\u03a6\u03a7\b+\1\2\u03a7\u03a8\5R*\2\u03a8")
        buf.write("\u03b1\3\2\2\2\u03a9\u03aa\f\4\2\2\u03aa\u03ab\7\5\2\2")
        buf.write("\u03ab\u03b0\5R*\2\u03ac\u03ad\f\3\2\2\u03ad\u03ae\7\6")
        buf.write("\2\2\u03ae\u03b0\5R*\2\u03af\u03a9\3\2\2\2\u03af\u03ac")
        buf.write("\3\2\2\2\u03b0\u03b3\3\2\2\2\u03b1\u03af\3\2\2\2\u03b1")
        buf.write("\u03b2\3\2\2\2\u03b2U\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b4")
        buf.write("\u03b5\b,\1\2\u03b5\u03b6\5T+\2\u03b6\u03bf\3\2\2\2\u03b7")
        buf.write("\u03b8\f\4\2\2\u03b8\u03b9\7\7\2\2\u03b9\u03be\5T+\2\u03ba")
        buf.write("\u03bb\f\3\2\2\u03bb\u03bc\7\b\2\2\u03bc\u03be\5T+\2\u03bd")
        buf.write("\u03b7\3\2\2\2\u03bd\u03ba\3\2\2\2\u03be\u03c1\3\2\2\2")
        buf.write("\u03bf\u03bd\3\2\2\2\u03bf\u03c0\3\2\2\2\u03c0W\3\2\2")
        buf.write("\2\u03c1\u03bf\3\2\2\2\u03c2\u03ca\5V,\2\u03c3\u03c4\5")
        buf.write("V,\2\u03c4\u03c5\7\u0080\2\2\u03c5\u03c6\5^\60\2\u03c6")
        buf.write("\u03c7\7\u0081\2\2\u03c7\u03c8\5Z.\2\u03c8\u03ca\3\2\2")
        buf.write("\2\u03c9\u03c2\3\2\2\2\u03c9\u03c3\3\2\2\2\u03caY\3\2")
        buf.write("\2\2\u03cb\u03d2\5X-\2\u03cc\u03cd\5V,\2\u03cd\u03ce\5")
        buf.write("\\/\2\u03ce\u03cf\5\u011e\u0090\2\u03cf\u03d2\3\2\2\2")
        buf.write("\u03d0\u03d2\5\u017e\u00c0\2\u03d1\u03cb\3\2\2\2\u03d1")
        buf.write("\u03cc\3\2\2\2\u03d1\u03d0\3\2\2\2\u03d2[\3\2\2\2\u03d3")
        buf.write("\u03d4\t\5\2\2\u03d4]\3\2\2\2\u03d5\u03d6\b\60\1\2\u03d6")
        buf.write("\u03d7\5Z.\2\u03d7\u03dd\3\2\2\2\u03d8\u03d9\f\3\2\2\u03d9")
        buf.write("\u03da\7}\2\2\u03da\u03dc\5Z.\2\u03db\u03d8\3\2\2\2\u03dc")
        buf.write("\u03df\3\2\2\2\u03dd\u03db\3\2\2\2\u03dd\u03de\3\2\2\2")
        buf.write("\u03de_\3\2\2\2\u03df\u03dd\3\2\2\2\u03e0\u03e1\5X-\2")
        buf.write("\u03e1a\3\2\2\2\u03e2\u03fd\5d\63\2\u03e3\u03e5\5\u00d6")
        buf.write("l\2\u03e4\u03e3\3\2\2\2\u03e4\u03e5\3\2\2\2\u03e5\u03e6")
        buf.write("\3\2\2\2\u03e6\u03fd\5f\64\2\u03e7\u03e9\5\u00d6l\2\u03e8")
        buf.write("\u03e7\3\2\2\2\u03e8\u03e9\3\2\2\2\u03e9\u03ea\3\2\2\2")
        buf.write("\u03ea\u03fd\5h\65\2\u03eb\u03ed\5\u00d6l\2\u03ec\u03eb")
        buf.write("\3\2\2\2\u03ec\u03ed\3\2\2\2\u03ed\u03ee\3\2\2\2\u03ee")
        buf.write("\u03fd\5l\67\2\u03ef\u03f1\5\u00d6l\2\u03f0\u03ef\3\2")
        buf.write("\2\2\u03f0\u03f1\3\2\2\2\u03f1\u03f2\3\2\2\2\u03f2\u03fd")
        buf.write("\5p9\2\u03f3\u03f5\5\u00d6l\2\u03f4\u03f3\3\2\2\2\u03f4")
        buf.write("\u03f5\3\2\2\2\u03f5\u03f6\3\2\2\2\u03f6\u03fd\5x=\2\u03f7")
        buf.write("\u03fd\5z>\2\u03f8\u03fa\5\u00d6l\2\u03f9\u03f8\3\2\2")
        buf.write("\2\u03f9\u03fa\3\2\2\2\u03fa\u03fb\3\2\2\2\u03fb\u03fd")
        buf.write("\5\u0174\u00bb\2\u03fc\u03e2\3\2\2\2\u03fc\u03e4\3\2\2")
        buf.write("\2\u03fc\u03e8\3\2\2\2\u03fc\u03ec\3\2\2\2\u03fc\u03f0")
        buf.write("\3\2\2\2\u03fc\u03f4\3\2\2\2\u03fc\u03f7\3\2\2\2\u03fc")
        buf.write("\u03f9\3\2\2\2\u03fdc\3\2\2\2\u03fe\u0400\5\u00d6l\2\u03ff")
        buf.write("\u03fe\3\2\2\2\u03ff\u0400\3\2\2\2\u0400\u0401\3\2\2\2")
        buf.write("\u0401\u0402\7\u0087\2\2\u0402\u0403\7\u0081\2\2\u0403")
        buf.write("\u0413\5b\62\2\u0404\u0406\5\u00d6l\2\u0405\u0404\3\2")
        buf.write("\2\2\u0405\u0406\3\2\2\2\u0406\u0407\3\2\2\2\u0407\u0408")
        buf.write("\7\21\2\2\u0408\u0409\5`\61\2\u0409\u040a\7\u0081\2\2")
        buf.write("\u040a\u040b\5b\62\2\u040b\u0413\3\2\2\2\u040c\u040e\5")
        buf.write("\u00d6l\2\u040d\u040c\3\2\2\2\u040d\u040e\3\2\2\2\u040e")
        buf.write("\u040f\3\2\2\2\u040f\u0410\7\34\2\2\u0410\u0411\7\u0081")
        buf.write("\2\2\u0411\u0413\5b\62\2\u0412\u03ff\3\2\2\2\u0412\u0405")
        buf.write("\3\2\2\2\u0412\u040d\3\2\2\2\u0413e\3\2\2\2\u0414\u0416")
        buf.write("\5^\60\2\u0415\u0414\3\2\2\2\u0415\u0416\3\2\2\2\u0416")
        buf.write("\u0417\3\2\2\2\u0417\u0418\7\u0083\2\2\u0418g\3\2\2\2")
        buf.write("\u0419\u041b\7Z\2\2\u041a\u041c\5j\66\2\u041b\u041a\3")
        buf.write("\2\2\2\u041b\u041c\3\2\2\2\u041c\u041d\3\2\2\2\u041d\u041e")
        buf.write("\7[\2\2\u041ei\3\2\2\2\u041f\u0420\b\66\1\2\u0420\u0421")
        buf.write("\5b\62\2\u0421\u0426\3\2\2\2\u0422\u0423\f\3\2\2\u0423")
        buf.write("\u0425\5b\62\2\u0424\u0422\3\2\2\2\u0425\u0428\3\2\2\2")
        buf.write("\u0426\u0424\3\2\2\2\u0426\u0427\3\2\2\2\u0427k\3\2\2")
        buf.write("\2\u0428\u0426\3\2\2\2\u0429\u042a\7,\2\2\u042a\u042b")
        buf.write("\7V\2\2\u042b\u042c\5n8\2\u042c\u042d\7W\2\2\u042d\u042e")
        buf.write("\5b\62\2\u042e\u043e\3\2\2\2\u042f\u0430\7,\2\2\u0430")
        buf.write("\u0431\7V\2\2\u0431\u0432\5n8\2\u0432\u0433\7W\2\2\u0433")
        buf.write("\u0434\5b\62\2\u0434\u0435\7!\2\2\u0435\u0436\5b\62\2")
        buf.write("\u0436\u043e\3\2\2\2\u0437\u0438\7D\2\2\u0438\u0439\7")
        buf.write("V\2\2\u0439\u043a\5n8\2\u043a\u043b\7W\2\2\u043b\u043c")
        buf.write("\5b\62\2\u043c\u043e\3\2\2\2\u043d\u0429\3\2\2\2\u043d")
        buf.write("\u042f\3\2\2\2\u043d\u0437\3\2\2\2\u043em\3\2\2\2\u043f")
        buf.write("\u0450\5^\60\2\u0440\u0442\5\u00d6l\2\u0441\u0440\3\2")
        buf.write("\2\2\u0441\u0442\3\2\2\2\u0442\u0443\3\2\2\2\u0443\u0444")
        buf.write("\5\u008eH\2\u0444\u0445\5\u00f0y\2\u0445\u0446\7f\2\2")
        buf.write("\u0446\u0447\5\u011e\u0090\2\u0447\u0450\3\2\2\2\u0448")
        buf.write("\u044a\5\u00d6l\2\u0449\u0448\3\2\2\2\u0449\u044a\3\2")
        buf.write("\2\2\u044a\u044b\3\2\2\2\u044b\u044c\5\u008eH\2\u044c")
        buf.write("\u044d\5\u00f0y\2\u044d\u044e\5\u0122\u0092\2\u044e\u0450")
        buf.write("\3\2\2\2\u044f\u043f\3\2\2\2\u044f\u0441\3\2\2\2\u044f")
        buf.write("\u0449\3\2\2\2\u0450o\3\2\2\2\u0451\u0452\7U\2\2\u0452")
        buf.write("\u0453\7V\2\2\u0453\u0454\5n8\2\u0454\u0455\7W\2\2\u0455")
        buf.write("\u0456\5b\62\2\u0456\u0475\3\2\2\2\u0457\u0458\7\36\2")
        buf.write("\2\u0458\u0459\5b\62\2\u0459\u045a\7U\2\2\u045a\u045b")
        buf.write("\7V\2\2\u045b\u045c\5^\60\2\u045c\u045d\7W\2\2\u045d\u045e")
        buf.write("\7\u0083\2\2\u045e\u0475\3\2\2\2\u045f\u0460\7)\2\2\u0460")
        buf.write("\u0461\7V\2\2\u0461\u0463\5r:\2\u0462\u0464\5n8\2\u0463")
        buf.write("\u0462\3\2\2\2\u0463\u0464\3\2\2\2\u0464\u0465\3\2\2\2")
        buf.write("\u0465\u0467\7\u0083\2\2\u0466\u0468\5^\60\2\u0467\u0466")
        buf.write("\3\2\2\2\u0467\u0468\3\2\2\2\u0468\u0469\3\2\2\2\u0469")
        buf.write("\u046a\7W\2\2\u046a\u046b\5b\62\2\u046b\u0475\3\2\2\2")
        buf.write("\u046c\u046d\7)\2\2\u046d\u046e\7V\2\2\u046e\u046f\5t")
        buf.write(";\2\u046f\u0470\7\u0081\2\2\u0470\u0471\5v<\2\u0471\u0472")
        buf.write("\7W\2\2\u0472\u0473\5b\62\2\u0473\u0475\3\2\2\2\u0474")
        buf.write("\u0451\3\2\2\2\u0474\u0457\3\2\2\2\u0474\u045f\3\2\2\2")
        buf.write("\u0474\u046c\3\2\2\2\u0475q\3\2\2\2\u0476\u0479\5f\64")
        buf.write("\2\u0477\u0479\5\u0084C\2\u0478\u0476\3\2\2\2\u0478\u0477")
        buf.write("\3\2\2\2\u0479s\3\2\2\2\u047a\u047c\5\u00d6l\2\u047b\u047a")
        buf.write("\3\2\2\2\u047b\u047c\3\2\2\2\u047c\u047d\3\2\2\2\u047d")
        buf.write("\u047e\5\u008eH\2\u047e\u047f\5\u00f0y\2\u047fu\3\2\2")
        buf.write("\2\u0480\u0483\5^\60\2\u0481\u0483\5\u0122\u0092\2\u0482")
        buf.write("\u0480\3\2\2\2\u0482\u0481\3\2\2\2\u0483w\3\2\2\2\u0484")
        buf.write("\u0485\7\20\2\2\u0485\u0495\7\u0083\2\2\u0486\u0487\7")
        buf.write("\32\2\2\u0487\u0495\7\u0083\2\2\u0488\u048a\7<\2\2\u0489")
        buf.write("\u048b\5^\60\2\u048a\u0489\3\2\2\2\u048a\u048b\3\2\2\2")
        buf.write("\u048b\u048c\3\2\2\2\u048c\u0495\7\u0083\2\2\u048d\u048e")
        buf.write("\7<\2\2\u048e\u048f\5\u0122\u0092\2\u048f\u0490\7\u0083")
        buf.write("\2\2\u0490\u0495\3\2\2\2\u0491\u0492\7+\2\2\u0492\u0493")
        buf.write("\7\u0087\2\2\u0493\u0495\7\u0083\2\2\u0494\u0484\3\2\2")
        buf.write("\2\u0494\u0486\3\2\2\2\u0494\u0488\3\2\2\2\u0494\u048d")
        buf.write("\3\2\2\2\u0494\u0491\3\2\2\2\u0495y\3\2\2\2\u0496\u0497")
        buf.write("\5\u0080A\2\u0497{\3\2\2\2\u0498\u0499\b?\1\2\u0499\u049a")
        buf.write("\5~@\2\u049a\u049f\3\2\2\2\u049b\u049c\f\3\2\2\u049c\u049e")
        buf.write("\5~@\2\u049d\u049b\3\2\2\2\u049e\u04a1\3\2\2\2\u049f\u049d")
        buf.write("\3\2\2\2\u049f\u04a0\3\2\2\2\u04a0}\3\2\2\2\u04a1\u049f")
        buf.write("\3\2\2\2\u04a2\u04ac\5\u0080A\2\u04a3\u04ac\5\u0116\u008c")
        buf.write("\2\u04a4\u04ac\5\u015c\u00af\2\u04a5\u04ac\5\u0170\u00b9")
        buf.write("\2\u04a6\u04ac\5\u0172\u00ba\2\u04a7\u04ac\5\u00d4k\2")
        buf.write("\u04a8\u04ac\5\u00bc_\2\u04a9\u04ac\5\u0088E\2\u04aa\u04ac")
        buf.write("\5\u008aF\2\u04ab\u04a2\3\2\2\2\u04ab\u04a3\3\2\2\2\u04ab")
        buf.write("\u04a4\3\2\2\2\u04ab\u04a5\3\2\2\2\u04ab\u04a6\3\2\2\2")
        buf.write("\u04ab\u04a7\3\2\2\2\u04ab\u04a8\3\2\2\2\u04ab\u04a9\3")
        buf.write("\2\2\2\u04ab\u04aa\3\2\2\2\u04ac\177\3\2\2\2\u04ad\u04b6")
        buf.write("\5\u0084C\2\u04ae\u04b6\5\u00d2j\2\u04af\u04b6\5\u00ca")
        buf.write("f\2\u04b0\u04b6\5\u00ceh\2\u04b1\u04b6\5\u00d0i\2\u04b2")
        buf.write("\u04b6\5\u0086D\2\u04b3\u04b6\5\u0082B\2\u04b4\u04b6\5")
        buf.write("\u00acW\2\u04b5\u04ad\3\2\2\2\u04b5\u04ae\3\2\2\2\u04b5")
        buf.write("\u04af\3\2\2\2\u04b5\u04b0\3\2\2\2\u04b5\u04b1\3\2\2\2")
        buf.write("\u04b5\u04b2\3\2\2\2\u04b5\u04b3\3\2\2\2\u04b5\u04b4\3")
        buf.write("\2\2\2\u04b6\u0081\3\2\2\2\u04b7\u04b8\7P\2\2\u04b8\u04ba")
        buf.write("\7\u0087\2\2\u04b9\u04bb\5\u00d6l\2\u04ba\u04b9\3\2\2")
        buf.write("\2\u04ba\u04bb\3\2\2\2\u04bb\u04bc\3\2\2\2\u04bc\u04bd")
        buf.write("\7f\2\2\u04bd\u04be\5\u0104\u0083\2\u04be\u04bf\7\u0083")
        buf.write("\2\2\u04bf\u0083\3\2\2\2\u04c0\u04c2\5\u008eH\2\u04c1")
        buf.write("\u04c0\3\2\2\2\u04c1\u04c2\3\2\2\2\u04c2\u04c4\3\2\2\2")
        buf.write("\u04c3\u04c5\5\u00ecw\2\u04c4\u04c3\3\2\2\2\u04c4\u04c5")
        buf.write("\3\2\2\2\u04c5\u04c6\3\2\2\2\u04c6\u04cf\7\u0083\2\2\u04c7")
        buf.write("\u04c9\5\u00d6l\2\u04c8\u04ca\5\u008eH\2\u04c9\u04c8\3")
        buf.write("\2\2\2\u04c9\u04ca\3\2\2\2\u04ca\u04cb\3\2\2\2\u04cb\u04cc")
        buf.write("\5\u00ecw\2\u04cc\u04cd\7\u0083\2\2\u04cd\u04cf\3\2\2")
        buf.write("\2\u04ce\u04c1\3\2\2\2\u04ce\u04c7\3\2\2\2\u04cf\u0085")
        buf.write("\3\2\2\2\u04d0\u04d1\7A\2\2\u04d1\u04d2\7V\2\2\u04d2\u04d3")
        buf.write("\5`\61\2\u04d3\u04d4\7}\2\2\u04d4\u04d5\7\u0090\2\2\u04d5")
        buf.write("\u04d6\7W\2\2\u04d6\u04d7\7\u0083\2\2\u04d7\u0087\3\2")
        buf.write("\2\2\u04d8\u04d9\7\u0083\2\2\u04d9\u0089\3\2\2\2\u04da")
        buf.write("\u04db\5\u00d6l\2\u04db\u04dc\7\u0083\2\2\u04dc\u008b")
        buf.write("\3\2\2\2\u04dd\u04e4\5\u0090I\2\u04de\u04e4\5\u0096L\2")
        buf.write("\u04df\u04e4\5\u0092J\2\u04e0\u04e4\7*\2\2\u04e1\u04e4")
        buf.write("\7K\2\2\u04e2\u04e4\7\30\2\2\u04e3\u04dd\3\2\2\2\u04e3")
        buf.write("\u04de\3\2\2\2\u04e3\u04df\3\2\2\2\u04e3\u04e0\3\2\2\2")
        buf.write("\u04e3\u04e1\3\2\2\2\u04e3\u04e2\3\2\2\2\u04e4\u008d\3")
        buf.write("\2\2\2\u04e5\u04e7\5\u008cG\2\u04e6\u04e8\5\u00d6l\2\u04e7")
        buf.write("\u04e6\3\2\2\2\u04e7\u04e8\3\2\2\2\u04e8\u04ed\3\2\2\2")
        buf.write("\u04e9\u04ea\5\u008cG\2\u04ea\u04eb\5\u008eH\2\u04eb\u04ed")
        buf.write("\3\2\2\2\u04ec\u04e5\3\2\2\2\u04ec\u04e9\3\2\2\2\u04ed")
        buf.write("\u008f\3\2\2\2\u04ee\u04ef\t\6\2\2\u04ef\u0091\3\2\2\2")
        buf.write("\u04f0\u04f1\t\7\2\2\u04f1\u0093\3\2\2\2\u04f2\u04f3\7")
        buf.write("\u0087\2\2\u04f3\u0095\3\2\2\2\u04f4\u04f8\5\u0098M\2")
        buf.write("\u04f5\u04f8\5\u0126\u0094\2\u04f6\u04f8\5\u00a8U\2\u04f7")
        buf.write("\u04f4\3\2\2\2\u04f7\u04f5\3\2\2\2\u04f7\u04f6\3\2\2\2")
        buf.write("\u04f8\u0097\3\2\2\2\u04f9\u04fe\5\u009eP\2\u04fa\u04fe")
        buf.write("\5\u00a4S\2\u04fb\u04fe\5\u016e\u00b8\2\u04fc\u04fe\5")
        buf.write("\u00fe\u0080\2\u04fd\u04f9\3\2\2\2\u04fd\u04fa\3\2\2\2")
        buf.write("\u04fd\u04fb\3\2\2\2\u04fd\u04fc\3\2\2\2\u04fe\u0099\3")
        buf.write("\2\2\2\u04ff\u0501\5\u0096L\2\u0500\u0502\5\u00d6l\2\u0501")
        buf.write("\u0500\3\2\2\2\u0501\u0502\3\2\2\2\u0502\u0507\3\2\2\2")
        buf.write("\u0503\u0504\5\u0096L\2\u0504\u0505\5\u009aN\2\u0505\u0507")
        buf.write("\3\2\2\2\u0506\u04ff\3\2\2\2\u0506\u0503\3\2\2\2\u0507")
        buf.write("\u009b\3\2\2\2\u0508\u050a\5\u0098M\2\u0509\u050b\5\u00d6")
        buf.write("l\2\u050a\u0509\3\2\2\2\u050a\u050b\3\2\2\2\u050b\u0510")
        buf.write("\3\2\2\2\u050c\u050d\5\u0098M\2\u050d\u050e\5\u009cO\2")
        buf.write("\u050e\u0510\3\2\2\2\u050f\u0508\3\2\2\2\u050f\u050c\3")
        buf.write("\2\2\2\u0510\u009d\3\2\2\2\u0511\u0513\5\f\7\2\u0512\u0511")
        buf.write("\3\2\2\2\u0512\u0513\3\2\2\2\u0513\u0514\3\2\2\2\u0514")
        buf.write("\u0529\5\u00a0Q\2\u0515\u0516\5\f\7\2\u0516\u0517\7E\2")
        buf.write("\2\u0517\u0518\5\u0164\u00b3\2\u0518\u0529\3\2\2\2\u0519")
        buf.write("\u0529\7\23\2\2\u051a\u0529\7\24\2\2\u051b\u0529\7\25")
        buf.write("\2\2\u051c\u0529\7T\2\2\u051d\u0529\7\17\2\2\u051e\u0529")
        buf.write("\7=\2\2\u051f\u0529\7.\2\2\u0520\u0529\7/\2\2\u0521\u0529")
        buf.write("\7>\2\2\u0522\u0529\7O\2\2\u0523\u0529\7(\2\2\u0524\u0529")
        buf.write("\7\37\2\2\u0525\u0529\7R\2\2\u0526\u0529\7\16\2\2\u0527")
        buf.write("\u0529\5\u00a2R\2\u0528\u0512\3\2\2\2\u0528\u0515\3\2")
        buf.write("\2\2\u0528\u0519\3\2\2\2\u0528\u051a\3\2\2\2\u0528\u051b")
        buf.write("\3\2\2\2\u0528\u051c\3\2\2\2\u0528\u051d\3\2\2\2\u0528")
        buf.write("\u051e\3\2\2\2\u0528\u051f\3\2\2\2\u0528\u0520\3\2\2\2")
        buf.write("\u0528\u0521\3\2\2\2\u0528\u0522\3\2\2\2\u0528\u0523\3")
        buf.write("\2\2\2\u0528\u0524\3\2\2\2\u0528\u0525\3\2\2\2\u0528\u0526")
        buf.write("\3\2\2\2\u0528\u0527\3\2\2\2\u0529\u009f\3\2\2\2\u052a")
        buf.write("\u052f\5\u0124\u0093\2\u052b\u052f\5\u00a6T\2\u052c\u052f")
        buf.write("\5\u0094K\2\u052d\u052f\5\u0164\u00b3\2\u052e\u052a\3")
        buf.write("\2\2\2\u052e\u052b\3\2\2\2\u052e\u052c\3\2\2\2\u052e\u052d")
        buf.write("\3\2\2\2\u052f\u00a1\3\2\2\2\u0530\u0531\7\33\2\2\u0531")
        buf.write("\u0532\7V\2\2\u0532\u0533\5^\60\2\u0533\u0534\7W\2\2\u0534")
        buf.write("\u053a\3\2\2\2\u0535\u0536\7\33\2\2\u0536\u0537\7V\2\2")
        buf.write("\u0537\u0538\7\16\2\2\u0538\u053a\7W\2\2\u0539\u0530\3")
        buf.write("\2\2\2\u0539\u0535\3\2\2\2\u053a\u00a3\3\2\2\2\u053b\u053d")
        buf.write("\5\u012e\u0098\2\u053c\u053e\5\u00d6l\2\u053d\u053c\3")
        buf.write("\2\2\2\u053d\u053e\3\2\2\2\u053e\u0540\3\2\2\2\u053f\u0541")
        buf.write("\5\f\7\2\u0540\u053f\3\2\2\2\u0540\u0541\3\2\2\2\u0541")
        buf.write("\u0542\3\2\2\2\u0542\u0543\7\u0087\2\2\u0543\u0554\3\2")
        buf.write("\2\2\u0544\u0545\5\u012e\u0098\2\u0545\u0546\5\u0164\u00b3")
        buf.write("\2\u0546\u0554\3\2\2\2\u0547\u0548\5\u012e\u0098\2\u0548")
        buf.write("\u054a\5\f\7\2\u0549\u054b\7E\2\2\u054a\u0549\3\2\2\2")
        buf.write("\u054a\u054b\3\2\2\2\u054b\u054c\3\2\2\2\u054c\u054d\5")
        buf.write("\u0164\u00b3\2\u054d\u0554\3\2\2\2\u054e\u0550\7\"\2\2")
        buf.write("\u054f\u0551\5\f\7\2\u0550\u054f\3\2\2\2\u0550\u0551\3")
        buf.write("\2\2\2\u0551\u0552\3\2\2\2\u0552\u0554\7\u0087\2\2\u0553")
        buf.write("\u053b\3\2\2\2\u0553\u0544\3\2\2\2\u0553\u0547\3\2\2\2")
        buf.write("\u0553\u054e\3\2\2\2\u0554\u00a5\3\2\2\2\u0555\u0556\7")
        buf.write("\u0087\2\2\u0556\u00a7\3\2\2\2\u0557\u0558\5\u00aaV\2")
        buf.write("\u0558\u055a\7Z\2\2\u0559\u055b\5\u00b2Z\2\u055a\u0559")
        buf.write("\3\2\2\2\u055a\u055b\3\2\2\2\u055b\u055c\3\2\2\2\u055c")
        buf.write("\u055d\7[\2\2\u055d\u0565\3\2\2\2\u055e\u055f\5\u00aa")
        buf.write("V\2\u055f\u0560\7Z\2\2\u0560\u0561\5\u00b2Z\2\u0561\u0562")
        buf.write("\7}\2\2\u0562\u0563\7[\2\2\u0563\u0565\3\2\2\2\u0564\u0557")
        buf.write("\3\2\2\2\u0564\u055e\3\2\2\2\u0565\u00a9\3\2\2\2\u0566")
        buf.write("\u0568\5\u00aeX\2\u0567\u0569\5\u00d6l\2\u0568\u0567\3")
        buf.write("\2\2\2\u0568\u0569\3\2\2\2\u0569\u056b\3\2\2\2\u056a\u056c")
        buf.write("\7\u0087\2\2\u056b\u056a\3\2\2\2\u056b\u056c\3\2\2\2\u056c")
        buf.write("\u056e\3\2\2\2\u056d\u056f\5\u00b0Y\2\u056e\u056d\3\2")
        buf.write("\2\2\u056e\u056f\3\2\2\2\u056f\u057a\3\2\2\2\u0570\u0572")
        buf.write("\5\u00aeX\2\u0571\u0573\5\u00d6l\2\u0572\u0571\3\2\2\2")
        buf.write("\u0572\u0573\3\2\2\2\u0573\u0574\3\2\2\2\u0574\u0575\5")
        buf.write("\f\7\2\u0575\u0577\7\u0087\2\2\u0576\u0578\5\u00b0Y\2")
        buf.write("\u0577\u0576\3\2\2\2\u0577\u0578\3\2\2\2\u0578\u057a\3")
        buf.write("\2\2\2\u0579\u0566\3\2\2\2\u0579\u0570\3\2\2\2\u057a\u00ab")
        buf.write("\3\2\2\2\u057b\u057d\5\u00aeX\2\u057c\u057e\5\u00d6l\2")
        buf.write("\u057d\u057c\3\2\2\2\u057d\u057e\3\2\2\2\u057e\u057f\3")
        buf.write("\2\2\2\u057f\u0581\7\u0087\2\2\u0580\u0582\5\u00b0Y\2")
        buf.write("\u0581\u0580\3\2\2\2\u0581\u0582\3\2\2\2\u0582\u0583\3")
        buf.write("\2\2\2\u0583\u0584\7\u0083\2\2\u0584\u00ad\3\2\2\2\u0585")
        buf.write("\u058b\7\"\2\2\u0586\u0587\7\"\2\2\u0587\u058b\7\26\2")
        buf.write("\2\u0588\u0589\7\"\2\2\u0589\u058b\7C\2\2\u058a\u0585")
        buf.write("\3\2\2\2\u058a\u0586\3\2\2\2\u058a\u0588\3\2\2\2\u058b")
        buf.write("\u00af\3\2\2\2\u058c\u058d\7\u0081\2\2\u058d\u058e\5\u009a")
        buf.write("N\2\u058e\u00b1\3\2\2\2\u058f\u0590\bZ\1\2\u0590\u0591")
        buf.write("\5\u00b4[\2\u0591\u0597\3\2\2\2\u0592\u0593\f\3\2\2\u0593")
        buf.write("\u0594\7}\2\2\u0594\u0596\5\u00b4[\2\u0595\u0592\3\2\2")
        buf.write("\2\u0596\u0599\3\2\2\2\u0597\u0595\3\2\2\2\u0597\u0598")
        buf.write("\3\2\2\2\u0598\u00b3\3\2\2\2\u0599\u0597\3\2\2\2\u059a")
        buf.write("\u05a0\5\u00b6\\\2\u059b\u059c\5\u00b6\\\2\u059c\u059d")
        buf.write("\7f\2\2\u059d\u059e\5`\61\2\u059e\u05a0\3\2\2\2\u059f")
        buf.write("\u059a\3\2\2\2\u059f\u059b\3\2\2\2\u05a0\u00b5\3\2\2\2")
        buf.write("\u05a1\u05a2\7\u0087\2\2\u05a2\u00b7\3\2\2\2\u05a3\u05a6")
        buf.write("\5\u00ba^\2\u05a4\u05a6\5\u00c8e\2\u05a5\u05a3\3\2\2\2")
        buf.write("\u05a5\u05a4\3\2\2\2\u05a6\u00b9\3\2\2\2\u05a7\u05a8\7")
        buf.write("\u0087\2\2\u05a8\u00bb\3\2\2\2\u05a9\u05ac\5\u00be`\2")
        buf.write("\u05aa\u05ac\5\u00c4c\2\u05ab\u05a9\3\2\2\2\u05ab\u05aa")
        buf.write("\3\2\2\2\u05ac\u00bd\3\2\2\2\u05ad\u05b0\5\u00c0a\2\u05ae")
        buf.write("\u05b0\5\u00c2b\2\u05af\u05ad\3\2\2\2\u05af\u05ae\3\2")
        buf.write("\2\2\u05b0\u00bf\3\2\2\2\u05b1\u05b3\7-\2\2\u05b2\u05b1")
        buf.write("\3\2\2\2\u05b2\u05b3\3\2\2\2\u05b3\u05b4\3\2\2\2\u05b4")
        buf.write("\u05b5\7\61\2\2\u05b5\u05b6\7\u0087\2\2\u05b6\u05b7\7")
        buf.write("Z\2\2\u05b7\u05b8\5\u00c6d\2\u05b8\u05b9\7[\2\2\u05b9")
        buf.write("\u00c1\3\2\2\2\u05ba\u05bc\7-\2\2\u05bb\u05ba\3\2\2\2")
        buf.write("\u05bb\u05bc\3\2\2\2\u05bc\u05bd\3\2\2\2\u05bd\u05be\7")
        buf.write("\61\2\2\u05be\u05bf\5\u00ba^\2\u05bf\u05c0\7Z\2\2\u05c0")
        buf.write("\u05c1\5\u00c6d\2\u05c1\u05c2\7[\2\2\u05c2\u00c3\3\2\2")
        buf.write("\2\u05c3\u05c5\7-\2\2\u05c4\u05c3\3\2\2\2\u05c4\u05c5")
        buf.write("\3\2\2\2\u05c5\u05c6\3\2\2\2\u05c6\u05c7\7\61\2\2\u05c7")
        buf.write("\u05c8\7Z\2\2\u05c8\u05c9\5\u00c6d\2\u05c9\u05ca\7[\2")
        buf.write("\2\u05ca\u00c5\3\2\2\2\u05cb\u05cd\5|?\2\u05cc\u05cb\3")
        buf.write("\2\2\2\u05cc\u05cd\3\2\2\2\u05cd\u00c7\3\2\2\2\u05ce\u05cf")
        buf.write("\7\u0087\2\2\u05cf\u00c9\3\2\2\2\u05d0\u05d1\7\61\2\2")
        buf.write("\u05d1\u05d2\7\u0087\2\2\u05d2\u05d3\7f\2\2\u05d3\u05d4")
        buf.write("\5\u00ccg\2\u05d4\u05d5\7\u0083\2\2\u05d5\u00cb\3\2\2")
        buf.write("\2\u05d6\u05d8\5\f\7\2\u05d7\u05d6\3\2\2\2\u05d7\u05d8")
        buf.write("\3\2\2\2\u05d8\u05d9\3\2\2\2\u05d9\u05da\5\u00b8]\2\u05da")
        buf.write("\u00cd\3\2\2\2\u05db\u05dd\7P\2\2\u05dc\u05de\7M\2\2\u05dd")
        buf.write("\u05dc\3\2\2\2\u05dd\u05de\3\2\2\2\u05de\u05df\3\2\2\2")
        buf.write("\u05df\u05e0\5\f\7\2\u05e0\u05e1\5\b\5\2\u05e1\u05e2\7")
        buf.write("\u0083\2\2\u05e2\u05e9\3\2\2\2\u05e3\u05e4\7P\2\2\u05e4")
        buf.write("\u05e5\7\u0082\2\2\u05e5\u05e6\5\b\5\2\u05e6\u05e7\7\u0083")
        buf.write("\2\2\u05e7\u05e9\3\2\2\2\u05e8\u05db\3\2\2\2\u05e8\u05e3")
        buf.write("\3\2\2\2\u05e9\u00cf\3\2\2\2\u05ea\u05ec\5\u00d6l\2\u05eb")
        buf.write("\u05ea\3\2\2\2\u05eb\u05ec\3\2\2\2\u05ec\u05ed\3\2\2\2")
        buf.write("\u05ed\u05ee\7P\2\2\u05ee\u05f0\7\61\2\2\u05ef\u05f1\5")
        buf.write("\f\7\2\u05f0\u05ef\3\2\2\2\u05f0\u05f1\3\2\2\2\u05f1\u05f2")
        buf.write("\3\2\2\2\u05f2\u05f3\5\u00b8]\2\u05f3\u05f4\7\u0083\2")
        buf.write("\2\u05f4\u00d1\3\2\2\2\u05f5\u05f6\7\r\2\2\u05f6\u05f7")
        buf.write("\7V\2\2\u05f7\u05f8\7\u0090\2\2\u05f8\u05f9\7W\2\2\u05f9")
        buf.write("\u05fa\7\u0083\2\2\u05fa\u00d3\3\2\2\2\u05fb\u05fc\7%")
        buf.write("\2\2\u05fc\u05fd\7\u0090\2\2\u05fd\u05ff\7Z\2\2\u05fe")
        buf.write("\u0600\5|?\2\u05ff\u05fe\3\2\2\2\u05ff\u0600\3\2\2\2\u0600")
        buf.write("\u0601\3\2\2\2\u0601\u0606\7[\2\2\u0602\u0603\7%\2\2\u0603")
        buf.write("\u0604\7\u0090\2\2\u0604\u0606\5~@\2\u0605\u05fb\3\2\2")
        buf.write("\2\u0605\u0602\3\2\2\2\u0606\u00d5\3\2\2\2\u0607\u0608")
        buf.write("\bl\1\2\u0608\u0609\5\u00d8m\2\u0609\u060e\3\2\2\2\u060a")
        buf.write("\u060b\f\3\2\2\u060b\u060d\5\u00d8m\2\u060c\u060a\3\2")
        buf.write("\2\2\u060d\u0610\3\2\2\2\u060e\u060c\3\2\2\2\u060e\u060f")
        buf.write("\3\2\2\2\u060f\u00d7\3\2\2\2\u0610\u060e\3\2\2\2\u0611")
        buf.write("\u0612\7X\2\2\u0612\u0613\7X\2\2\u0613\u0614\5\u00dco")
        buf.write("\2\u0614\u0615\7Y\2\2\u0615\u0616\7Y\2\2\u0616\u0619\3")
        buf.write("\2\2\2\u0617\u0619\5\u00dan\2\u0618\u0611\3\2\2\2\u0618")
        buf.write("\u0617\3\2\2\2\u0619\u00d9\3\2\2\2\u061a\u061b\7\13\2")
        buf.write("\2\u061b\u061c\7V\2\2\u061c\u061e\5\u0104\u0083\2\u061d")
        buf.write("\u061f\7\u0086\2\2\u061e\u061d\3\2\2\2\u061e\u061f\3\2")
        buf.write("\2\2\u061f\u0620\3\2\2\2\u0620\u0621\7W\2\2\u0621\u062b")
        buf.write("\3\2\2\2\u0622\u0623\7\13\2\2\u0623\u0624\7V\2\2\u0624")
        buf.write("\u0626\5`\61\2\u0625\u0627\7\u0086\2\2\u0626\u0625\3\2")
        buf.write("\2\2\u0626\u0627\3\2\2\2\u0627\u0628\3\2\2\2\u0628\u0629")
        buf.write("\7W\2\2\u0629\u062b\3\2\2\2\u062a\u061a\3\2\2\2\u062a")
        buf.write("\u0622\3\2\2\2\u062b\u00db\3\2\2\2\u062c\u062e\bo\1\2")
        buf.write("\u062d\u062f\5\u00dep\2\u062e\u062d\3\2\2\2\u062e\u062f")
        buf.write("\3\2\2\2\u062f\u0634\3\2\2\2\u0630\u0631\5\u00dep\2\u0631")
        buf.write("\u0632\7\u0086\2\2\u0632\u0634\3\2\2\2\u0633\u062c\3\2")
        buf.write("\2\2\u0633\u0630\3\2\2\2\u0634\u0641\3\2\2\2\u0635\u0636")
        buf.write("\f\5\2\2\u0636\u0638\7}\2\2\u0637\u0639\5\u00dep\2\u0638")
        buf.write("\u0637\3\2\2\2\u0638\u0639\3\2\2\2\u0639\u0640\3\2\2\2")
        buf.write("\u063a\u063b\f\3\2\2\u063b\u063c\7}\2\2\u063c\u063d\5")
        buf.write("\u00dep\2\u063d\u063e\7\u0086\2\2\u063e\u0640\3\2\2\2")
        buf.write("\u063f\u0635\3\2\2\2\u063f\u063a\3\2\2\2\u0640\u0643\3")
        buf.write("\2\2\2\u0641\u063f\3\2\2\2\u0641\u0642\3\2\2\2\u0642\u00dd")
        buf.write("\3\2\2\2\u0643\u0641\3\2\2\2\u0644\u0646\5\u00e0q\2\u0645")
        buf.write("\u0647\5\u00e6t\2\u0646\u0645\3\2\2\2\u0646\u0647\3\2")
        buf.write("\2\2\u0647\u00df\3\2\2\2\u0648\u064b\7\u0087\2\2\u0649")
        buf.write("\u064b\5\u00e2r\2\u064a\u0648\3\2\2\2\u064a\u0649\3\2")
        buf.write("\2\2\u064b\u00e1\3\2\2\2\u064c\u064d\5\u00e4s\2\u064d")
        buf.write("\u064e\7\u0082\2\2\u064e\u064f\7\u0087\2\2\u064f\u00e3")
        buf.write("\3\2\2\2\u0650\u0651\7\u0087\2\2\u0651\u00e5\3\2\2\2\u0652")
        buf.write("\u0653\7V\2\2\u0653\u0654\5\u00e8u\2\u0654\u0655\7W\2")
        buf.write("\2\u0655\u00e7\3\2\2\2\u0656\u0658\bu\1\2\u0657\u0659")
        buf.write("\5\u00eav\2\u0658\u0657\3\2\2\2\u0658\u0659\3\2\2\2\u0659")
        buf.write("\u065e\3\2\2\2\u065a\u065b\f\3\2\2\u065b\u065d\5\u00ea")
        buf.write("v\2\u065c\u065a\3\2\2\2\u065d\u0660\3\2\2\2\u065e\u065c")
        buf.write("\3\2\2\2\u065e\u065f\3\2\2\2\u065f\u00e9\3\2\2\2\u0660")
        buf.write("\u065e\3\2\2\2\u0661\u0662\7V\2\2\u0662\u0663\5\u00e8")
        buf.write("u\2\u0663\u0664\7W\2\2\u0664\u0673\3\2\2\2\u0665\u0666")
        buf.write("\7X\2\2\u0666\u0667\5\u00e8u\2\u0667\u0668\7Y\2\2\u0668")
        buf.write("\u0673\3\2\2\2\u0669\u066a\7Z\2\2\u066a\u066b\5\u00e8")
        buf.write("u\2\u066b\u066c\7[\2\2\u066c\u0673\3\2\2\2\u066d\u066f")
        buf.write("\n\b\2\2\u066e\u066d\3\2\2\2\u066f\u0670\3\2\2\2\u0670")
        buf.write("\u066e\3\2\2\2\u0670\u0671\3\2\2\2\u0671\u0673\3\2\2\2")
        buf.write("\u0672\u0661\3\2\2\2\u0672\u0665\3\2\2\2\u0672\u0669\3")
        buf.write("\2\2\2\u0672\u066e\3\2\2\2\u0673\u00eb\3\2\2\2\u0674\u0675")
        buf.write("\bw\1\2\u0675\u0676\5\u00eex\2\u0676\u067c\3\2\2\2\u0677")
        buf.write("\u0678\f\3\2\2\u0678\u0679\7}\2\2\u0679\u067b\5\u00ee")
        buf.write("x\2\u067a\u0677\3\2\2\2\u067b\u067e\3\2\2\2\u067c\u067a")
        buf.write("\3\2\2\2\u067c\u067d\3\2\2\2\u067d\u00ed\3\2\2\2\u067e")
        buf.write("\u067c\3\2\2\2\u067f\u0681\5\u00f0y\2\u0680\u0682\5\u011a")
        buf.write("\u008e\2\u0681\u0680\3\2\2\2\u0681\u0682\3\2\2\2\u0682")
        buf.write("\u00ef\3\2\2\2\u0683\u0689\5\u00f2z\2\u0684\u0685\5\u00f4")
        buf.write("{\2\u0685\u0686\5\u00f6|\2\u0686\u0687\5\u00f8}\2\u0687")
        buf.write("\u0689\3\2\2\2\u0688\u0683\3\2\2\2\u0688\u0684\3\2\2\2")
        buf.write("\u0689\u00f1\3\2\2\2\u068a\u0692\5\u00f4{\2\u068b\u068d")
        buf.write("\5\u00fa~\2\u068c\u068e\7\27\2\2\u068d\u068c\3\2\2\2\u068d")
        buf.write("\u068e\3\2\2\2\u068e\u068f\3\2\2\2\u068f\u0690\5\u00f2")
        buf.write("z\2\u0690\u0692\3\2\2\2\u0691\u068a\3\2\2\2\u0691\u068b")
        buf.write("\3\2\2\2\u0692\u00f3\3\2\2\2\u0693\u0694\b{\1\2\u0694")
        buf.write("\u0696\5\u0102\u0082\2\u0695\u0697\5\u00d6l\2\u0696\u0695")
        buf.write("\3\2\2\2\u0696\u0697\3\2\2\2\u0697\u069d\3\2\2\2\u0698")
        buf.write("\u0699\7V\2\2\u0699\u069a\5\u00f2z\2\u069a\u069b\7W\2")
        buf.write("\2\u069b\u069d\3\2\2\2\u069c\u0693\3\2\2\2\u069c\u0698")
        buf.write("\3\2\2\2\u069d\u06ab\3\2\2\2\u069e\u069f\f\5\2\2\u069f")
        buf.write("\u06aa\5\u00f6|\2\u06a0\u06a1\f\4\2\2\u06a1\u06a3\7X\2")
        buf.write("\2\u06a2\u06a4\5`\61\2\u06a3\u06a2\3\2\2\2\u06a3\u06a4")
        buf.write("\3\2\2\2\u06a4\u06a5\3\2\2\2\u06a5\u06a7\7Y\2\2\u06a6")
        buf.write("\u06a8\5\u00d6l\2\u06a7\u06a6\3\2\2\2\u06a7\u06a8\3\2")
        buf.write("\2\2\u06a8\u06aa\3\2\2\2\u06a9\u069e\3\2\2\2\u06a9\u06a0")
        buf.write("\3\2\2\2\u06aa\u06ad\3\2\2\2\u06ab\u06a9\3\2\2\2\u06ab")
        buf.write("\u06ac\3\2\2\2\u06ac\u00f5\3\2\2\2\u06ad\u06ab\3\2\2\2")
        buf.write("\u06ae\u06af\7V\2\2\u06af\u06b0\5\u0110\u0089\2\u06b0")
        buf.write("\u06b2\7W\2\2\u06b1\u06b3\5\u00fc\177\2\u06b2\u06b1\3")
        buf.write("\2\2\2\u06b2\u06b3\3\2\2\2\u06b3\u06b5\3\2\2\2\u06b4\u06b6")
        buf.write("\5\u0100\u0081\2\u06b5\u06b4\3\2\2\2\u06b5\u06b6\3\2\2")
        buf.write("\2\u06b6\u06b8\3\2\2\2\u06b7\u06b9\5\u0180\u00c1\2\u06b8")
        buf.write("\u06b7\3\2\2\2\u06b8\u06b9\3\2\2\2\u06b9\u06bb\3\2\2\2")
        buf.write("\u06ba\u06bc\5\u00d6l\2\u06bb\u06ba\3\2\2\2\u06bb\u06bc")
        buf.write("\3\2\2\2\u06bc\u00f7\3\2\2\2\u06bd\u06be\7\177\2\2\u06be")
        buf.write("\u06c0\5\u009cO\2\u06bf\u06c1\5\u0106\u0084\2\u06c0\u06bf")
        buf.write("\3\2\2\2\u06c0\u06c1\3\2\2\2\u06c1\u00f9\3\2\2\2\u06c2")
        buf.write("\u06c4\7^\2\2\u06c3\u06c5\5\u00d6l\2\u06c4\u06c3\3\2\2")
        buf.write("\2\u06c4\u06c5\3\2\2\2\u06c5\u06c7\3\2\2\2\u06c6\u06c8")
        buf.write("\5\u00fc\177\2\u06c7\u06c6\3\2\2\2\u06c7\u06c8\3\2\2\2")
        buf.write("\u06c8\u06da\3\2\2\2\u06c9\u06cb\7b\2\2\u06ca\u06cc\5")
        buf.write("\u00d6l\2\u06cb\u06ca\3\2\2\2\u06cb\u06cc\3\2\2\2\u06cc")
        buf.write("\u06da\3\2\2\2\u06cd\u06cf\7\5\2\2\u06ce\u06d0\5\u00d6")
        buf.write("l\2\u06cf\u06ce\3\2\2\2\u06cf\u06d0\3\2\2\2\u06d0\u06da")
        buf.write("\3\2\2\2\u06d1\u06d2\5\f\7\2\u06d2\u06d4\7^\2\2\u06d3")
        buf.write("\u06d5\5\u00d6l\2\u06d4\u06d3\3\2\2\2\u06d4\u06d5\3\2")
        buf.write("\2\2\u06d5\u06d7\3\2\2\2\u06d6\u06d8\5\u00fc\177\2\u06d7")
        buf.write("\u06d6\3\2\2\2\u06d7\u06d8\3\2\2\2\u06d8\u06da\3\2\2\2")
        buf.write("\u06d9\u06c2\3\2\2\2\u06d9\u06c9\3\2\2\2\u06d9\u06cd\3")
        buf.write("\2\2\2\u06d9\u06d1\3\2\2\2\u06da\u00fb\3\2\2\2\u06db\u06dd")
        buf.write("\5\u00fe\u0080\2\u06dc\u06de\5\u00fc\177\2\u06dd\u06dc")
        buf.write("\3\2\2\2\u06dd\u06de\3\2\2\2\u06de\u00fd\3\2\2\2\u06df")
        buf.write("\u06e0\t\t\2\2\u06e0\u00ff\3\2\2\2\u06e1\u06e2\t\n\2\2")
        buf.write("\u06e2\u0101\3\2\2\2\u06e3\u06e5\7\u0086\2\2\u06e4\u06e3")
        buf.write("\3\2\2\2\u06e4\u06e5\3\2\2\2\u06e5\u06e6\3\2\2\2\u06e6")
        buf.write("\u06e7\5\6\4\2\u06e7\u0103\3\2\2\2\u06e8\u06ea\5\u009a")
        buf.write("N\2\u06e9\u06eb\5\u0106\u0084\2\u06ea\u06e9\3\2\2\2\u06ea")
        buf.write("\u06eb\3\2\2\2\u06eb\u0105\3\2\2\2\u06ec\u06f5\5\u0108")
        buf.write("\u0085\2\u06ed\u06ef\5\u010a\u0086\2\u06ee\u06ed\3\2\2")
        buf.write("\2\u06ee\u06ef\3\2\2\2\u06ef\u06f0\3\2\2\2\u06f0\u06f1")
        buf.write("\5\u00f6|\2\u06f1\u06f2\5\u00f8}\2\u06f2\u06f5\3\2\2\2")
        buf.write("\u06f3\u06f5\5\u010c\u0087\2\u06f4\u06ec\3\2\2\2\u06f4")
        buf.write("\u06ee\3\2\2\2\u06f4\u06f3\3\2\2\2\u06f5\u0107\3\2\2\2")
        buf.write("\u06f6\u06fc\5\u010a\u0086\2\u06f7\u06f9\5\u00fa~\2\u06f8")
        buf.write("\u06fa\5\u0108\u0085\2\u06f9\u06f8\3\2\2\2\u06f9\u06fa")
        buf.write("\3\2\2\2\u06fa\u06fc\3\2\2\2\u06fb\u06f6\3\2\2\2\u06fb")
        buf.write("\u06f7\3\2\2\2\u06fc\u0109\3\2\2\2\u06fd\u06fe\b\u0086")
        buf.write("\1\2\u06fe\u070c\5\u00f6|\2\u06ff\u0701\7X\2\2\u0700\u0702")
        buf.write("\5`\61\2\u0701\u0700\3\2\2\2\u0701\u0702\3\2\2\2\u0702")
        buf.write("\u0703\3\2\2\2\u0703\u0705\7Y\2\2\u0704\u0706\5\u00d6")
        buf.write("l\2\u0705\u0704\3\2\2\2\u0705\u0706\3\2\2\2\u0706\u070c")
        buf.write("\3\2\2\2\u0707\u0708\7V\2\2\u0708\u0709\5\u0108\u0085")
        buf.write("\2\u0709\u070a\7W\2\2\u070a\u070c\3\2\2\2\u070b\u06fd")
        buf.write("\3\2\2\2\u070b\u06ff\3\2\2\2\u070b\u0707\3\2\2\2\u070c")
        buf.write("\u071a\3\2\2\2\u070d\u070e\f\7\2\2\u070e\u0719\5\u00f6")
        buf.write("|\2\u070f\u0710\f\5\2\2\u0710\u0712\7X\2\2\u0711\u0713")
        buf.write("\5`\61\2\u0712\u0711\3\2\2\2\u0712\u0713\3\2\2\2\u0713")
        buf.write("\u0714\3\2\2\2\u0714\u0716\7Y\2\2\u0715\u0717\5\u00d6")
        buf.write("l\2\u0716\u0715\3\2\2\2\u0716\u0717\3\2\2\2\u0717\u0719")
        buf.write("\3\2\2\2\u0718\u070d\3\2\2\2\u0718\u070f\3\2\2\2\u0719")
        buf.write("\u071c\3\2\2\2\u071a\u0718\3\2\2\2\u071a\u071b\3\2\2\2")
        buf.write("\u071b\u010b\3\2\2\2\u071c\u071a\3\2\2\2\u071d\u0722\5")
        buf.write("\u010e\u0088\2\u071e\u071f\5\u00fa~\2\u071f\u0720\5\u010c")
        buf.write("\u0087\2\u0720\u0722\3\2\2\2\u0721\u071d\3\2\2\2\u0721")
        buf.write("\u071e\3\2\2\2\u0722\u010d\3\2\2\2\u0723\u0724\b\u0088")
        buf.write("\1\2\u0724\u0725\7\u0086\2\2\u0725\u0733\3\2\2\2\u0726")
        buf.write("\u0727\f\5\2\2\u0727\u0732\5\u00f6|\2\u0728\u0729\f\4")
        buf.write("\2\2\u0729\u072b\7X\2\2\u072a\u072c\5`\61\2\u072b\u072a")
        buf.write("\3\2\2\2\u072b\u072c\3\2\2\2\u072c\u072d\3\2\2\2\u072d")
        buf.write("\u072f\7Y\2\2\u072e\u0730\5\u00d6l\2\u072f\u072e\3\2\2")
        buf.write("\2\u072f\u0730\3\2\2\2\u0730\u0732\3\2\2\2\u0731\u0726")
        buf.write("\3\2\2\2\u0731\u0728\3\2\2\2\u0732\u0735\3\2\2\2\u0733")
        buf.write("\u0731\3\2\2\2\u0733\u0734\3\2\2\2\u0734\u010f\3\2\2\2")
        buf.write("\u0735\u0733\3\2\2\2\u0736\u0738\5\u0112\u008a\2\u0737")
        buf.write("\u0736\3\2\2\2\u0737\u0738\3\2\2\2\u0738\u073a\3\2\2\2")
        buf.write("\u0739\u073b\7\u0086\2\2\u073a\u0739\3\2\2\2\u073a\u073b")
        buf.write("\3\2\2\2\u073b\u0741\3\2\2\2\u073c\u073d\5\u0112\u008a")
        buf.write("\2\u073d\u073e\7}\2\2\u073e\u073f\7\u0086\2\2\u073f\u0741")
        buf.write("\3\2\2\2\u0740\u0737\3\2\2\2\u0740\u073c\3\2\2\2\u0741")
        buf.write("\u0111\3\2\2\2\u0742\u0743\b\u008a\1\2\u0743\u0744\5\u0114")
        buf.write("\u008b\2\u0744\u074a\3\2\2\2\u0745\u0746\f\3\2\2\u0746")
        buf.write("\u0747\7}\2\2\u0747\u0749\5\u0114\u008b\2\u0748\u0745")
        buf.write("\3\2\2\2\u0749\u074c\3\2\2\2\u074a\u0748\3\2\2\2\u074a")
        buf.write("\u074b\3\2\2\2\u074b\u0113\3\2\2\2\u074c\u074a\3\2\2\2")
        buf.write("\u074d\u074f\5\u00d6l\2\u074e\u074d\3\2\2\2\u074e\u074f")
        buf.write("\3\2\2\2\u074f\u0750\3\2\2\2\u0750\u0751\5\u008eH\2\u0751")
        buf.write("\u0752\5\u00f0y\2\u0752\u076d\3\2\2\2\u0753\u0755\5\u00d6")
        buf.write("l\2\u0754\u0753\3\2\2\2\u0754\u0755\3\2\2\2\u0755\u0756")
        buf.write("\3\2\2\2\u0756\u0757\5\u008eH\2\u0757\u0758\5\u00f0y\2")
        buf.write("\u0758\u0759\7f\2\2\u0759\u075a\5\u011e\u0090\2\u075a")
        buf.write("\u076d\3\2\2\2\u075b\u075d\5\u00d6l\2\u075c\u075b\3\2")
        buf.write("\2\2\u075c\u075d\3\2\2\2\u075d\u075e\3\2\2\2\u075e\u0760")
        buf.write("\5\u008eH\2\u075f\u0761\5\u0106\u0084\2\u0760\u075f\3")
        buf.write("\2\2\2\u0760\u0761\3\2\2\2\u0761\u076d\3\2\2\2\u0762\u0764")
        buf.write("\5\u00d6l\2\u0763\u0762\3\2\2\2\u0763\u0764\3\2\2\2\u0764")
        buf.write("\u0765\3\2\2\2\u0765\u0767\5\u008eH\2\u0766\u0768\5\u0106")
        buf.write("\u0084\2\u0767\u0766\3\2\2\2\u0767\u0768\3\2\2\2\u0768")
        buf.write("\u0769\3\2\2\2\u0769\u076a\7f\2\2\u076a\u076b\5\u011e")
        buf.write("\u0090\2\u076b\u076d\3\2\2\2\u076c\u074e\3\2\2\2\u076c")
        buf.write("\u0754\3\2\2\2\u076c\u075c\3\2\2\2\u076c\u0763\3\2\2\2")
        buf.write("\u076d\u0115\3\2\2\2\u076e\u0770\5\u00d6l\2\u076f\u076e")
        buf.write("\3\2\2\2\u076f\u0770\3\2\2\2\u0770\u0772\3\2\2\2\u0771")
        buf.write("\u0773\5\u008eH\2\u0772\u0771\3\2\2\2\u0772\u0773\3\2")
        buf.write("\2\2\u0773\u0774\3\2\2\2\u0774\u0776\5\u00f0y\2\u0775")
        buf.write("\u0777\5\u0138\u009d\2\u0776\u0775\3\2\2\2\u0776\u0777")
        buf.write("\3\2\2\2\u0777\u0778\3\2\2\2\u0778\u0779\5\u0118\u008d")
        buf.write("\2\u0779\u0117\3\2\2\2\u077a\u077c\5\u0150\u00a9\2\u077b")
        buf.write("\u077a\3\2\2\2\u077b\u077c\3\2\2\2\u077c\u077d\3\2\2\2")
        buf.write("\u077d\u0786\5h\65\2\u077e\u0786\5\u0176\u00bc\2\u077f")
        buf.write("\u0780\7f\2\2\u0780\u0781\7\34\2\2\u0781\u0786\7\u0083")
        buf.write("\2\2\u0782\u0783\7f\2\2\u0783\u0784\7\35\2\2\u0784\u0786")
        buf.write("\7\u0083\2\2\u0785\u077b\3\2\2\2\u0785\u077e\3\2\2\2\u0785")
        buf.write("\u077f\3\2\2\2\u0785\u0782\3\2\2\2\u0786\u0119\3\2\2\2")
        buf.write("\u0787\u078d\5\u011c\u008f\2\u0788\u0789\7V\2\2\u0789")
        buf.write("\u078a\5&\24\2\u078a\u078b\7W\2\2\u078b\u078d\3\2\2\2")
        buf.write("\u078c\u0787\3\2\2\2\u078c\u0788\3\2\2\2\u078d\u011b\3")
        buf.write("\2\2\2\u078e\u078f\7f\2\2\u078f\u0792\5\u011e\u0090\2")
        buf.write("\u0790\u0792\5\u0122\u0092\2\u0791\u078e\3\2\2\2\u0791")
        buf.write("\u0790\3\2\2\2\u0792\u011d\3\2\2\2\u0793\u0796\5Z.\2\u0794")
        buf.write("\u0796\5\u0122\u0092\2\u0795\u0793\3\2\2\2\u0795\u0794")
        buf.write("\3\2\2\2\u0796\u011f\3\2\2\2\u0797\u0798\b\u0091\1\2\u0798")
        buf.write("\u079a\5\u011e\u0090\2\u0799\u079b\7\u0086\2\2\u079a\u0799")
        buf.write("\3\2\2\2\u079a\u079b\3\2\2\2\u079b\u07a4\3\2\2\2\u079c")
        buf.write("\u079d\f\3\2\2\u079d\u079e\7}\2\2\u079e\u07a0\5\u011e")
        buf.write("\u0090\2\u079f\u07a1\7\u0086\2\2\u07a0\u079f\3\2\2\2\u07a0")
        buf.write("\u07a1\3\2\2\2\u07a1\u07a3\3\2\2\2\u07a2\u079c\3\2\2\2")
        buf.write("\u07a3\u07a6\3\2\2\2\u07a4\u07a2\3\2\2\2\u07a4\u07a5\3")
        buf.write("\2\2\2\u07a5\u0121\3\2\2\2\u07a6\u07a4\3\2\2\2\u07a7\u07a8")
        buf.write("\7Z\2\2\u07a8\u07aa\5\u0120\u0091\2\u07a9\u07ab\7}\2\2")
        buf.write("\u07aa\u07a9\3\2\2\2\u07aa\u07ab\3\2\2\2\u07ab\u07ac\3")
        buf.write("\2\2\2\u07ac\u07ad\7[\2\2\u07ad\u07b1\3\2\2\2\u07ae\u07af")
        buf.write("\7Z\2\2\u07af\u07b1\7[\2\2\u07b0\u07a7\3\2\2\2\u07b0\u07ae")
        buf.write("\3\2\2\2\u07b1\u0123\3\2\2\2\u07b2\u07b5\7\u0087\2\2\u07b3")
        buf.write("\u07b5\5\u0164\u00b3\2\u07b4\u07b2\3\2\2\2\u07b4\u07b3")
        buf.write("\3\2\2\2\u07b5\u0125\3\2\2\2\u07b6\u07b7\5\u0128\u0095")
        buf.write("\2\u07b7\u07b9\7Z\2\2\u07b8\u07ba\5\u0130\u0099\2\u07b9")
        buf.write("\u07b8\3\2\2\2\u07b9\u07ba\3\2\2\2\u07ba\u07bb\3\2\2\2")
        buf.write("\u07bb\u07bc\7[\2\2\u07bc\u0127\3\2\2\2\u07bd\u07bf\5")
        buf.write("\u012e\u0098\2\u07be\u07c0\5\u00d6l\2\u07bf\u07be\3\2")
        buf.write("\2\2\u07bf\u07c0\3\2\2\2\u07c0\u07c1\3\2\2\2\u07c1\u07c3")
        buf.write("\5\u012a\u0096\2\u07c2\u07c4\5\u012c\u0097\2\u07c3\u07c2")
        buf.write("\3\2\2\2\u07c3\u07c4\3\2\2\2\u07c4\u07c6\3\2\2\2\u07c5")
        buf.write("\u07c7\5\u013e\u00a0\2\u07c6\u07c5\3\2\2\2\u07c6\u07c7")
        buf.write("\3\2\2\2\u07c7\u07d0\3\2\2\2\u07c8\u07ca\5\u012e\u0098")
        buf.write("\2\u07c9\u07cb\5\u00d6l\2\u07ca\u07c9\3\2\2\2\u07ca\u07cb")
        buf.write("\3\2\2\2\u07cb\u07cd\3\2\2\2\u07cc\u07ce\5\u013e\u00a0")
        buf.write("\2\u07cd\u07cc\3\2\2\2\u07cd\u07ce\3\2\2\2\u07ce\u07d0")
        buf.write("\3\2\2\2\u07cf\u07bd\3\2\2\2\u07cf\u07c8\3\2\2\2\u07d0")
        buf.write("\u0129\3\2\2\2\u07d1\u07d3\5\f\7\2\u07d2\u07d1\3\2\2\2")
        buf.write("\u07d2\u07d3\3\2\2\2\u07d3\u07d4\3\2\2\2\u07d4\u07d5\5")
        buf.write("\u0124\u0093\2\u07d5\u012b\3\2\2\2\u07d6\u07d7\7\'\2\2")
        buf.write("\u07d7\u012d\3\2\2\2\u07d8\u07d9\t\13\2\2\u07d9\u012f")
        buf.write("\3\2\2\2\u07da\u07dc\5\u0132\u009a\2\u07db\u07dd\5\u0130")
        buf.write("\u0099\2\u07dc\u07db\3\2\2\2\u07dc\u07dd\3\2\2\2\u07dd")
        buf.write("\u07e4\3\2\2\2\u07de\u07df\5\u0148\u00a5\2\u07df\u07e1")
        buf.write("\7\u0081\2\2\u07e0\u07e2\5\u0130\u0099\2\u07e1\u07e0\3")
        buf.write("\2\2\2\u07e1\u07e2\3\2\2\2\u07e2\u07e4\3\2\2\2\u07e3\u07da")
        buf.write("\3\2\2\2\u07e3\u07de\3\2\2\2\u07e4\u0131\3\2\2\2\u07e5")
        buf.write("\u07e7\5\u00d6l\2\u07e6\u07e5\3\2\2\2\u07e6\u07e7\3\2")
        buf.write("\2\2\u07e7\u07e9\3\2\2\2\u07e8\u07ea\5\u008eH\2\u07e9")
        buf.write("\u07e8\3\2\2\2\u07e9\u07ea\3\2\2\2\u07ea\u07ec\3\2\2\2")
        buf.write("\u07eb\u07ed\5\u0134\u009b\2\u07ec\u07eb\3\2\2\2\u07ec")
        buf.write("\u07ed\3\2\2\2\u07ed\u07ee\3\2\2\2\u07ee\u07f6\7\u0083")
        buf.write("\2\2\u07ef\u07f6\5\u0116\u008c\2\u07f0\u07f6\5\u00ceh")
        buf.write("\2\u07f1\u07f6\5\u0086D\2\u07f2\u07f6\5\u015c\u00af\2")
        buf.write("\u07f3\u07f6\5\u0082B\2\u07f4\u07f6\5\u0088E\2\u07f5\u07e6")
        buf.write("\3\2\2\2\u07f5\u07ef\3\2\2\2\u07f5\u07f0\3\2\2\2\u07f5")
        buf.write("\u07f1\3\2\2\2\u07f5\u07f2\3\2\2\2\u07f5\u07f3\3\2\2\2")
        buf.write("\u07f5\u07f4\3\2\2\2\u07f6\u0133\3\2\2\2\u07f7\u07f8\b")
        buf.write("\u009b\1\2\u07f8\u07f9\5\u0136\u009c\2\u07f9\u07ff\3\2")
        buf.write("\2\2\u07fa\u07fb\f\3\2\2\u07fb\u07fc\7}\2\2\u07fc\u07fe")
        buf.write("\5\u0136\u009c\2\u07fd\u07fa\3\2\2\2\u07fe\u0801\3\2\2")
        buf.write("\2\u07ff\u07fd\3\2\2\2\u07ff\u0800\3\2\2\2\u0800\u0135")
        buf.write("\3\2\2\2\u0801\u07ff\3\2\2\2\u0802\u0804\5\u00f0y\2\u0803")
        buf.write("\u0805\5\u0138\u009d\2\u0804\u0803\3\2\2\2\u0804\u0805")
        buf.write("\3\2\2\2\u0805\u0807\3\2\2\2\u0806\u0808\5\u013c\u009f")
        buf.write("\2\u0807\u0806\3\2\2\2\u0807\u0808\3\2\2\2\u0808\u0816")
        buf.write("\3\2\2\2\u0809\u080b\5\u00f0y\2\u080a\u080c\5\u011c\u008f")
        buf.write("\2\u080b\u080a\3\2\2\2\u080b\u080c\3\2\2\2\u080c\u0816")
        buf.write("\3\2\2\2\u080d\u080f\7\u0087\2\2\u080e\u080d\3\2\2\2\u080e")
        buf.write("\u080f\3\2\2\2\u080f\u0811\3\2\2\2\u0810\u0812\5\u00d6")
        buf.write("l\2\u0811\u0810\3\2\2\2\u0811\u0812\3\2\2\2\u0812\u0813")
        buf.write("\3\2\2\2\u0813\u0814\7\u0081\2\2\u0814\u0816\5`\61\2\u0815")
        buf.write("\u0802\3\2\2\2\u0815\u0809\3\2\2\2\u0815\u080e\3\2\2\2")
        buf.write("\u0816\u0137\3\2\2\2\u0817\u0818\b\u009d\1\2\u0818\u0819")
        buf.write("\5\u013a\u009e\2\u0819\u081e\3\2\2\2\u081a\u081b\f\3\2")
        buf.write("\2\u081b\u081d\5\u013a\u009e\2\u081c\u081a\3\2\2\2\u081d")
        buf.write("\u0820\3\2\2\2\u081e\u081c\3\2\2\2\u081e\u081f\3\2\2\2")
        buf.write("\u081f\u0139\3\2\2\2\u0820\u081e\3\2\2\2\u0821\u0822\t")
        buf.write("\f\2\2\u0822\u013b\3\2\2\2\u0823\u0824\7f\2\2\u0824\u0825")
        buf.write("\7\u008a\2\2\u0825\u0826\b\u009f\1\2\u0826\u013d\3\2\2")
        buf.write("\2\u0827\u0828\7\u0081\2\2\u0828\u0829\5\u0140\u00a1\2")
        buf.write("\u0829\u013f\3\2\2\2\u082a\u082b\b\u00a1\1\2\u082b\u082d")
        buf.write("\5\u0142\u00a2\2\u082c\u082e\7\u0086\2\2\u082d\u082c\3")
        buf.write("\2\2\2\u082d\u082e\3\2\2\2\u082e\u0837\3\2\2\2\u082f\u0830")
        buf.write("\f\3\2\2\u0830\u0831\7}\2\2\u0831\u0833\5\u0142\u00a2")
        buf.write("\2\u0832\u0834\7\u0086\2\2\u0833\u0832\3\2\2\2\u0833\u0834")
        buf.write("\3\2\2\2\u0834\u0836\3\2\2\2\u0835\u082f\3\2\2\2\u0836")
        buf.write("\u0839\3\2\2\2\u0837\u0835\3\2\2\2\u0837\u0838\3\2\2\2")
        buf.write("\u0838\u0141\3\2\2\2\u0839\u0837\3\2\2\2\u083a\u083c\5")
        buf.write("\u00d6l\2\u083b\u083a\3\2\2\2\u083b\u083c\3\2\2\2\u083c")
        buf.write("\u083d\3\2\2\2\u083d\u0850\5\u0146\u00a4\2\u083e\u0840")
        buf.write("\5\u00d6l\2\u083f\u083e\3\2\2\2\u083f\u0840\3\2\2\2\u0840")
        buf.write("\u0841\3\2\2\2\u0841\u0843\7Q\2\2\u0842\u0844\5\u0148")
        buf.write("\u00a5\2\u0843\u0842\3\2\2\2\u0843\u0844\3\2\2\2\u0844")
        buf.write("\u0845\3\2\2\2\u0845\u0850\5\u0146\u00a4\2\u0846\u0848")
        buf.write("\5\u00d6l\2\u0847\u0846\3\2\2\2\u0847\u0848\3\2\2\2\u0848")
        buf.write("\u0849\3\2\2\2\u0849\u084b\5\u0148\u00a5\2\u084a\u084c")
        buf.write("\7Q\2\2\u084b\u084a\3\2\2\2\u084b\u084c\3\2\2\2\u084c")
        buf.write("\u084d\3\2\2\2\u084d\u084e\5\u0146\u00a4\2\u084e\u0850")
        buf.write("\3\2\2\2\u084f\u083b\3\2\2\2\u084f\u083f\3\2\2\2\u084f")
        buf.write("\u0847\3\2\2\2\u0850\u0143\3\2\2\2\u0851\u0853\5\f\7\2")
        buf.write("\u0852\u0851\3\2\2\2\u0852\u0853\3\2\2\2\u0853\u0854\3")
        buf.write("\2\2\2\u0854\u0857\5\u0124\u0093\2\u0855\u0857\5\u00a2")
        buf.write("R\2\u0856\u0852\3\2\2\2\u0856\u0855\3\2\2\2\u0857\u0145")
        buf.write("\3\2\2\2\u0858\u0859\5\u0144\u00a3\2\u0859\u0147\3\2\2")
        buf.write("\2\u085a\u085b\t\r\2\2\u085b\u0149\3\2\2\2\u085c\u085d")
        buf.write("\7\65\2\2\u085d\u085e\5\u014c\u00a7\2\u085e\u014b\3\2")
        buf.write("\2\2\u085f\u0861\5\u009aN\2\u0860\u0862\5\u014e\u00a8")
        buf.write("\2\u0861\u0860\3\2\2\2\u0861\u0862\3\2\2\2\u0862\u014d")
        buf.write("\3\2\2\2\u0863\u0865\5\u00fa~\2\u0864\u0866\5\u014e\u00a8")
        buf.write("\2\u0865\u0864\3\2\2\2\u0865\u0866\3\2\2\2\u0866\u014f")
        buf.write("\3\2\2\2\u0867\u0868\7\u0081\2\2\u0868\u0869\5\u0152\u00aa")
        buf.write("\2\u0869\u0151\3\2\2\2\u086a\u086c\5\u0154\u00ab\2\u086b")
        buf.write("\u086d\7\u0086\2\2\u086c\u086b\3\2\2\2\u086c\u086d\3\2")
        buf.write("\2\2\u086d\u0876\3\2\2\2\u086e\u0870\5\u0154\u00ab\2\u086f")
        buf.write("\u0871\7\u0086\2\2\u0870\u086f\3\2\2\2\u0870\u0871\3\2")
        buf.write("\2\2\u0871\u0872\3\2\2\2\u0872\u0873\7}\2\2\u0873\u0874")
        buf.write("\5\u0152\u00aa\2\u0874\u0876\3\2\2\2\u0875\u086a\3\2\2")
        buf.write("\2\u0875\u086e\3\2\2\2\u0876\u0153\3\2\2\2\u0877\u0878")
        buf.write("\5\u0156\u00ac\2\u0878\u087a\7V\2\2\u0879\u087b\5&\24")
        buf.write("\2\u087a\u0879\3\2\2\2\u087a\u087b\3\2\2\2\u087b\u087c")
        buf.write("\3\2\2\2\u087c\u087d\7W\2\2\u087d\u0882\3\2\2\2\u087e")
        buf.write("\u087f\5\u0156\u00ac\2\u087f\u0880\5\u0122\u0092\2\u0880")
        buf.write("\u0882\3\2\2\2\u0881\u0877\3\2\2\2\u0881\u087e\3\2\2\2")
        buf.write("\u0882\u0155\3\2\2\2\u0883\u0886\5\u0144\u00a3\2\u0884")
        buf.write("\u0886\7\u0087\2\2\u0885\u0883\3\2\2\2\u0885\u0884\3\2")
        buf.write("\2\2\u0886\u0157\3\2\2\2\u0887\u0888\7\65\2\2\u0888\u0889")
        buf.write("\5\u0188\u00c5\2\u0889\u0159\3\2\2\2\u088a\u088b\7\65")
        buf.write("\2\2\u088b\u088c\7\u0090\2\2\u088c\u0890\7\u0087\2\2\u088d")
        buf.write("\u088e\7\65\2\2\u088e\u0890\7\u0093\2\2\u088f\u088a\3")
        buf.write("\2\2\2\u088f\u088d\3\2\2\2\u0890\u015b\3\2\2\2\u0891\u0892")
        buf.write("\7E\2\2\u0892\u0893\7g\2\2\u0893\u0894\5\u015e\u00b0\2")
        buf.write("\u0894\u0895\7h\2\2\u0895\u0896\5~@\2\u0896\u015d\3\2")
        buf.write("\2\2\u0897\u0898\b\u00b0\1\2\u0898\u0899\5\u0160\u00b1")
        buf.write("\2\u0899\u089f\3\2\2\2\u089a\u089b\f\3\2\2\u089b\u089c")
        buf.write("\7}\2\2\u089c\u089e\5\u0160\u00b1\2\u089d\u089a\3\2\2")
        buf.write("\2\u089e\u08a1\3\2\2\2\u089f\u089d\3\2\2\2\u089f\u08a0")
        buf.write("\3\2\2\2\u08a0\u015f\3\2\2\2\u08a1\u089f\3\2\2\2\u08a2")
        buf.write("\u08a5\5\u0162\u00b2\2\u08a3\u08a5\5\u0114\u008b\2\u08a4")
        buf.write("\u08a2\3\2\2\2\u08a4\u08a3\3\2\2\2\u08a5\u0161\3\2\2\2")
        buf.write("\u08a6\u08a8\7\26\2\2\u08a7\u08a9\7\u0086\2\2\u08a8\u08a7")
        buf.write("\3\2\2\2\u08a8\u08a9\3\2\2\2\u08a9\u08ab\3\2\2\2\u08aa")
        buf.write("\u08ac\7\u0087\2\2\u08ab\u08aa\3\2\2\2\u08ab\u08ac\3\2")
        buf.write("\2\2\u08ac\u08d7\3\2\2\2\u08ad\u08af\7\26\2\2\u08ae\u08b0")
        buf.write("\7\u0087\2\2\u08af\u08ae\3\2\2\2\u08af\u08b0\3\2\2\2\u08b0")
        buf.write("\u08b1\3\2\2\2\u08b1\u08b2\7f\2\2\u08b2\u08d7\5\u0104")
        buf.write("\u0083\2\u08b3\u08b5\7M\2\2\u08b4\u08b6\7\u0086\2\2\u08b5")
        buf.write("\u08b4\3\2\2\2\u08b5\u08b6\3\2\2\2\u08b6\u08b8\3\2\2\2")
        buf.write("\u08b7\u08b9\7\u0087\2\2\u08b8\u08b7\3\2\2\2\u08b8\u08b9")
        buf.write("\3\2\2\2\u08b9\u08d7\3\2\2\2\u08ba\u08bc\7M\2\2\u08bb")
        buf.write("\u08bd\7\u0087\2\2\u08bc\u08bb\3\2\2\2\u08bc\u08bd\3\2")
        buf.write("\2\2\u08bd\u08be\3\2\2\2\u08be\u08bf\7f\2\2\u08bf\u08d7")
        buf.write("\5\u0104\u0083\2\u08c0\u08c1\7E\2\2\u08c1\u08c2\7g\2\2")
        buf.write("\u08c2\u08c3\5\u015e\u00b0\2\u08c3\u08c4\7h\2\2\u08c4")
        buf.write("\u08c6\7\26\2\2\u08c5\u08c7\7\u0086\2\2\u08c6\u08c5\3")
        buf.write("\2\2\2\u08c6\u08c7\3\2\2\2\u08c7\u08c9\3\2\2\2\u08c8\u08ca")
        buf.write("\7\u0087\2\2\u08c9\u08c8\3\2\2\2\u08c9\u08ca\3\2\2\2\u08ca")
        buf.write("\u08d7\3\2\2\2\u08cb\u08cc\7E\2\2\u08cc\u08cd\7g\2\2\u08cd")
        buf.write("\u08ce\5\u015e\u00b0\2\u08ce\u08cf\7h\2\2\u08cf\u08d1")
        buf.write("\7\26\2\2\u08d0\u08d2\7\u0087\2\2\u08d1\u08d0\3\2\2\2")
        buf.write("\u08d1\u08d2\3\2\2\2\u08d2\u08d3\3\2\2\2\u08d3\u08d4\7")
        buf.write("f\2\2\u08d4\u08d5\5\6\4\2\u08d5\u08d7\3\2\2\2\u08d6\u08a6")
        buf.write("\3\2\2\2\u08d6\u08ad\3\2\2\2\u08d6\u08b3\3\2\2\2\u08d6")
        buf.write("\u08ba\3\2\2\2\u08d6\u08c0\3\2\2\2\u08d6\u08cb\3\2\2\2")
        buf.write("\u08d7\u0163\3\2\2\2\u08d8\u08d9\5\u0168\u00b5\2\u08d9")
        buf.write("\u08db\7g\2\2\u08da\u08dc\5\u016a\u00b6\2\u08db\u08da")
        buf.write("\3\2\2\2\u08db\u08dc\3\2\2\2\u08dc\u08dd\3\2\2\2\u08dd")
        buf.write("\u08de\7h\2\2\u08de\u0165\3\2\2\2\u08df\u08ef\5\u0164")
        buf.write("\u00b3\2\u08e0\u08e1\5\u0158\u00ad\2\u08e1\u08e3\7g\2")
        buf.write("\2\u08e2\u08e4\5\u016a\u00b6\2\u08e3\u08e2\3\2\2\2\u08e3")
        buf.write("\u08e4\3\2\2\2\u08e4\u08e5\3\2\2\2\u08e5\u08e6\7h\2\2")
        buf.write("\u08e6\u08ef\3\2\2\2\u08e7\u08e8\5\u015a\u00ae\2\u08e8")
        buf.write("\u08ea\7g\2\2\u08e9\u08eb\5\u016a\u00b6\2\u08ea\u08e9")
        buf.write("\3\2\2\2\u08ea\u08eb\3\2\2\2\u08eb\u08ec\3\2\2\2\u08ec")
        buf.write("\u08ed\7h\2\2\u08ed\u08ef\3\2\2\2\u08ee\u08df\3\2\2\2")
        buf.write("\u08ee\u08e0\3\2\2\2\u08ee\u08e7\3\2\2\2\u08ef\u0167\3")
        buf.write("\2\2\2\u08f0\u08f1\7\u0087\2\2\u08f1\u0169\3\2\2\2\u08f2")
        buf.write("\u08f3\b\u00b6\1\2\u08f3\u08f5\5\u016c\u00b7\2\u08f4\u08f6")
        buf.write("\7\u0086\2\2\u08f5\u08f4\3\2\2\2\u08f5\u08f6\3\2\2\2\u08f6")
        buf.write("\u08ff\3\2\2\2\u08f7\u08f8\f\3\2\2\u08f8\u08f9\7}\2\2")
        buf.write("\u08f9\u08fb\5\u016c\u00b7\2\u08fa\u08fc\7\u0086\2\2\u08fb")
        buf.write("\u08fa\3\2\2\2\u08fb\u08fc\3\2\2\2\u08fc\u08fe\3\2\2\2")
        buf.write("\u08fd\u08f7\3\2\2\2\u08fe\u0901\3\2\2\2\u08ff\u08fd\3")
        buf.write("\2\2\2\u08ff\u0900\3\2\2\2\u0900\u016b\3\2\2\2\u0901\u08ff")
        buf.write("\3\2\2\2\u0902\u0906\5\u0104\u0083\2\u0903\u0906\5`\61")
        buf.write("\2\u0904\u0906\5\6\4\2\u0905\u0902\3\2\2\2\u0905\u0903")
        buf.write("\3\2\2\2\u0905\u0904\3\2\2\2\u0906\u016d\3\2\2\2\u0907")
        buf.write("\u0908\7M\2\2\u0908\u0909\5\f\7\2\u0909\u090a\7\u0087")
        buf.write("\2\2\u090a\u0913\3\2\2\2\u090b\u090c\7M\2\2\u090c\u090e")
        buf.write("\5\f\7\2\u090d\u090f\7E\2\2\u090e\u090d\3\2\2\2\u090e")
        buf.write("\u090f\3\2\2\2\u090f\u0910\3\2\2\2\u0910\u0911\5\u0164")
        buf.write("\u00b3\2\u0911\u0913\3\2\2\2\u0912\u0907\3\2\2\2\u0912")
        buf.write("\u090b\3\2\2\2\u0913\u016f\3\2\2\2\u0914\u0916\7%\2\2")
        buf.write("\u0915\u0914\3\2\2\2\u0915\u0916\3\2\2\2\u0916\u0917\3")
        buf.write("\2\2\2\u0917\u0918\7E\2\2\u0918\u0919\5~@\2\u0919\u0171")
        buf.write("\3\2\2\2\u091a\u091b\7E\2\2\u091b\u091c\7g\2\2\u091c\u091d")
        buf.write("\7h\2\2\u091d\u091e\5~@\2\u091e\u0173\3\2\2\2\u091f\u0920")
        buf.write("\7J\2\2\u0920\u0921\5h\65\2\u0921\u0922\5\u0178\u00bd")
        buf.write("\2\u0922\u0175\3\2\2\2\u0923\u0925\7J\2\2\u0924\u0926")
        buf.write("\5\u0150\u00a9\2\u0925\u0924\3\2\2\2\u0925\u0926\3\2\2")
        buf.write("\2\u0926\u0927\3\2\2\2\u0927\u0928\5h\65\2\u0928\u0929")
        buf.write("\5\u0178\u00bd\2\u0929\u0177\3\2\2\2\u092a\u092c\5\u017a")
        buf.write("\u00be\2\u092b\u092d\5\u0178\u00bd\2\u092c\u092b\3\2\2")
        buf.write("\2\u092c\u092d\3\2\2\2\u092d\u0179\3\2\2\2\u092e\u092f")
        buf.write("\7\22\2\2\u092f\u0930\7V\2\2\u0930\u0931\5\u017c\u00bf")
        buf.write("\2\u0931\u0932\7W\2\2\u0932\u0933\5h\65\2\u0933\u017b")
        buf.write("\3\2\2\2\u0934\u0936\5\u00d6l\2\u0935\u0934\3\2\2\2\u0935")
        buf.write("\u0936\3\2\2\2\u0936\u0937\3\2\2\2\u0937\u0938\5\u009a")
        buf.write("N\2\u0938\u0939\5\u00f0y\2\u0939\u0943\3\2\2\2\u093a\u093c")
        buf.write("\5\u00d6l\2\u093b\u093a\3\2\2\2\u093b\u093c\3\2\2\2\u093c")
        buf.write("\u093d\3\2\2\2\u093d\u093f\5\u009aN\2\u093e\u0940\5\u0106")
        buf.write("\u0084\2\u093f\u093e\3\2\2\2\u093f\u0940\3\2\2\2\u0940")
        buf.write("\u0943\3\2\2\2\u0941\u0943\7\u0086\2\2\u0942\u0935\3\2")
        buf.write("\2\2\u0942\u093b\3\2\2\2\u0942\u0941\3\2\2\2\u0943\u017d")
        buf.write("\3\2\2\2\u0944\u0946\7H\2\2\u0945\u0947\5Z.\2\u0946\u0945")
        buf.write("\3\2\2\2\u0946\u0947\3\2\2\2\u0947\u017f\3\2\2\2\u0948")
        buf.write("\u094b\5\u0182\u00c2\2\u0949\u094b\5\u0186\u00c4\2\u094a")
        buf.write("\u0948\3\2\2\2\u094a\u0949\3\2\2\2\u094b\u0181\3\2\2\2")
        buf.write("\u094c\u094d\7H\2\2\u094d\u094f\7V\2\2\u094e\u0950\5\u0184")
        buf.write("\u00c3\2\u094f\u094e\3\2\2\2\u094f\u0950\3\2\2\2\u0950")
        buf.write("\u0951\3\2\2\2\u0951\u0952\7W\2\2\u0952\u0183\3\2\2\2")
        buf.write("\u0953\u0954\b\u00c3\1\2\u0954\u0956\5\u0104\u0083\2\u0955")
        buf.write("\u0957\7\u0086\2\2\u0956\u0955\3\2\2\2\u0956\u0957\3\2")
        buf.write("\2\2\u0957\u0960\3\2\2\2\u0958\u0959\f\3\2\2\u0959\u095a")
        buf.write("\7}\2\2\u095a\u095c\5\u0104\u0083\2\u095b\u095d\7\u0086")
        buf.write("\2\2\u095c\u095b\3\2\2\2\u095c\u095d\3\2\2\2\u095d\u095f")
        buf.write("\3\2\2\2\u095e\u0958\3\2\2\2\u095f\u0962\3\2\2\2\u0960")
        buf.write("\u095e\3\2\2\2\u0960\u0961\3\2\2\2\u0961\u0185\3\2\2\2")
        buf.write("\u0962\u0960\3\2\2\2\u0963\u0964\7\63\2\2\u0964\u0965")
        buf.write("\7V\2\2\u0965\u0966\5`\61\2\u0966\u0967\7W\2\2\u0967\u096a")
        buf.write("\3\2\2\2\u0968\u096a\7\63\2\2\u0969\u0963\3\2\2\2\u0969")
        buf.write("\u0968\3\2\2\2\u096a\u0187\3\2\2\2\u096b\u099f\7\62\2")
        buf.write("\2\u096c\u099f\7\35\2\2\u096d\u096e\7\62\2\2\u096e\u096f")
        buf.write("\7X\2\2\u096f\u099f\7Y\2\2\u0970\u0971\7\35\2\2\u0971")
        buf.write("\u0972\7X\2\2\u0972\u099f\7Y\2\2\u0973\u099f\7\\\2\2\u0974")
        buf.write("\u099f\7]\2\2\u0975\u099f\7^\2\2\u0976\u099f\7_\2\2\u0977")
        buf.write("\u099f\7`\2\2\u0978\u099f\7a\2\2\u0979\u099f\7b\2\2\u097a")
        buf.write("\u099f\7c\2\2\u097b\u099f\7d\2\2\u097c\u099f\7\3\2\2\u097d")
        buf.write("\u099f\7\4\2\2\u097e\u099f\7f\2\2\u097f\u099f\7g\2\2\u0980")
        buf.write("\u099f\7h\2\2\u0981\u099f\7i\2\2\u0982\u099f\7j\2\2\u0983")
        buf.write("\u099f\7k\2\2\u0984\u099f\7l\2\2\u0985\u099f\7m\2\2\u0986")
        buf.write("\u099f\7n\2\2\u0987\u099f\7o\2\2\u0988\u099f\7p\2\2\u0989")
        buf.write("\u099f\7q\2\2\u098a\u099f\7r\2\2\u098b\u099f\7t\2\2\u098c")
        buf.write("\u099f\7s\2\2\u098d\u099f\7u\2\2\u098e\u099f\7v\2\2\u098f")
        buf.write("\u099f\7w\2\2\u0990\u099f\7x\2\2\u0991\u099f\7\5\2\2\u0992")
        buf.write("\u099f\7\6\2\2\u0993\u099f\7\7\2\2\u0994\u099f\7\b\2\2")
        buf.write("\u0995\u099f\7{\2\2\u0996\u099f\7|\2\2\u0997\u099f\7}")
        buf.write("\2\2\u0998\u099f\7~\2\2\u0999\u099f\7\177\2\2\u099a\u099b")
        buf.write("\7V\2\2\u099b\u099f\7W\2\2\u099c\u099d\7X\2\2\u099d\u099f")
        buf.write("\7Y\2\2\u099e\u096b\3\2\2\2\u099e\u096c\3\2\2\2\u099e")
        buf.write("\u096d\3\2\2\2\u099e\u0970\3\2\2\2\u099e\u0973\3\2\2\2")
        buf.write("\u099e\u0974\3\2\2\2\u099e\u0975\3\2\2\2\u099e\u0976\3")
        buf.write("\2\2\2\u099e\u0977\3\2\2\2\u099e\u0978\3\2\2\2\u099e\u0979")
        buf.write("\3\2\2\2\u099e\u097a\3\2\2\2\u099e\u097b\3\2\2\2\u099e")
        buf.write("\u097c\3\2\2\2\u099e\u097d\3\2\2\2\u099e\u097e\3\2\2\2")
        buf.write("\u099e\u097f\3\2\2\2\u099e\u0980\3\2\2\2\u099e\u0981\3")
        buf.write("\2\2\2\u099e\u0982\3\2\2\2\u099e\u0983\3\2\2\2\u099e\u0984")
        buf.write("\3\2\2\2\u099e\u0985\3\2\2\2\u099e\u0986\3\2\2\2\u099e")
        buf.write("\u0987\3\2\2\2\u099e\u0988\3\2\2\2\u099e\u0989\3\2\2\2")
        buf.write("\u099e\u098a\3\2\2\2\u099e\u098b\3\2\2\2\u099e\u098c\3")
        buf.write("\2\2\2\u099e\u098d\3\2\2\2\u099e\u098e\3\2\2\2\u099e\u098f")
        buf.write("\3\2\2\2\u099e\u0990\3\2\2\2\u099e\u0991\3\2\2\2\u099e")
        buf.write("\u0992\3\2\2\2\u099e\u0993\3\2\2\2\u099e\u0994\3\2\2\2")
        buf.write("\u099e\u0995\3\2\2\2\u099e\u0996\3\2\2\2\u099e\u0997\3")
        buf.write("\2\2\2\u099e\u0998\3\2\2\2\u099e\u0999\3\2\2\2\u099e\u099a")
        buf.write("\3\2\2\2\u099e\u099c\3\2\2\2\u099f\u0189\3\2\2\2\u09a0")
        buf.write("\u09a8\7\u0088\2\2\u09a1\u09a8\7\u008e\2\2\u09a2\u09a8")
        buf.write("\7\u008f\2\2\u09a3\u09a8\7\u0090\2\2\u09a4\u09a8\5\u018c")
        buf.write("\u00c7\2\u09a5\u09a8\5\u018e\u00c8\2\u09a6\u09a8\5\u0190")
        buf.write("\u00c9\2\u09a7\u09a0\3\2\2\2\u09a7\u09a1\3\2\2\2\u09a7")
        buf.write("\u09a2\3\2\2\2\u09a7\u09a3\3\2\2\2\u09a7\u09a4\3\2\2\2")
        buf.write("\u09a7\u09a5\3\2\2\2\u09a7\u09a6\3\2\2\2\u09a8\u018b\3")
        buf.write("\2\2\2\u09a9\u09aa\t\16\2\2\u09aa\u018d\3\2\2\2\u09ab")
        buf.write("\u09ac\7\64\2\2\u09ac\u018f\3\2\2\2\u09ad\u09ae\t\17\2")
        buf.write("\2\u09ae\u0191\3\2\2\2\u0140\u0193\u019b\u01a5\u01a9\u01b4")
        buf.write("\u01b8\u01c7\u01ce\u01d3\u01d5\u01da\u01e0\u01ea\u01f1")
        buf.write("\u01f7\u01fb\u0200\u0206\u020d\u0213\u0216\u0219\u021c")
        buf.write("\u0223\u022a\u025e\u026d\u0273\u0279\u0286\u0288\u0292")
        buf.write("\u02a1\u02a7\u02c5\u02ca\u02ce\u02d2\u02d5\u02d9\u02df")
        buf.write("\u02e1\u02e9\u02ed\u02f0\u02f7\u02fe\u0302\u0307\u030b")
        buf.write("\u030e\u0313\u0319\u0326\u0331\u0333\u0342\u0344\u0350")
        buf.write("\u0352\u035e\u0372\u0374\u0380\u0382\u038d\u0398\u03a3")
        buf.write("\u03af\u03b1\u03bd\u03bf\u03c9\u03d1\u03dd\u03e4\u03e8")
        buf.write("\u03ec\u03f0\u03f4\u03f9\u03fc\u03ff\u0405\u040d\u0412")
        buf.write("\u0415\u041b\u0426\u043d\u0441\u0449\u044f\u0463\u0467")
        buf.write("\u0474\u0478\u047b\u0482\u048a\u0494\u049f\u04ab\u04b5")
        buf.write("\u04ba\u04c1\u04c4\u04c9\u04ce\u04e3\u04e7\u04ec\u04f7")
        buf.write("\u04fd\u0501\u0506\u050a\u050f\u0512\u0528\u052e\u0539")
        buf.write("\u053d\u0540\u054a\u0550\u0553\u055a\u0564\u0568\u056b")
        buf.write("\u056e\u0572\u0577\u0579\u057d\u0581\u058a\u0597\u059f")
        buf.write("\u05a5\u05ab\u05af\u05b2\u05bb\u05c4\u05cc\u05d7\u05dd")
        buf.write("\u05e8\u05eb\u05f0\u05ff\u0605\u060e\u0618\u061e\u0626")
        buf.write("\u062a\u062e\u0633\u0638\u063f\u0641\u0646\u064a\u0658")
        buf.write("\u065e\u0670\u0672\u067c\u0681\u0688\u068d\u0691\u0696")
        buf.write("\u069c\u06a3\u06a7\u06a9\u06ab\u06b2\u06b5\u06b8\u06bb")
        buf.write("\u06c0\u06c4\u06c7\u06cb\u06cf\u06d4\u06d7\u06d9\u06dd")
        buf.write("\u06e4\u06ea\u06ee\u06f4\u06f9\u06fb\u0701\u0705\u070b")
        buf.write("\u0712\u0716\u0718\u071a\u0721\u072b\u072f\u0731\u0733")
        buf.write("\u0737\u073a\u0740\u074a\u074e\u0754\u075c\u0760\u0763")
        buf.write("\u0767\u076c\u076f\u0772\u0776\u077b\u0785\u078c\u0791")
        buf.write("\u0795\u079a\u07a0\u07a4\u07aa\u07b0\u07b4\u07b9\u07bf")
        buf.write("\u07c3\u07c6\u07ca\u07cd\u07cf\u07d2\u07dc\u07e1\u07e3")
        buf.write("\u07e6\u07e9\u07ec\u07f5\u07ff\u0804\u0807\u080b\u080e")
        buf.write("\u0811\u0815\u081e\u082d\u0833\u0837\u083b\u083f\u0843")
        buf.write("\u0847\u084b\u084f\u0852\u0856\u0861\u0865\u086c\u0870")
        buf.write("\u0875\u087a\u0881\u0885\u088f\u089f\u08a4\u08a8\u08ab")
        buf.write("\u08af\u08b5\u08b8\u08bc\u08c6\u08c9\u08d1\u08d6\u08db")
        buf.write("\u08e3\u08ea\u08ee\u08f5\u08fb\u08ff\u0905\u090e\u0912")
        buf.write("\u0915\u0925\u092c\u0935\u093b\u093f\u0942\u0946\u094a")
        buf.write("\u094f\u0956\u095c\u0960\u0969\u099e\u09a7")
        return buf.getvalue()


class CPP14Parser ( Parser ):

    grammarFileName = "CPP14.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'!'", "'not'", "'&&'", "'and'", "'||'", 
                     "'or'", "<INVALID>", "<INVALID>", "'alignas'", "'alignof'", 
                     "'asm'", "'auto'", "'bool'", "'break'", "'case'", "'catch'", 
                     "'char'", "'char16_t'", "'char32_t'", "'class'", "'const'", 
                     "'constexpr'", "'const_cast'", "'continue'", "'decltype'", 
                     "'default'", "'delete'", "'do'", "'double'", "'dynamic_cast'", 
                     "'else'", "'enum'", "'explicit'", "'export'", "'extern'", 
                     "'false'", "'final'", "'float'", "'for'", "'friend'", 
                     "'goto'", "'if'", "'inline'", "'int'", "'long'", "'mutable'", 
                     "'namespace'", "'new'", "'noexcept'", "'nullptr'", 
                     "'operator'", "'override'", "'private'", "'protected'", 
                     "'public'", "'register'", "'reinterpret_cast'", "'return'", 
                     "'short'", "'signed'", "'sizeof'", "'static'", "'static_assert'", 
                     "'static_cast'", "'struct'", "'switch'", "'template'", 
                     "'this'", "'thread_local'", "'throw'", "'true'", "'try'", 
                     "'typedef'", "'typeid'", "'typename'", "'union'", "'unsigned'", 
                     "'using'", "'virtual'", "'void'", "'volatile'", "'wchar_t'", 
                     "'while'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
                     "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "'&'", "'|'", 
                     "'~'", "<INVALID>", "'='", "'<'", "'>'", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'^='", "'&='", "'|='", "'<<'", 
                     "'>>'", "'<<='", "'>>='", "'=='", "'!='", "'<='", "'>='", 
                     "<INVALID>", "<INVALID>", "'++'", "'--'", "','", "'->*'", 
                     "'->'", "'?'", "':'", "'::'", "';'", "'.'", "'.*'", 
                     "'...'" ]

    symbolicNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                      "<INVALID>", "<INVALID>", "<INVALID>", "MultiLineMacro", 
                      "Directive", "Alignas", "Alignof", "Asm", "Auto", 
                      "Bool", "Break", "Case", "Catch", "Char", "Char16", 
                      "Char32", "Class", "Const", "Constexpr", "Const_cast", 
                      "Continue", "Decltype", "Default", "Delete", "Do", 
                      "Double", "Dynamic_cast", "Else", "Enum", "Explicit", 
                      "Export", "Extern", "False_", "Final", "Float", "For", 
                      "Friend", "Goto", "If", "Inline", "Int", "Long", "Mutable", 
                      "Namespace", "New", "Noexcept", "Nullptr", "Operator", 
                      "Override", "Private", "Protected", "Public", "Register", 
                      "Reinterpret_cast", "Return", "Short", "Signed", "Sizeof", 
                      "Static", "Static_assert", "Static_cast", "Struct", 
                      "Switch", "Template", "This", "Thread_local", "Throw", 
                      "True_", "Try", "Typedef", "Typeid_", "Typename_", 
                      "Union", "Unsigned", "Using", "Virtual", "Void", "Volatile", 
                      "Wchar", "While", "LeftParen", "RightParen", "LeftBracket", 
                      "RightBracket", "LeftBrace", "RightBrace", "Plus", 
                      "Minus", "Star", "Div", "Mod", "Caret", "And", "Or", 
                      "Tilde", "Not", "Assign", "Less", "Greater", "PlusAssign", 
                      "MinusAssign", "StarAssign", "DivAssign", "ModAssign", 
                      "XorAssign", "AndAssign", "OrAssign", "LeftShift", 
                      "RightShift", "LeftShiftAssign", "RightShiftAssign", 
                      "Equal", "NotEqual", "LessEqual", "GreaterEqual", 
                      "AndAnd", "OrOr", "PlusPlus", "MinusMinus", "Comma", 
                      "ArrowStar", "Arrow", "Question", "Colon", "Doublecolon", 
                      "Semi", "Dot", "DotStar", "Ellipsis", "Identifier", 
                      "Integerliteral", "Decimalliteral", "Octalliteral", 
                      "Hexadecimalliteral", "Binaryliteral", "Integersuffix", 
                      "Characterliteral", "Floatingliteral", "Stringliteral", 
                      "Userdefinedintegerliteral", "Userdefinedfloatingliteral", 
                      "Userdefinedstringliteral", "Userdefinedcharacterliteral", 
                      "Whitespace", "Newline", "BlockComment", "LineComment" ]

    RULE_translationunit = 0
    RULE_primaryexpression = 1
    RULE_idexpression = 2
    RULE_unqualifiedid = 3
    RULE_qualifiedid = 4
    RULE_nestednamespecifier = 5
    RULE_lambdaexpression = 6
    RULE_lambdaintroducer = 7
    RULE_lambdacapture = 8
    RULE_capturedefault = 9
    RULE_capturelist = 10
    RULE_capture = 11
    RULE_simplecapture = 12
    RULE_initcapture = 13
    RULE_lambdadeclarator = 14
    RULE_postfixexpression = 15
    RULE_typeidofexpr = 16
    RULE_typeidofthetypeid = 17
    RULE_expressionlist = 18
    RULE_pseudodestructorname = 19
    RULE_unaryexpression = 20
    RULE_unaryoperator = 21
    RULE_newexpression = 22
    RULE_newplacement = 23
    RULE_newtypeid = 24
    RULE_newdeclarator = 25
    RULE_noptrnewdeclarator = 26
    RULE_newinitializer = 27
    RULE_deleteexpression = 28
    RULE_noexceptexpression = 29
    RULE_castexpression = 30
    RULE_pmexpression = 31
    RULE_multiplicativeexpression = 32
    RULE_additiveexpression = 33
    RULE_shiftexpression = 34
    RULE_shiftoperator = 35
    RULE_relationalexpression = 36
    RULE_equalityexpression = 37
    RULE_andexpression = 38
    RULE_exclusiveorexpression = 39
    RULE_inclusiveorexpression = 40
    RULE_logicalandexpression = 41
    RULE_logicalorexpression = 42
    RULE_conditionalexpression = 43
    RULE_assignmentexpression = 44
    RULE_assignmentoperator = 45
    RULE_expression = 46
    RULE_constantexpression = 47
    RULE_statement = 48
    RULE_labeledstatement = 49
    RULE_expressionstatement = 50
    RULE_compoundstatement = 51
    RULE_statementseq = 52
    RULE_selectionstatement = 53
    RULE_condition = 54
    RULE_iterationstatement = 55
    RULE_forinitstatement = 56
    RULE_forrangedeclaration = 57
    RULE_forrangeinitializer = 58
    RULE_jumpstatement = 59
    RULE_declarationstatement = 60
    RULE_declarationseq = 61
    RULE_declaration = 62
    RULE_blockdeclaration = 63
    RULE_aliasdeclaration = 64
    RULE_simpledeclaration = 65
    RULE_static_assertdeclaration = 66
    RULE_emptydeclaration = 67
    RULE_attributedeclaration = 68
    RULE_declspecifier = 69
    RULE_declspecifierseq = 70
    RULE_storageclassspecifier = 71
    RULE_functionspecifier = 72
    RULE_typedefname = 73
    RULE_typespecifier = 74
    RULE_trailingtypespecifier = 75
    RULE_typespecifierseq = 76
    RULE_trailingtypespecifierseq = 77
    RULE_simpletypespecifier = 78
    RULE_thetypename = 79
    RULE_decltypespecifier = 80
    RULE_elaboratedtypespecifier = 81
    RULE_enumname = 82
    RULE_enumspecifier = 83
    RULE_enumhead = 84
    RULE_opaqueenumdeclaration = 85
    RULE_enumkey = 86
    RULE_enumbase = 87
    RULE_enumeratorlist = 88
    RULE_enumeratordefinition = 89
    RULE_enumerator = 90
    RULE_namespacename = 91
    RULE_originalnamespacename = 92
    RULE_namespacedefinition = 93
    RULE_namednamespacedefinition = 94
    RULE_originalnamespacedefinition = 95
    RULE_extensionnamespacedefinition = 96
    RULE_unnamednamespacedefinition = 97
    RULE_namespacebody = 98
    RULE_namespacealias = 99
    RULE_namespacealiasdefinition = 100
    RULE_qualifiednamespacespecifier = 101
    RULE_usingdeclaration = 102
    RULE_usingdirective = 103
    RULE_asmdefinition = 104
    RULE_linkagespecification = 105
    RULE_attributespecifierseq = 106
    RULE_attributespecifier = 107
    RULE_alignmentspecifier = 108
    RULE_attributelist = 109
    RULE_attribute = 110
    RULE_attributetoken = 111
    RULE_attributescopedtoken = 112
    RULE_attributenamespace = 113
    RULE_attributeargumentclause = 114
    RULE_balancedtokenseq = 115
    RULE_balancedtoken = 116
    RULE_initdeclaratorlist = 117
    RULE_initdeclarator = 118
    RULE_declarator = 119
    RULE_ptrdeclarator = 120
    RULE_noptrdeclarator = 121
    RULE_parametersandqualifiers = 122
    RULE_trailingreturntype = 123
    RULE_ptroperator = 124
    RULE_cvqualifierseq = 125
    RULE_cvqualifier = 126
    RULE_refqualifier = 127
    RULE_declaratorid = 128
    RULE_thetypeid = 129
    RULE_abstractdeclarator = 130
    RULE_ptrabstractdeclarator = 131
    RULE_noptrabstractdeclarator = 132
    RULE_abstractpackdeclarator = 133
    RULE_noptrabstractpackdeclarator = 134
    RULE_parameterdeclarationclause = 135
    RULE_parameterdeclarationlist = 136
    RULE_parameterdeclaration = 137
    RULE_functiondefinition = 138
    RULE_functionbody = 139
    RULE_initializer = 140
    RULE_braceorequalinitializer = 141
    RULE_initializerclause = 142
    RULE_initializerlist = 143
    RULE_bracedinitlist = 144
    RULE_classname = 145
    RULE_classspecifier = 146
    RULE_classhead = 147
    RULE_classheadname = 148
    RULE_classvirtspecifier = 149
    RULE_classkey = 150
    RULE_memberspecification = 151
    RULE_memberdeclaration = 152
    RULE_memberdeclaratorlist = 153
    RULE_memberdeclarator = 154
    RULE_virtspecifierseq = 155
    RULE_virtspecifier = 156
    RULE_purespecifier = 157
    RULE_baseclause = 158
    RULE_basespecifierlist = 159
    RULE_basespecifier = 160
    RULE_classordecltype = 161
    RULE_basetypespecifier = 162
    RULE_accessspecifier = 163
    RULE_conversionfunctionid = 164
    RULE_conversiontypeid = 165
    RULE_conversiondeclarator = 166
    RULE_ctorinitializer = 167
    RULE_meminitializerlist = 168
    RULE_meminitializer = 169
    RULE_meminitializerid = 170
    RULE_operatorfunctionid = 171
    RULE_literaloperatorid = 172
    RULE_templatedeclaration = 173
    RULE_templateparameterlist = 174
    RULE_templateparameter = 175
    RULE_typeparameter = 176
    RULE_simpletemplateid = 177
    RULE_templateid = 178
    RULE_templatename = 179
    RULE_templateargumentlist = 180
    RULE_templateargument = 181
    RULE_typenamespecifier = 182
    RULE_explicitinstantiation = 183
    RULE_explicitspecialization = 184
    RULE_tryblock = 185
    RULE_functiontryblock = 186
    RULE_handlerseq = 187
    RULE_handler = 188
    RULE_exceptiondeclaration = 189
    RULE_throwexpression = 190
    RULE_exceptionspecification = 191
    RULE_dynamicexceptionspecification = 192
    RULE_typeidlist = 193
    RULE_noexceptspecification = 194
    RULE_theoperator = 195
    RULE_literal = 196
    RULE_booleanliteral = 197
    RULE_pointerliteral = 198
    RULE_userdefinedliteral = 199

    ruleNames =  [ "translationunit", "primaryexpression", "idexpression", 
                   "unqualifiedid", "qualifiedid", "nestednamespecifier", 
                   "lambdaexpression", "lambdaintroducer", "lambdacapture", 
                   "capturedefault", "capturelist", "capture", "simplecapture", 
                   "initcapture", "lambdadeclarator", "postfixexpression", 
                   "typeidofexpr", "typeidofthetypeid", "expressionlist", 
                   "pseudodestructorname", "unaryexpression", "unaryoperator", 
                   "newexpression", "newplacement", "newtypeid", "newdeclarator", 
                   "noptrnewdeclarator", "newinitializer", "deleteexpression", 
                   "noexceptexpression", "castexpression", "pmexpression", 
                   "multiplicativeexpression", "additiveexpression", "shiftexpression", 
                   "shiftoperator", "relationalexpression", "equalityexpression", 
                   "andexpression", "exclusiveorexpression", "inclusiveorexpression", 
                   "logicalandexpression", "logicalorexpression", "conditionalexpression", 
                   "assignmentexpression", "assignmentoperator", "expression", 
                   "constantexpression", "statement", "labeledstatement", 
                   "expressionstatement", "compoundstatement", "statementseq", 
                   "selectionstatement", "condition", "iterationstatement", 
                   "forinitstatement", "forrangedeclaration", "forrangeinitializer", 
                   "jumpstatement", "declarationstatement", "declarationseq", 
                   "declaration", "blockdeclaration", "aliasdeclaration", 
                   "simpledeclaration", "static_assertdeclaration", "emptydeclaration", 
                   "attributedeclaration", "declspecifier", "declspecifierseq", 
                   "storageclassspecifier", "functionspecifier", "typedefname", 
                   "typespecifier", "trailingtypespecifier", "typespecifierseq", 
                   "trailingtypespecifierseq", "simpletypespecifier", "thetypename", 
                   "decltypespecifier", "elaboratedtypespecifier", "enumname", 
                   "enumspecifier", "enumhead", "opaqueenumdeclaration", 
                   "enumkey", "enumbase", "enumeratorlist", "enumeratordefinition", 
                   "enumerator", "namespacename", "originalnamespacename", 
                   "namespacedefinition", "namednamespacedefinition", "originalnamespacedefinition", 
                   "extensionnamespacedefinition", "unnamednamespacedefinition", 
                   "namespacebody", "namespacealias", "namespacealiasdefinition", 
                   "qualifiednamespacespecifier", "usingdeclaration", "usingdirective", 
                   "asmdefinition", "linkagespecification", "attributespecifierseq", 
                   "attributespecifier", "alignmentspecifier", "attributelist", 
                   "attribute", "attributetoken", "attributescopedtoken", 
                   "attributenamespace", "attributeargumentclause", "balancedtokenseq", 
                   "balancedtoken", "initdeclaratorlist", "initdeclarator", 
                   "declarator", "ptrdeclarator", "noptrdeclarator", "parametersandqualifiers", 
                   "trailingreturntype", "ptroperator", "cvqualifierseq", 
                   "cvqualifier", "refqualifier", "declaratorid", "thetypeid", 
                   "abstractdeclarator", "ptrabstractdeclarator", "noptrabstractdeclarator", 
                   "abstractpackdeclarator", "noptrabstractpackdeclarator", 
                   "parameterdeclarationclause", "parameterdeclarationlist", 
                   "parameterdeclaration", "functiondefinition", "functionbody", 
                   "initializer", "braceorequalinitializer", "initializerclause", 
                   "initializerlist", "bracedinitlist", "classname", "classspecifier", 
                   "classhead", "classheadname", "classvirtspecifier", "classkey", 
                   "memberspecification", "memberdeclaration", "memberdeclaratorlist", 
                   "memberdeclarator", "virtspecifierseq", "virtspecifier", 
                   "purespecifier", "baseclause", "basespecifierlist", "basespecifier", 
                   "classordecltype", "basetypespecifier", "accessspecifier", 
                   "conversionfunctionid", "conversiontypeid", "conversiondeclarator", 
                   "ctorinitializer", "meminitializerlist", "meminitializer", 
                   "meminitializerid", "operatorfunctionid", "literaloperatorid", 
                   "templatedeclaration", "templateparameterlist", "templateparameter", 
                   "typeparameter", "simpletemplateid", "templateid", "templatename", 
                   "templateargumentlist", "templateargument", "typenamespecifier", 
                   "explicitinstantiation", "explicitspecialization", "tryblock", 
                   "functiontryblock", "handlerseq", "handler", "exceptiondeclaration", 
                   "throwexpression", "exceptionspecification", "dynamicexceptionspecification", 
                   "typeidlist", "noexceptspecification", "theoperator", 
                   "literal", "booleanliteral", "pointerliteral", "userdefinedliteral" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    MultiLineMacro=7
    Directive=8
    Alignas=9
    Alignof=10
    Asm=11
    Auto=12
    Bool=13
    Break=14
    Case=15
    Catch=16
    Char=17
    Char16=18
    Char32=19
    Class=20
    Const=21
    Constexpr=22
    Const_cast=23
    Continue=24
    Decltype=25
    Default=26
    Delete=27
    Do=28
    Double=29
    Dynamic_cast=30
    Else=31
    Enum=32
    Explicit=33
    Export=34
    Extern=35
    False_=36
    Final=37
    Float=38
    For=39
    Friend=40
    Goto=41
    If=42
    Inline=43
    Int=44
    Long=45
    Mutable=46
    Namespace=47
    New=48
    Noexcept=49
    Nullptr=50
    Operator=51
    Override=52
    Private=53
    Protected=54
    Public=55
    Register=56
    Reinterpret_cast=57
    Return=58
    Short=59
    Signed=60
    Sizeof=61
    Static=62
    Static_assert=63
    Static_cast=64
    Struct=65
    Switch=66
    Template=67
    This=68
    Thread_local=69
    Throw=70
    True_=71
    Try=72
    Typedef=73
    Typeid_=74
    Typename_=75
    Union=76
    Unsigned=77
    Using=78
    Virtual=79
    Void=80
    Volatile=81
    Wchar=82
    While=83
    LeftParen=84
    RightParen=85
    LeftBracket=86
    RightBracket=87
    LeftBrace=88
    RightBrace=89
    Plus=90
    Minus=91
    Star=92
    Div=93
    Mod=94
    Caret=95
    And=96
    Or=97
    Tilde=98
    Not=99
    Assign=100
    Less=101
    Greater=102
    PlusAssign=103
    MinusAssign=104
    StarAssign=105
    DivAssign=106
    ModAssign=107
    XorAssign=108
    AndAssign=109
    OrAssign=110
    LeftShift=111
    RightShift=112
    LeftShiftAssign=113
    RightShiftAssign=114
    Equal=115
    NotEqual=116
    LessEqual=117
    GreaterEqual=118
    AndAnd=119
    OrOr=120
    PlusPlus=121
    MinusMinus=122
    Comma=123
    ArrowStar=124
    Arrow=125
    Question=126
    Colon=127
    Doublecolon=128
    Semi=129
    Dot=130
    DotStar=131
    Ellipsis=132
    Identifier=133
    Integerliteral=134
    Decimalliteral=135
    Octalliteral=136
    Hexadecimalliteral=137
    Binaryliteral=138
    Integersuffix=139
    Characterliteral=140
    Floatingliteral=141
    Stringliteral=142
    Userdefinedintegerliteral=143
    Userdefinedfloatingliteral=144
    Userdefinedstringliteral=145
    Userdefinedcharacterliteral=146
    Whitespace=147
    Newline=148
    BlockComment=149
    LineComment=150

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.8")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class TranslationunitContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CPP14Parser.EOF, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_translationunit

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTranslationunit" ):
                listener.enterTranslationunit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTranslationunit" ):
                listener.exitTranslationunit(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTranslationunit" ):
                return visitor.visitTranslationunit(self)
            else:
                return visitor.visitChildren(self)




    def translationunit(self):

        localctx = CPP14Parser.TranslationunitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_translationunit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Template - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Using - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14Parser.Semi - 129)) | (1 << (CPP14Parser.Ellipsis - 129)) | (1 << (CPP14Parser.Identifier - 129)))) != 0):
                self.state = 400
                self.declarationseq(0)


            self.state = 403
            self.match(CPP14Parser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrimaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def literal(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.LiteralContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.LiteralContext,i)


        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def lambdaexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_primaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryexpression" ):
                listener.enterPrimaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryexpression" ):
                listener.exitPrimaryexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPrimaryexpression" ):
                return visitor.visitPrimaryexpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryexpression(self):

        localctx = CPP14Parser.PrimaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_primaryexpression)
        try:
            self.state = 419
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.False_, CPP14Parser.Nullptr, CPP14Parser.True_, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 405
                self.literal()
                self.state = 409
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 406
                        self.literal() 
                    self.state = 411
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,1,self._ctx)

                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 2)
                self.state = 412
                self.match(CPP14Parser.This)
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 3)
                self.state = 413
                self.match(CPP14Parser.LeftParen)
                self.state = 414
                self.expression(0)
                self.state = 415
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 417
                self.idexpression()
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 5)
                self.state = 418
                self.lambdaexpression()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IdexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def qualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiedidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_idexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIdexpression" ):
                listener.enterIdexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIdexpression" ):
                listener.exitIdexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIdexpression" ):
                return visitor.visitIdexpression(self)
            else:
                return visitor.visitChildren(self)




    def idexpression(self):

        localctx = CPP14Parser.IdexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_idexpression)
        try:
            self.state = 423
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 421
                self.unqualifiedid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 422
                self.qualifiedid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnqualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def conversionfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversionfunctionidContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def templateid(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unqualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnqualifiedid" ):
                listener.enterUnqualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnqualifiedid" ):
                listener.exitUnqualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnqualifiedid" ):
                return visitor.visitUnqualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def unqualifiedid(self):

        localctx = CPP14Parser.UnqualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_unqualifiedid)
        try:
            self.state = 434
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,4,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 425
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 426
                self.operatorfunctionid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 427
                self.conversionfunctionid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 428
                self.literaloperatorid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 429
                self.match(CPP14Parser.Tilde)
                self.state = 430
                self.classname()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 431
                self.match(CPP14Parser.Tilde)
                self.state = 432
                self.decltypespecifier()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 433
                self.templateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiedidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiedid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiedid" ):
                listener.enterQualifiedid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiedid" ):
                listener.exitQualifiedid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiedid" ):
                return visitor.visitQualifiedid(self)
            else:
                return visitor.visitChildren(self)




    def qualifiedid(self):

        localctx = CPP14Parser.QualifiedidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_qualifiedid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 436
            self.nestednamespecifier(0)
            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Template:
                self.state = 437
                self.match(CPP14Parser.Template)


            self.state = 440
            self.unqualifiedid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NestednamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,0)


        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_nestednamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestednamespecifier" ):
                listener.enterNestednamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestednamespecifier" ):
                listener.exitNestednamespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNestednamespecifier" ):
                return visitor.visitNestednamespecifier(self)
            else:
                return visitor.visitChildren(self)



    def nestednamespecifier(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NestednamespecifierContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 10
        self.enterRecursionRule(localctx, 10, self.RULE_nestednamespecifier, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,6,self._ctx)
            if la_ == 1:
                self.state = 443
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 2:
                self.state = 444
                self.thetypename()
                self.state = 445
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 3:
                self.state = 447
                self.namespacename()
                self.state = 448
                self.match(CPP14Parser.Doublecolon)
                pass

            elif la_ == 4:
                self.state = 450
                self.decltypespecifier()
                self.state = 451
                self.match(CPP14Parser.Doublecolon)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 467
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,9,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 465
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,8,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 455
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 456
                        self.match(CPP14Parser.Identifier)
                        self.state = 457
                        self.match(CPP14Parser.Doublecolon)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NestednamespecifierContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_nestednamespecifier)
                        self.state = 458
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 460
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 459
                            self.match(CPP14Parser.Template)


                        self.state = 462
                        self.simpletemplateid()
                        self.state = 463
                        self.match(CPP14Parser.Doublecolon)
                        pass

             
                self.state = 469
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,9,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LambdaexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def lambdaintroducer(self):
            return self.getTypedRuleContext(CPP14Parser.LambdaintroducerContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def lambdadeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.LambdadeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaexpression" ):
                listener.enterLambdaexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaexpression" ):
                listener.exitLambdaexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaexpression" ):
                return visitor.visitLambdaexpression(self)
            else:
                return visitor.visitChildren(self)




    def lambdaexpression(self):

        localctx = CPP14Parser.LambdaexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_lambdaexpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 470
            self.lambdaintroducer()
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.LeftParen:
                self.state = 471
                self.lambdadeclarator()


            self.state = 474
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdaintroducerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def lambdacapture(self):
            return self.getTypedRuleContext(CPP14Parser.LambdacaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdaintroducer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdaintroducer" ):
                listener.enterLambdaintroducer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdaintroducer" ):
                listener.exitLambdaintroducer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdaintroducer" ):
                return visitor.visitLambdaintroducer(self)
            else:
                return visitor.visitChildren(self)




    def lambdaintroducer(self):

        localctx = CPP14Parser.LambdaintroducerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_lambdaintroducer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 476
            self.match(CPP14Parser.LeftBracket)
            self.state = 478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 68)) & ~0x3f) == 0 and ((1 << (_la - 68)) & ((1 << (CPP14Parser.This - 68)) | (1 << (CPP14Parser.And - 68)) | (1 << (CPP14Parser.Assign - 68)))) != 0) or _la==CPP14Parser.Identifier:
                self.state = 477
                self.lambdacapture()


            self.state = 480
            self.match(CPP14Parser.RightBracket)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdacaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capturedefault(self):
            return self.getTypedRuleContext(CPP14Parser.CapturedefaultContext,0)


        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdacapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdacapture" ):
                listener.enterLambdacapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdacapture" ):
                listener.exitLambdacapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdacapture" ):
                return visitor.visitLambdacapture(self)
            else:
                return visitor.visitChildren(self)




    def lambdacapture(self):

        localctx = CPP14Parser.LambdacaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_lambdacapture)
        try:
            self.state = 488
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 482
                self.capturedefault()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 483
                self.capturelist(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 484
                self.capturedefault()
                self.state = 485
                self.match(CPP14Parser.Comma)
                self.state = 486
                self.capturelist(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturedefaultContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturedefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturedefault" ):
                listener.enterCapturedefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturedefault" ):
                listener.exitCapturedefault(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturedefault" ):
                return visitor.visitCapturedefault(self)
            else:
                return visitor.visitChildren(self)




    def capturedefault(self):

        localctx = CPP14Parser.CapturedefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_capturedefault)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 490
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.And or _la==CPP14Parser.Assign):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CapturelistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def capture(self):
            return self.getTypedRuleContext(CPP14Parser.CaptureContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def capturelist(self):
            return self.getTypedRuleContext(CPP14Parser.CapturelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_capturelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapturelist" ):
                listener.enterCapturelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapturelist" ):
                listener.exitCapturelist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapturelist" ):
                return visitor.visitCapturelist(self)
            else:
                return visitor.visitChildren(self)



    def capturelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.CapturelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_capturelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 493
            self.capture()
            self.state = 495
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.state = 494
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 505
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,15,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.CapturelistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_capturelist)
                    self.state = 497
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 498
                    self.match(CPP14Parser.Comma)
                    self.state = 499
                    self.capture()
                    self.state = 501
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,14,self._ctx)
                    if la_ == 1:
                        self.state = 500
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 507
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,15,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class CaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simplecapture(self):
            return self.getTypedRuleContext(CPP14Parser.SimplecaptureContext,0)


        def initcapture(self):
            return self.getTypedRuleContext(CPP14Parser.InitcaptureContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_capture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCapture" ):
                listener.enterCapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCapture" ):
                listener.exitCapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCapture" ):
                return visitor.visitCapture(self)
            else:
                return visitor.visitChildren(self)




    def capture(self):

        localctx = CPP14Parser.CaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_capture)
        try:
            self.state = 510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 508
                self.simplecapture()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 509
                self.initcapture()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimplecaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def This(self):
            return self.getToken(CPP14Parser.This, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_simplecapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimplecapture" ):
                listener.enterSimplecapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimplecapture" ):
                listener.exitSimplecapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimplecapture" ):
                return visitor.visitSimplecapture(self)
            else:
                return visitor.visitChildren(self)




    def simplecapture(self):

        localctx = CPP14Parser.SimplecaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_simplecapture)
        try:
            self.state = 516
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 512
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 513
                self.match(CPP14Parser.And)
                self.state = 514
                self.match(CPP14Parser.Identifier)
                pass
            elif token in [CPP14Parser.This]:
                self.enterOuterAlt(localctx, 3)
                self.state = 515
                self.match(CPP14Parser.This)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitcaptureContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initcapture

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitcapture" ):
                listener.enterInitcapture(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitcapture" ):
                listener.exitInitcapture(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitcapture" ):
                return visitor.visitInitcapture(self)
            else:
                return visitor.visitChildren(self)




    def initcapture(self):

        localctx = CPP14Parser.InitcaptureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_initcapture)
        try:
            self.state = 523
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 518
                self.match(CPP14Parser.Identifier)
                self.state = 519
                self.initializer()
                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 520
                self.match(CPP14Parser.And)
                self.state = 521
                self.match(CPP14Parser.Identifier)
                self.state = 522
                self.initializer()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LambdadeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_lambdadeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLambdadeclarator" ):
                listener.enterLambdadeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLambdadeclarator" ):
                listener.exitLambdadeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLambdadeclarator" ):
                return visitor.visitLambdadeclarator(self)
            else:
                return visitor.visitChildren(self)




    def lambdadeclarator(self):

        localctx = CPP14Parser.LambdadeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_lambdadeclarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 525
            self.match(CPP14Parser.LeftParen)
            self.state = 526
            self.parameterdeclarationclause()
            self.state = 527
            self.match(CPP14Parser.RightParen)
            self.state = 529
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Mutable:
                self.state = 528
                self.match(CPP14Parser.Mutable)


            self.state = 532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Noexcept or _la==CPP14Parser.Throw:
                self.state = 531
                self.exceptionspecification()


            self.state = 535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 534
                self.attributespecifierseq(0)


            self.state = 538
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Arrow:
                self.state = 537
                self.trailingreturntype()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PostfixexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def primaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PrimaryexpressionContext,0)


        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def Dynamic_cast(self):
            return self.getToken(CPP14Parser.Dynamic_cast, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Static_cast(self):
            return self.getToken(CPP14Parser.Static_cast, 0)

        def Reinterpret_cast(self):
            return self.getToken(CPP14Parser.Reinterpret_cast, 0)

        def Const_cast(self):
            return self.getToken(CPP14Parser.Const_cast, 0)

        def typeidofthetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidofthetypeidContext,0)


        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def Dot(self):
            return self.getToken(CPP14Parser.Dot, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def pseudodestructorname(self):
            return self.getTypedRuleContext(CPP14Parser.PseudodestructornameContext,0)


        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_postfixexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPostfixexpression" ):
                listener.enterPostfixexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPostfixexpression" ):
                listener.exitPostfixexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPostfixexpression" ):
                return visitor.visitPostfixexpression(self)
            else:
                return visitor.visitChildren(self)



    def postfixexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PostfixexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_postfixexpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,25,self._ctx)
            if la_ == 1:
                self.state = 541
                self.primaryexpression()
                pass

            elif la_ == 2:
                self.state = 542
                self.simpletypespecifier()
                self.state = 543
                self.match(CPP14Parser.LeftParen)
                self.state = 545
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 544
                    self.expressionlist()


                self.state = 547
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 3:
                self.state = 549
                self.typenamespecifier()
                self.state = 550
                self.match(CPP14Parser.LeftParen)
                self.state = 552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 551
                    self.expressionlist()


                self.state = 554
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 4:
                self.state = 556
                self.simpletypespecifier()
                self.state = 557
                self.bracedinitlist()
                pass

            elif la_ == 5:
                self.state = 559
                self.typenamespecifier()
                self.state = 560
                self.bracedinitlist()
                pass

            elif la_ == 6:
                self.state = 562
                self.match(CPP14Parser.Dynamic_cast)
                self.state = 563
                self.match(CPP14Parser.Less)
                self.state = 564
                self.thetypeid()
                self.state = 565
                self.match(CPP14Parser.Greater)
                self.state = 566
                self.match(CPP14Parser.LeftParen)
                self.state = 567
                self.expression(0)
                self.state = 568
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.state = 570
                self.match(CPP14Parser.Static_cast)
                self.state = 571
                self.match(CPP14Parser.Less)
                self.state = 572
                self.thetypeid()
                self.state = 573
                self.match(CPP14Parser.Greater)
                self.state = 574
                self.match(CPP14Parser.LeftParen)
                self.state = 575
                self.expression(0)
                self.state = 576
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.state = 578
                self.match(CPP14Parser.Reinterpret_cast)
                self.state = 579
                self.match(CPP14Parser.Less)
                self.state = 580
                self.thetypeid()
                self.state = 581
                self.match(CPP14Parser.Greater)
                self.state = 582
                self.match(CPP14Parser.LeftParen)
                self.state = 583
                self.expression(0)
                self.state = 584
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.state = 586
                self.match(CPP14Parser.Const_cast)
                self.state = 587
                self.match(CPP14Parser.Less)
                self.state = 588
                self.thetypeid()
                self.state = 589
                self.match(CPP14Parser.Greater)
                self.state = 590
                self.match(CPP14Parser.LeftParen)
                self.state = 591
                self.expression(0)
                self.state = 592
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 10:
                self.state = 594
                self.typeidofthetypeid()
                self.state = 595
                self.match(CPP14Parser.LeftParen)
                self.state = 596
                self.expression(0)
                self.state = 597
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 11:
                self.state = 599
                self.typeidofthetypeid()
                self.state = 600
                self.match(CPP14Parser.LeftParen)
                self.state = 601
                self.thetypeid()
                self.state = 602
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 646
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,30,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 644
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 606
                        if not self.precpred(self._ctx, 19):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 19)")
                        self.state = 607
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 608
                        self.expression(0)
                        self.state = 609
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 611
                        if not self.precpred(self._ctx, 18):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 18)")
                        self.state = 612
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 613
                        self.bracedinitlist()
                        self.state = 614
                        self.match(CPP14Parser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 616
                        if not self.precpred(self._ctx, 17):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 17)")
                        self.state = 617
                        self.match(CPP14Parser.LeftParen)
                        self.state = 619
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 618
                            self.expressionlist()


                        self.state = 621
                        self.match(CPP14Parser.RightParen)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 622
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 623
                        self.match(CPP14Parser.Dot)
                        self.state = 625
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 624
                            self.match(CPP14Parser.Template)


                        self.state = 627
                        self.idexpression()
                        pass

                    elif la_ == 5:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 628
                        if not self.precpred(self._ctx, 11):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 11)")
                        self.state = 629
                        self.match(CPP14Parser.Arrow)
                        self.state = 631
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==CPP14Parser.Template:
                            self.state = 630
                            self.match(CPP14Parser.Template)


                        self.state = 633
                        self.idexpression()
                        pass

                    elif la_ == 6:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 634
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 635
                        self.match(CPP14Parser.Dot)
                        self.state = 636
                        self.pseudodestructorname()
                        pass

                    elif la_ == 7:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 637
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 638
                        self.match(CPP14Parser.Arrow)
                        self.state = 639
                        self.pseudodestructorname()
                        pass

                    elif la_ == 8:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 640
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 641
                        self.match(CPP14Parser.PlusPlus)
                        pass

                    elif la_ == 9:
                        localctx = CPP14Parser.PostfixexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixexpression)
                        self.state = 642
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 643
                        self.match(CPP14Parser.MinusMinus)
                        pass

             
                self.state = 648
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,30,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TypeidofexprContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(CPP14Parser.Typeid_, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidofexpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofexpr" ):
                listener.enterTypeidofexpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofexpr" ):
                listener.exitTypeidofexpr(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofexpr" ):
                return visitor.visitTypeidofexpr(self)
            else:
                return visitor.visitChildren(self)




    def typeidofexpr(self):

        localctx = CPP14Parser.TypeidofexprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_typeidofexpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 649
            self.match(CPP14Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidofthetypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typeid_(self):
            return self.getToken(CPP14Parser.Typeid_, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidofthetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidofthetypeid" ):
                listener.enterTypeidofthetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidofthetypeid" ):
                listener.exitTypeidofthetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidofthetypeid" ):
                return visitor.visitTypeidofthetypeid(self)
            else:
                return visitor.visitChildren(self)




    def typeidofthetypeid(self):

        localctx = CPP14Parser.TypeidofthetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_typeidofthetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 651
            self.match(CPP14Parser.Typeid_)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionlist" ):
                listener.enterExpressionlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionlist" ):
                listener.exitExpressionlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionlist" ):
                return visitor.visitExpressionlist(self)
            else:
                return visitor.visitChildren(self)




    def expressionlist(self):

        localctx = CPP14Parser.ExpressionlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_expressionlist)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 653
            self.initializerlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PseudodestructornameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.ThetypenameContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,i)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_pseudodestructorname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPseudodestructorname" ):
                listener.enterPseudodestructorname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPseudodestructorname" ):
                listener.exitPseudodestructorname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPseudodestructorname" ):
                return visitor.visitPseudodestructorname(self)
            else:
                return visitor.visitChildren(self)




    def pseudodestructorname(self):

        localctx = CPP14Parser.PseudodestructornameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_pseudodestructorname)
        self._la = 0 # Token type
        try:
            self.state = 677
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,33,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 656
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,31,self._ctx)
                if la_ == 1:
                    self.state = 655
                    self.nestednamespecifier(0)


                self.state = 658
                self.thetypename()
                self.state = 659
                self.match(CPP14Parser.Doublecolon)
                self.state = 660
                self.match(CPP14Parser.Tilde)
                self.state = 661
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 663
                self.nestednamespecifier(0)
                self.state = 664
                self.match(CPP14Parser.Template)
                self.state = 665
                self.simpletemplateid()
                self.state = 666
                self.match(CPP14Parser.Doublecolon)
                self.state = 667
                self.match(CPP14Parser.Tilde)
                self.state = 668
                self.thetypename()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Decltype or _la==CPP14Parser.Doublecolon or _la==CPP14Parser.Identifier:
                    self.state = 670
                    self.nestednamespecifier(0)


                self.state = 673
                self.match(CPP14Parser.Tilde)
                self.state = 674
                self.thetypename()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 675
                self.match(CPP14Parser.Tilde)
                self.state = 676
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def postfixexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PostfixexpressionContext,0)


        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def unaryoperator(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryoperatorContext,0)


        def Sizeof(self):
            return self.getToken(CPP14Parser.Sizeof, 0)

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Alignof(self):
            return self.getToken(CPP14Parser.Alignof, 0)

        def noexceptexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptexpressionContext,0)


        def newexpression(self):
            return self.getTypedRuleContext(CPP14Parser.NewexpressionContext,0)


        def deleteexpression(self):
            return self.getTypedRuleContext(CPP14Parser.DeleteexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryexpression" ):
                listener.enterUnaryexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryexpression" ):
                listener.exitUnaryexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryexpression" ):
                return visitor.visitUnaryexpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryexpression(self):

        localctx = CPP14Parser.UnaryexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_unaryexpression)
        try:
            self.state = 707
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 679
                self.postfixexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 680
                self.match(CPP14Parser.PlusPlus)
                self.state = 681
                self.castexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 682
                self.match(CPP14Parser.MinusMinus)
                self.state = 683
                self.castexpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 684
                self.unaryoperator()
                self.state = 685
                self.castexpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 687
                self.match(CPP14Parser.Sizeof)
                self.state = 688
                self.unaryexpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 689
                self.match(CPP14Parser.Sizeof)
                self.state = 690
                self.match(CPP14Parser.LeftParen)
                self.state = 691
                self.thetypeid()
                self.state = 692
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 694
                self.match(CPP14Parser.Sizeof)
                self.state = 695
                self.match(CPP14Parser.Ellipsis)
                self.state = 696
                self.match(CPP14Parser.LeftParen)
                self.state = 697
                self.match(CPP14Parser.Identifier)
                self.state = 698
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 699
                self.match(CPP14Parser.Alignof)
                self.state = 700
                self.match(CPP14Parser.LeftParen)
                self.state = 701
                self.thetypeid()
                self.state = 702
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 704
                self.noexceptexpression()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 705
                self.newexpression()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 706
                self.deleteexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnaryoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unaryoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryoperator" ):
                listener.enterUnaryoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryoperator" ):
                listener.exitUnaryoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnaryoperator" ):
                return visitor.visitUnaryoperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryoperator(self):

        localctx = CPP14Parser.UnaryoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_unaryoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 709
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.T__0 or _la==CPP14Parser.T__1 or ((((_la - 90)) & ~0x3f) == 0 and ((1 << (_la - 90)) & ((1 << (CPP14Parser.Plus - 90)) | (1 << (CPP14Parser.Minus - 90)) | (1 << (CPP14Parser.Star - 90)) | (1 << (CPP14Parser.And - 90)) | (1 << (CPP14Parser.Or - 90)) | (1 << (CPP14Parser.Tilde - 90)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def newtypeid(self):
            return self.getTypedRuleContext(CPP14Parser.NewtypeidContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def newplacement(self):
            return self.getTypedRuleContext(CPP14Parser.NewplacementContext,0)


        def newinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.NewinitializerContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewexpression" ):
                listener.enterNewexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewexpression" ):
                listener.exitNewexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewexpression" ):
                return visitor.visitNewexpression(self)
            else:
                return visitor.visitChildren(self)




    def newexpression(self):

        localctx = CPP14Parser.NewexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_newexpression)
        self._la = 0 # Token type
        try:
            self.state = 735
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,41,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 712
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 711
                    self.match(CPP14Parser.Doublecolon)


                self.state = 714
                self.match(CPP14Parser.New)
                self.state = 716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.LeftParen:
                    self.state = 715
                    self.newplacement()


                self.state = 718
                self.newtypeid()
                self.state = 720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,37,self._ctx)
                if la_ == 1:
                    self.state = 719
                    self.newinitializer()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 723
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 722
                    self.match(CPP14Parser.Doublecolon)


                self.state = 725
                self.match(CPP14Parser.New)
                self.state = 727
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,39,self._ctx)
                if la_ == 1:
                    self.state = 726
                    self.newplacement()


                self.state = 729
                self.match(CPP14Parser.LeftParen)
                self.state = 730
                self.thetypeid()
                self.state = 731
                self.match(CPP14Parser.RightParen)
                self.state = 733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
                if la_ == 1:
                    self.state = 732
                    self.newinitializer()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewplacementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_newplacement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewplacement" ):
                listener.enterNewplacement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewplacement" ):
                listener.exitNewplacement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewplacement" ):
                return visitor.visitNewplacement(self)
            else:
                return visitor.visitChildren(self)




    def newplacement(self):

        localctx = CPP14Parser.NewplacementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_newplacement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 737
            self.match(CPP14Parser.LeftParen)
            self.state = 738
            self.expressionlist()
            self.state = 739
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewtypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newtypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewtypeid" ):
                listener.enterNewtypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewtypeid" ):
                listener.exitNewtypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewtypeid" ):
                return visitor.visitNewtypeid(self)
            else:
                return visitor.visitChildren(self)




    def newtypeid(self):

        localctx = CPP14Parser.NewtypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_newtypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 741
            self.typespecifierseq()
            self.state = 743
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,42,self._ctx)
            if la_ == 1:
                self.state = 742
                self.newdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def newdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NewdeclaratorContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewdeclarator" ):
                listener.enterNewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewdeclarator" ):
                listener.exitNewdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewdeclarator" ):
                return visitor.visitNewdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def newdeclarator(self):

        localctx = CPP14Parser.NewdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_newdeclarator)
        try:
            self.state = 750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.T__2, CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.ptroperator()
                self.state = 747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 746
                    self.newdeclarator()


                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 749
                self.noptrnewdeclarator(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrnewdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def noptrnewdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrnewdeclaratorContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrnewdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrnewdeclarator" ):
                listener.enterNoptrnewdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrnewdeclarator" ):
                listener.exitNoptrnewdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrnewdeclarator" ):
                return visitor.visitNoptrnewdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrnewdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrnewdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 52
        self.enterRecursionRule(localctx, 52, self.RULE_noptrnewdeclarator, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 753
            self.match(CPP14Parser.LeftBracket)
            self.state = 754
            self.expression(0)
            self.state = 755
            self.match(CPP14Parser.RightBracket)
            self.state = 757
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.state = 756
                self.attributespecifierseq(0)


            self._ctx.stop = self._input.LT(-1)
            self.state = 768
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,47,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.NoptrnewdeclaratorContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrnewdeclarator)
                    self.state = 759
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 760
                    self.match(CPP14Parser.LeftBracket)
                    self.state = 761
                    self.constantexpression()
                    self.state = 762
                    self.match(CPP14Parser.RightBracket)
                    self.state = 764
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,46,self._ctx)
                    if la_ == 1:
                        self.state = 763
                        self.attributespecifierseq(0)

             
                self.state = 770
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,47,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NewinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_newinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNewinitializer" ):
                listener.enterNewinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNewinitializer" ):
                listener.exitNewinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNewinitializer" ):
                return visitor.visitNewinitializer(self)
            else:
                return visitor.visitChildren(self)




    def newinitializer(self):

        localctx = CPP14Parser.NewinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_newinitializer)
        self._la = 0 # Token type
        try:
            self.state = 777
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.match(CPP14Parser.LeftParen)
                self.state = 773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 772
                    self.expressionlist()


                self.state = 775
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 776
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_deleteexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteexpression" ):
                listener.enterDeleteexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteexpression" ):
                listener.exitDeleteexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeleteexpression" ):
                return visitor.visitDeleteexpression(self)
            else:
                return visitor.visitChildren(self)




    def deleteexpression(self):

        localctx = CPP14Parser.DeleteexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_deleteexpression)
        self._la = 0 # Token type
        try:
            self.state = 791
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 779
                    self.match(CPP14Parser.Doublecolon)


                self.state = 782
                self.match(CPP14Parser.Delete)
                self.state = 783
                self.castexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Doublecolon:
                    self.state = 784
                    self.match(CPP14Parser.Doublecolon)


                self.state = 787
                self.match(CPP14Parser.Delete)
                self.state = 788
                self.match(CPP14Parser.LeftBracket)
                self.state = 789
                self.match(CPP14Parser.RightBracket)
                self.state = 790
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoexceptexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptexpression" ):
                listener.enterNoexceptexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptexpression" ):
                listener.exitNoexceptexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptexpression" ):
                return visitor.visitNoexceptexpression(self)
            else:
                return visitor.visitChildren(self)




    def noexceptexpression(self):

        localctx = CPP14Parser.NoexceptexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_noexceptexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 793
            self.match(CPP14Parser.Noexcept)
            self.state = 794
            self.match(CPP14Parser.LeftParen)
            self.state = 795
            self.expression(0)
            self.state = 796
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CastexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def unaryexpression(self):
            return self.getTypedRuleContext(CPP14Parser.UnaryexpressionContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_castexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCastexpression" ):
                listener.enterCastexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCastexpression" ):
                listener.exitCastexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCastexpression" ):
                return visitor.visitCastexpression(self)
            else:
                return visitor.visitChildren(self)




    def castexpression(self):

        localctx = CPP14Parser.CastexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_castexpression)
        try:
            self.state = 804
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,53,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 798
                self.unaryexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 799
                self.match(CPP14Parser.LeftParen)
                self.state = 800
                self.thetypeid()
                self.state = 801
                self.match(CPP14Parser.RightParen)
                self.state = 802
                self.castexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PmexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def castexpression(self):
            return self.getTypedRuleContext(CPP14Parser.CastexpressionContext,0)


        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def DotStar(self):
            return self.getToken(CPP14Parser.DotStar, 0)

        def ArrowStar(self):
            return self.getToken(CPP14Parser.ArrowStar, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pmexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPmexpression" ):
                listener.enterPmexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPmexpression" ):
                listener.exitPmexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPmexpression" ):
                return visitor.visitPmexpression(self)
            else:
                return visitor.visitChildren(self)



    def pmexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.PmexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 62
        self.enterRecursionRule(localctx, 62, self.RULE_pmexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 807
            self.castexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 817
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 815
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,54,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 809
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 810
                        self.match(CPP14Parser.DotStar)
                        self.state = 811
                        self.castexpression()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.PmexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_pmexpression)
                        self.state = 812
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 813
                        self.match(CPP14Parser.ArrowStar)
                        self.state = 814
                        self.castexpression()
                        pass

             
                self.state = 819
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MultiplicativeexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def pmexpression(self):
            return self.getTypedRuleContext(CPP14Parser.PmexpressionContext,0)


        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def Div(self):
            return self.getToken(CPP14Parser.Div, 0)

        def Mod(self):
            return self.getToken(CPP14Parser.Mod, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_multiplicativeexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultiplicativeexpression" ):
                listener.enterMultiplicativeexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultiplicativeexpression" ):
                listener.exitMultiplicativeexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMultiplicativeexpression" ):
                return visitor.visitMultiplicativeexpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MultiplicativeexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 64
        self.enterRecursionRule(localctx, 64, self.RULE_multiplicativeexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 821
            self.pmexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 834
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 832
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,56,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 823
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 824
                        self.match(CPP14Parser.Star)
                        self.state = 825
                        self.pmexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 826
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 827
                        self.match(CPP14Parser.Div)
                        self.state = 828
                        self.pmexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.MultiplicativeexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeexpression)
                        self.state = 829
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 830
                        self.match(CPP14Parser.Mod)
                        self.state = 831
                        self.pmexpression(0)
                        pass

             
                self.state = 836
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AdditiveexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeexpression(self):
            return self.getTypedRuleContext(CPP14Parser.MultiplicativeexpressionContext,0)


        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_additiveexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdditiveexpression" ):
                listener.enterAdditiveexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdditiveexpression" ):
                listener.exitAdditiveexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAdditiveexpression" ):
                return visitor.visitAdditiveexpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AdditiveexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 66
        self.enterRecursionRule(localctx, 66, self.RULE_additiveexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 838
            self.multiplicativeexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 848
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,59,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 846
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,58,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 840
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 841
                        self.match(CPP14Parser.Plus)
                        self.state = 842
                        self.multiplicativeexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AdditiveexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveexpression)
                        self.state = 843
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 844
                        self.match(CPP14Parser.Minus)
                        self.state = 845
                        self.multiplicativeexpression(0)
                        pass

             
                self.state = 850
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,59,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def additiveexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AdditiveexpressionContext,0)


        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def shiftoperator(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftoperatorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftexpression" ):
                listener.enterShiftexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftexpression" ):
                listener.exitShiftexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftexpression" ):
                return visitor.visitShiftexpression(self)
            else:
                return visitor.visitChildren(self)



    def shiftexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ShiftexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 68
        self.enterRecursionRule(localctx, 68, self.RULE_shiftexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 852
            self.additiveexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 860
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,60,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ShiftexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftexpression)
                    self.state = 854
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 855
                    self.shiftoperator()
                    self.state = 856
                    self.additiveexpression(0) 
                self.state = 862
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,60,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ShiftoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RightShift(self):
            return self.getToken(CPP14Parser.RightShift, 0)

        def LeftShift(self):
            return self.getToken(CPP14Parser.LeftShift, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_shiftoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShiftoperator" ):
                listener.enterShiftoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShiftoperator" ):
                listener.exitShiftoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitShiftoperator" ):
                return visitor.visitShiftoperator(self)
            else:
                return visitor.visitChildren(self)




    def shiftoperator(self):

        localctx = CPP14Parser.ShiftoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_shiftoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 863
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.LeftShift or _la==CPP14Parser.RightShift):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RelationalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def shiftexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ShiftexpressionContext,0)


        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def LessEqual(self):
            return self.getToken(CPP14Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(CPP14Parser.GreaterEqual, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_relationalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelationalexpression" ):
                listener.enterRelationalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelationalexpression" ):
                listener.exitRelationalexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRelationalexpression" ):
                return visitor.visitRelationalexpression(self)
            else:
                return visitor.visitChildren(self)



    def relationalexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.RelationalexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 72
        self.enterRecursionRule(localctx, 72, self.RULE_relationalexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 866
            self.shiftexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 882
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,62,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 880
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 868
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 869
                        self.match(CPP14Parser.Less)
                        self.state = 870
                        self.shiftexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 871
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 872
                        self.match(CPP14Parser.Greater)
                        self.state = 873
                        self.shiftexpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 874
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 875
                        self.match(CPP14Parser.LessEqual)
                        self.state = 876
                        self.shiftexpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CPP14Parser.RelationalexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalexpression)
                        self.state = 877
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 878
                        self.match(CPP14Parser.GreaterEqual)
                        self.state = 879
                        self.shiftexpression(0)
                        pass

             
                self.state = 884
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,62,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EqualityexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def relationalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.RelationalexpressionContext,0)


        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def Equal(self):
            return self.getToken(CPP14Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CPP14Parser.NotEqual, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_equalityexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEqualityexpression" ):
                listener.enterEqualityexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEqualityexpression" ):
                listener.exitEqualityexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEqualityexpression" ):
                return visitor.visitEqualityexpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EqualityexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 74
        self.enterRecursionRule(localctx, 74, self.RULE_equalityexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 886
            self.relationalexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 896
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,64,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 894
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,63,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 888
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 889
                        self.match(CPP14Parser.Equal)
                        self.state = 890
                        self.relationalexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.EqualityexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityexpression)
                        self.state = 891
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 892
                        self.match(CPP14Parser.NotEqual)
                        self.state = 893
                        self.relationalexpression(0)
                        pass

             
                self.state = 898
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,64,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AndexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def equalityexpression(self):
            return self.getTypedRuleContext(CPP14Parser.EqualityexpressionContext,0)


        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_andexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAndexpression" ):
                listener.enterAndexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAndexpression" ):
                listener.exitAndexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAndexpression" ):
                return visitor.visitAndexpression(self)
            else:
                return visitor.visitChildren(self)



    def andexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AndexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 76
        self.enterRecursionRule(localctx, 76, self.RULE_andexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 900
            self.equalityexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 907
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,65,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AndexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andexpression)
                    self.state = 902
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 903
                    self.match(CPP14Parser.And)
                    self.state = 904
                    self.equalityexpression(0) 
                self.state = 909
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,65,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def andexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AndexpressionContext,0)


        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def Caret(self):
            return self.getToken(CPP14Parser.Caret, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExclusiveorexpression" ):
                listener.enterExclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExclusiveorexpression" ):
                listener.exitExclusiveorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExclusiveorexpression" ):
                return visitor.visitExclusiveorexpression(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 78
        self.enterRecursionRule(localctx, 78, self.RULE_exclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 911
            self.andexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 918
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveorexpression)
                    self.state = 913
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 914
                    self.match(CPP14Parser.Caret)
                    self.state = 915
                    self.andexpression(0) 
                self.state = 920
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InclusiveorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def exclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ExclusiveorexpressionContext,0)


        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_inclusiveorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInclusiveorexpression" ):
                listener.enterInclusiveorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInclusiveorexpression" ):
                listener.exitInclusiveorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInclusiveorexpression" ):
                return visitor.visitInclusiveorexpression(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InclusiveorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 80
        self.enterRecursionRule(localctx, 80, self.RULE_inclusiveorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 922
            self.exclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 929
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,67,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InclusiveorexpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveorexpression)
                    self.state = 924
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 925
                    self.match(CPP14Parser.Or)
                    self.state = 926
                    self.exclusiveorexpression(0) 
                self.state = 931
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,67,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalandexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def inclusiveorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.InclusiveorexpressionContext,0)


        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalandexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalandexpression" ):
                listener.enterLogicalandexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalandexpression" ):
                listener.exitLogicalandexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalandexpression" ):
                return visitor.visitLogicalandexpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalandexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalandexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 82
        self.enterRecursionRule(localctx, 82, self.RULE_logicalandexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 933
            self.inclusiveorexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 943
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,69,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 941
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                        self.state = 935
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 936
                        self.match(CPP14Parser.T__2)
                        self.state = 937
                        self.inclusiveorexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.LogicalandexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalandexpression)
                        self.state = 938
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 939
                        self.match(CPP14Parser.T__3)
                        self.state = 940
                        self.inclusiveorexpression(0)
                        pass

             
                self.state = 945
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,69,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class LogicalorexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalandexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalandexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_logicalorexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalorexpression" ):
                listener.enterLogicalorexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalorexpression" ):
                listener.exitLogicalorexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLogicalorexpression" ):
                return visitor.visitLogicalorexpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalorexpression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.LogicalorexpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_logicalorexpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 947
            self.logicalandexpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 957
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,71,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 955
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,70,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                        self.state = 949
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 950
                        self.match(CPP14Parser.T__4)
                        self.state = 951
                        self.logicalandexpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.LogicalorexpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalorexpression)
                        self.state = 952
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 953
                        self.match(CPP14Parser.T__5)
                        self.state = 954
                        self.logicalandexpression(0)
                        pass

             
                self.state = 959
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,71,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConditionalexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def Question(self):
            return self.getToken(CPP14Parser.Question, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conditionalexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConditionalexpression" ):
                listener.enterConditionalexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConditionalexpression" ):
                listener.exitConditionalexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConditionalexpression" ):
                return visitor.visitConditionalexpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalexpression(self):

        localctx = CPP14Parser.ConditionalexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_conditionalexpression)
        try:
            self.state = 967
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,72,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 960
                self.logicalorexpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 961
                self.logicalorexpression(0)
                self.state = 962
                self.match(CPP14Parser.Question)
                self.state = 963
                self.expression(0)
                self.state = 964
                self.match(CPP14Parser.Colon)
                self.state = 965
                self.assignmentexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def logicalorexpression(self):
            return self.getTypedRuleContext(CPP14Parser.LogicalorexpressionContext,0)


        def assignmentoperator(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentoperatorContext,0)


        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def throwexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ThrowexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentexpression" ):
                listener.enterAssignmentexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentexpression" ):
                listener.exitAssignmentexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentexpression" ):
                return visitor.visitAssignmentexpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentexpression(self):

        localctx = CPP14Parser.AssignmentexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_assignmentexpression)
        try:
            self.state = 975
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 969
                self.conditionalexpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 970
                self.logicalorexpression(0)
                self.state = 971
                self.assignmentoperator()
                self.state = 972
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 974
                self.throwexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CPP14Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def RightShiftAssign(self):
            return self.getToken(CPP14Parser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_assignmentoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentoperator" ):
                listener.enterAssignmentoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentoperator" ):
                listener.exitAssignmentoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssignmentoperator" ):
                return visitor.visitAssignmentoperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentoperator(self):

        localctx = CPP14Parser.AssignmentoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_assignmentoperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 977
            _la = self._input.LA(1)
            if not(((((_la - 100)) & ~0x3f) == 0 and ((1 << (_la - 100)) & ((1 << (CPP14Parser.Assign - 100)) | (1 << (CPP14Parser.PlusAssign - 100)) | (1 << (CPP14Parser.MinusAssign - 100)) | (1 << (CPP14Parser.StarAssign - 100)) | (1 << (CPP14Parser.DivAssign - 100)) | (1 << (CPP14Parser.ModAssign - 100)) | (1 << (CPP14Parser.XorAssign - 100)) | (1 << (CPP14Parser.AndAssign - 100)) | (1 << (CPP14Parser.OrAssign - 100)) | (1 << (CPP14Parser.LeftShiftAssign - 100)) | (1 << (CPP14Parser.RightShiftAssign - 100)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_expression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpression" ):
                listener.enterExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpression" ):
                listener.exitExpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 92
        self.enterRecursionRule(localctx, 92, self.RULE_expression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 980
            self.assignmentexpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 987
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,74,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 982
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 983
                    self.match(CPP14Parser.Comma)
                    self.state = 984
                    self.assignmentexpression() 
                self.state = 989
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,74,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ConstantexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def conditionalexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionalexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_constantexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantexpression" ):
                listener.enterConstantexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantexpression" ):
                listener.exitConstantexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConstantexpression" ):
                return visitor.visitConstantexpression(self)
            else:
                return visitor.visitChildren(self)




    def constantexpression(self):

        localctx = CPP14Parser.ConstantexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_constantexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 990
            self.conditionalexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def labeledstatement(self):
            return self.getTypedRuleContext(CPP14Parser.LabeledstatementContext,0)


        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def selectionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.SelectionstatementContext,0)


        def iterationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.IterationstatementContext,0)


        def jumpstatement(self):
            return self.getTypedRuleContext(CPP14Parser.JumpstatementContext,0)


        def declarationstatement(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationstatementContext,0)


        def tryblock(self):
            return self.getTypedRuleContext(CPP14Parser.TryblockContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatement" ):
                listener.enterStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatement" ):
                listener.exitStatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatement" ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CPP14Parser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1018
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,81,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 992
                self.labeledstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 994
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,75,self._ctx)
                if la_ == 1:
                    self.state = 993
                    self.attributespecifierseq(0)


                self.state = 996
                self.expressionstatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 997
                    self.attributespecifierseq(0)


                self.state = 1000
                self.compoundstatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1002
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1001
                    self.attributespecifierseq(0)


                self.state = 1004
                self.selectionstatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1006
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1005
                    self.attributespecifierseq(0)


                self.state = 1008
                self.iterationstatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1009
                    self.attributespecifierseq(0)


                self.state = 1012
                self.jumpstatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1013
                self.declarationstatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1014
                    self.attributespecifierseq(0)


                self.state = 1017
                self.tryblock()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LabeledstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Case(self):
            return self.getToken(CPP14Parser.Case, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_labeledstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLabeledstatement" ):
                listener.enterLabeledstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLabeledstatement" ):
                listener.exitLabeledstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLabeledstatement" ):
                return visitor.visitLabeledstatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledstatement(self):

        localctx = CPP14Parser.LabeledstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_labeledstatement)
        self._la = 0 # Token type
        try:
            self.state = 1040
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1021
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1020
                    self.attributespecifierseq(0)


                self.state = 1023
                self.match(CPP14Parser.Identifier)
                self.state = 1024
                self.match(CPP14Parser.Colon)
                self.state = 1025
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1027
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1026
                    self.attributespecifierseq(0)


                self.state = 1029
                self.match(CPP14Parser.Case)
                self.state = 1030
                self.constantexpression()
                self.state = 1031
                self.match(CPP14Parser.Colon)
                self.state = 1032
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1035
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1034
                    self.attributespecifierseq(0)


                self.state = 1037
                self.match(CPP14Parser.Default)
                self.state = 1038
                self.match(CPP14Parser.Colon)
                self.state = 1039
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_expressionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionstatement" ):
                listener.enterExpressionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionstatement" ):
                listener.exitExpressionstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpressionstatement" ):
                return visitor.visitExpressionstatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionstatement(self):

        localctx = CPP14Parser.ExpressionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_expressionstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 1042
                self.expression(0)


            self.state = 1045
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_compoundstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundstatement" ):
                listener.enterCompoundstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundstatement" ):
                listener.exitCompoundstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompoundstatement" ):
                return visitor.visitCompoundstatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundstatement(self):

        localctx = CPP14Parser.CompoundstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compoundstatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1047
            self.match(CPP14Parser.LeftBrace)
            self.state = 1049
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Break) | (1 << CPP14Parser.Case) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Continue) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Default) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Do) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.For) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Goto) | (1 << CPP14Parser.If) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Return) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.Switch - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Try - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Using - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.While - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Semi - 128)) | (1 << (CPP14Parser.Ellipsis - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 1048
                self.statementseq(0)


            self.state = 1051
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StatementseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def statementseq(self):
            return self.getTypedRuleContext(CPP14Parser.StatementseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_statementseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatementseq" ):
                listener.enterStatementseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatementseq" ):
                listener.exitStatementseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatementseq" ):
                return visitor.visitStatementseq(self)
            else:
                return visitor.visitChildren(self)



    def statementseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.StatementseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 104
        self.enterRecursionRule(localctx, 104, self.RULE_statementseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1054
            self.statement()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1060
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,88,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.StatementseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_statementseq)
                    self.state = 1056
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1057
                    self.statement() 
                self.state = 1062
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,88,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class SelectionstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def If(self):
            return self.getToken(CPP14Parser.If, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def statement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(CPP14Parser.StatementContext)
            else:
                return self.getTypedRuleContext(CPP14Parser.StatementContext,i)


        def Else(self):
            return self.getToken(CPP14Parser.Else, 0)

        def Switch(self):
            return self.getToken(CPP14Parser.Switch, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_selectionstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectionstatement" ):
                listener.enterSelectionstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectionstatement" ):
                listener.exitSelectionstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSelectionstatement" ):
                return visitor.visitSelectionstatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionstatement(self):

        localctx = CPP14Parser.SelectionstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_selectionstatement)
        try:
            self.state = 1083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,89,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1063
                self.match(CPP14Parser.If)
                self.state = 1064
                self.match(CPP14Parser.LeftParen)
                self.state = 1065
                self.condition()
                self.state = 1066
                self.match(CPP14Parser.RightParen)
                self.state = 1067
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1069
                self.match(CPP14Parser.If)
                self.state = 1070
                self.match(CPP14Parser.LeftParen)
                self.state = 1071
                self.condition()
                self.state = 1072
                self.match(CPP14Parser.RightParen)
                self.state = 1073
                self.statement()
                self.state = 1074
                self.match(CPP14Parser.Else)
                self.state = 1075
                self.statement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1077
                self.match(CPP14Parser.Switch)
                self.state = 1078
                self.match(CPP14Parser.LeftParen)
                self.state = 1079
                self.condition()
                self.state = 1080
                self.match(CPP14Parser.RightParen)
                self.state = 1081
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConditionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_condition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCondition" ):
                listener.enterCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCondition" ):
                listener.exitCondition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCondition" ):
                return visitor.visitCondition(self)
            else:
                return visitor.visitChildren(self)




    def condition(self):

        localctx = CPP14Parser.ConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_condition)
        self._la = 0 # Token type
        try:
            self.state = 1101
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,92,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1085
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1086
                    self.attributespecifierseq(0)


                self.state = 1089
                self.declspecifierseq()
                self.state = 1090
                self.declarator()
                self.state = 1091
                self.match(CPP14Parser.Assign)
                self.state = 1092
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1095
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1094
                    self.attributespecifierseq(0)


                self.state = 1097
                self.declspecifierseq()
                self.state = 1098
                self.declarator()
                self.state = 1099
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def While(self):
            return self.getToken(CPP14Parser.While, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def condition(self):
            return self.getTypedRuleContext(CPP14Parser.ConditionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def statement(self):
            return self.getTypedRuleContext(CPP14Parser.StatementContext,0)


        def Do(self):
            return self.getToken(CPP14Parser.Do, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def For(self):
            return self.getToken(CPP14Parser.For, 0)

        def forinitstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ForinitstatementContext,0)


        def forrangedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangedeclarationContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def forrangeinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.ForrangeinitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_iterationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterationstatement" ):
                listener.enterIterationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterationstatement" ):
                listener.exitIterationstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIterationstatement" ):
                return visitor.visitIterationstatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationstatement(self):

        localctx = CPP14Parser.IterationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_iterationstatement)
        self._la = 0 # Token type
        try:
            self.state = 1138
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,95,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.match(CPP14Parser.While)
                self.state = 1104
                self.match(CPP14Parser.LeftParen)
                self.state = 1105
                self.condition()
                self.state = 1106
                self.match(CPP14Parser.RightParen)
                self.state = 1107
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1109
                self.match(CPP14Parser.Do)
                self.state = 1110
                self.statement()
                self.state = 1111
                self.match(CPP14Parser.While)
                self.state = 1112
                self.match(CPP14Parser.LeftParen)
                self.state = 1113
                self.expression(0)
                self.state = 1114
                self.match(CPP14Parser.RightParen)
                self.state = 1115
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1117
                self.match(CPP14Parser.For)
                self.state = 1118
                self.match(CPP14Parser.LeftParen)
                self.state = 1119
                self.forinitstatement()
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof) | (1 << CPP14Parser.Static))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Thread_local - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typedef - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Virtual - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1120
                    self.condition()


                self.state = 1123
                self.match(CPP14Parser.Semi)
                self.state = 1125
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1124
                    self.expression(0)


                self.state = 1127
                self.match(CPP14Parser.RightParen)
                self.state = 1128
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1130
                self.match(CPP14Parser.For)
                self.state = 1131
                self.match(CPP14Parser.LeftParen)
                self.state = 1132
                self.forrangedeclaration()
                self.state = 1133
                self.match(CPP14Parser.Colon)
                self.state = 1134
                self.forrangeinitializer()
                self.state = 1135
                self.match(CPP14Parser.RightParen)
                self.state = 1136
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForinitstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionstatement(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionstatementContext,0)


        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forinitstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForinitstatement" ):
                listener.enterForinitstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForinitstatement" ):
                listener.exitForinitstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForinitstatement" ):
                return visitor.visitForinitstatement(self)
            else:
                return visitor.visitChildren(self)




    def forinitstatement(self):

        localctx = CPP14Parser.ForinitstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_forinitstatement)
        try:
            self.state = 1142
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1140
                self.expressionstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1141
                self.simpledeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangedeclaration" ):
                listener.enterForrangedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangedeclaration" ):
                listener.exitForrangedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangedeclaration" ):
                return visitor.visitForrangedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def forrangedeclaration(self):

        localctx = CPP14Parser.ForrangedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_forrangedeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1145
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1144
                self.attributespecifierseq(0)


            self.state = 1147
            self.declspecifierseq()
            self.state = 1148
            self.declarator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ForrangeinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_forrangeinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForrangeinitializer" ):
                listener.enterForrangeinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForrangeinitializer" ):
                listener.exitForrangeinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitForrangeinitializer" ):
                return visitor.visitForrangeinitializer(self)
            else:
                return visitor.visitChildren(self)




    def forrangeinitializer(self):

        localctx = CPP14Parser.ForrangeinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_forrangeinitializer)
        try:
            self.state = 1152
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.T__0, CPP14Parser.T__1, CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.False_, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.True_, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1150
                self.expression(0)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1151
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JumpstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Break(self):
            return self.getToken(CPP14Parser.Break, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Continue(self):
            return self.getToken(CPP14Parser.Continue, 0)

        def Return(self):
            return self.getToken(CPP14Parser.Return, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def Goto(self):
            return self.getToken(CPP14Parser.Goto, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_jumpstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJumpstatement" ):
                listener.enterJumpstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJumpstatement" ):
                listener.exitJumpstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJumpstatement" ):
                return visitor.visitJumpstatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpstatement(self):

        localctx = CPP14Parser.JumpstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_jumpstatement)
        self._la = 0 # Token type
        try:
            self.state = 1170
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,100,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1154
                self.match(CPP14Parser.Break)
                self.state = 1155
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1156
                self.match(CPP14Parser.Continue)
                self.state = 1157
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1158
                self.match(CPP14Parser.Return)
                self.state = 1160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1159
                    self.expression(0)


                self.state = 1162
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1163
                self.match(CPP14Parser.Return)
                self.state = 1164
                self.bracedinitlist()
                self.state = 1165
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1167
                self.match(CPP14Parser.Goto)
                self.state = 1168
                self.match(CPP14Parser.Identifier)
                self.state = 1169
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationstatementContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationstatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationstatement" ):
                listener.enterDeclarationstatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationstatement" ):
                listener.exitDeclarationstatement(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationstatement" ):
                return visitor.visitDeclarationstatement(self)
            else:
                return visitor.visitChildren(self)




    def declarationstatement(self):

        localctx = CPP14Parser.DeclarationstatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_declarationstatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1172
            self.blockdeclaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclarationseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarationseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarationseq" ):
                listener.enterDeclarationseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarationseq" ):
                listener.exitDeclarationseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarationseq" ):
                return visitor.visitDeclarationseq(self)
            else:
                return visitor.visitChildren(self)



    def declarationseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.DeclarationseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 122
        self.enterRecursionRule(localctx, 122, self.RULE_declarationseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1175
            self.declaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1181
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,101,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.DeclarationseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_declarationseq)
                    self.state = 1177
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1178
                    self.declaration() 
                self.state = 1183
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,101,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.BlockdeclarationContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def explicitinstantiation(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitinstantiationContext,0)


        def explicitspecialization(self):
            return self.getTypedRuleContext(CPP14Parser.ExplicitspecializationContext,0)


        def linkagespecification(self):
            return self.getTypedRuleContext(CPP14Parser.LinkagespecificationContext,0)


        def namespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacedefinitionContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def attributedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AttributedeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaration" ):
                listener.enterDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaration" ):
                listener.exitDeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaration" ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = CPP14Parser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_declaration)
        try:
            self.state = 1193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1184
                self.blockdeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1185
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1186
                self.templatedeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1187
                self.explicitinstantiation()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1188
                self.explicitspecialization()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1189
                self.linkagespecification()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1190
                self.namespacedefinition()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1191
                self.emptydeclaration()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1192
                self.attributedeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpledeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.SimpledeclarationContext,0)


        def asmdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.AsmdefinitionContext,0)


        def namespacealiasdefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasdefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def usingdirective(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdirectiveContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def opaqueenumdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.OpaqueenumdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_blockdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockdeclaration" ):
                listener.enterBlockdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockdeclaration" ):
                listener.exitBlockdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBlockdeclaration" ):
                return visitor.visitBlockdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def blockdeclaration(self):

        localctx = CPP14Parser.BlockdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_blockdeclaration)
        try:
            self.state = 1203
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1195
                self.simpledeclaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1196
                self.asmdefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1197
                self.namespacealiasdefinition()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1198
                self.usingdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1199
                self.usingdirective()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1200
                self.static_assertdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1201
                self.aliasdeclaration()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1202
                self.opaqueenumdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AliasdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_aliasdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAliasdeclaration" ):
                listener.enterAliasdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAliasdeclaration" ):
                listener.exitAliasdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAliasdeclaration" ):
                return visitor.visitAliasdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def aliasdeclaration(self):

        localctx = CPP14Parser.AliasdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_aliasdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1205
            self.match(CPP14Parser.Using)
            self.state = 1206
            self.match(CPP14Parser.Identifier)
            self.state = 1208
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1207
                self.attributespecifierseq(0)


            self.state = 1210
            self.match(CPP14Parser.Assign)
            self.state = 1211
            self.thetypeid()
            self.state = 1212
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpledeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpledeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpledeclaration" ):
                listener.enterSimpledeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpledeclaration" ):
                listener.exitSimpledeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpledeclaration" ):
                return visitor.visitSimpledeclaration(self)
            else:
                return visitor.visitChildren(self)




    def simpledeclaration(self):

        localctx = CPP14Parser.SimpledeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_simpledeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1228
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.T__2, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Struct, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1215
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                if la_ == 1:
                    self.state = 1214
                    self.declspecifierseq()


                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (1 << (CPP14Parser.Doublecolon - 84)) | (1 << (CPP14Parser.Ellipsis - 84)) | (1 << (CPP14Parser.Identifier - 84)))) != 0):
                    self.state = 1217
                    self.initdeclaratorlist(0)


                self.state = 1220
                self.match(CPP14Parser.Semi)
                pass
            elif token in [CPP14Parser.Alignas, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1221
                self.attributespecifierseq(0)
                self.state = 1223
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
                if la_ == 1:
                    self.state = 1222
                    self.declspecifierseq()


                self.state = 1225
                self.initdeclaratorlist(0)
                self.state = 1226
                self.match(CPP14Parser.Semi)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class Static_assertdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Static_assert(self):
            return self.getToken(CPP14Parser.Static_assert, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_static_assertdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStatic_assertdeclaration" ):
                listener.enterStatic_assertdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStatic_assertdeclaration" ):
                listener.exitStatic_assertdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStatic_assertdeclaration" ):
                return visitor.visitStatic_assertdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def static_assertdeclaration(self):

        localctx = CPP14Parser.Static_assertdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_static_assertdeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1230
            self.match(CPP14Parser.Static_assert)
            self.state = 1231
            self.match(CPP14Parser.LeftParen)
            self.state = 1232
            self.constantexpression()
            self.state = 1233
            self.match(CPP14Parser.Comma)
            self.state = 1234
            self.match(CPP14Parser.Stringliteral)
            self.state = 1235
            self.match(CPP14Parser.RightParen)
            self.state = 1236
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptydeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_emptydeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptydeclaration" ):
                listener.enterEmptydeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptydeclaration" ):
                listener.exitEmptydeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEmptydeclaration" ):
                return visitor.visitEmptydeclaration(self)
            else:
                return visitor.visitChildren(self)




    def emptydeclaration(self):

        localctx = CPP14Parser.EmptydeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_emptydeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1238
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributedeclaration" ):
                listener.enterAttributedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributedeclaration" ):
                listener.exitAttributedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributedeclaration" ):
                return visitor.visitAttributedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def attributedeclaration(self):

        localctx = CPP14Parser.AttributedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_attributedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1240
            self.attributespecifierseq(0)
            self.state = 1241
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def storageclassspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.StorageclassspecifierContext,0)


        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def functionspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionspecifierContext,0)


        def Friend(self):
            return self.getToken(CPP14Parser.Friend, 0)

        def Typedef(self):
            return self.getToken(CPP14Parser.Typedef, 0)

        def Constexpr(self):
            return self.getToken(CPP14Parser.Constexpr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifier" ):
                listener.enterDeclspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifier" ):
                listener.exitDeclspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifier" ):
                return visitor.visitDeclspecifier(self)
            else:
                return visitor.visitChildren(self)




    def declspecifier(self):

        localctx = CPP14Parser.DeclspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_declspecifier)
        try:
            self.state = 1249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Extern, CPP14Parser.Mutable, CPP14Parser.Register, CPP14Parser.Static, CPP14Parser.Thread_local]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1243
                self.storageclassspecifier()
                pass
            elif token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Struct, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1244
                self.typespecifier()
                pass
            elif token in [CPP14Parser.Explicit, CPP14Parser.Inline, CPP14Parser.Virtual]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1245
                self.functionspecifier()
                pass
            elif token in [CPP14Parser.Friend]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1246
                self.match(CPP14Parser.Friend)
                pass
            elif token in [CPP14Parser.Typedef]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1247
                self.match(CPP14Parser.Typedef)
                pass
            elif token in [CPP14Parser.Constexpr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1248
                self.match(CPP14Parser.Constexpr)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclspecifierseq" ):
                listener.enterDeclspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclspecifierseq" ):
                listener.exitDeclspecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclspecifierseq" ):
                return visitor.visitDeclspecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def declspecifierseq(self):

        localctx = CPP14Parser.DeclspecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_declspecifierseq)
        try:
            self.state = 1258
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1251
                self.declspecifier()
                self.state = 1253
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,110,self._ctx)
                if la_ == 1:
                    self.state = 1252
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1255
                self.declspecifier()
                self.state = 1256
                self.declspecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StorageclassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Register(self):
            return self.getToken(CPP14Parser.Register, 0)

        def Static(self):
            return self.getToken(CPP14Parser.Static, 0)

        def Thread_local(self):
            return self.getToken(CPP14Parser.Thread_local, 0)

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Mutable(self):
            return self.getToken(CPP14Parser.Mutable, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_storageclassspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageclassspecifier" ):
                listener.enterStorageclassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageclassspecifier" ):
                listener.exitStorageclassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStorageclassspecifier" ):
                return visitor.visitStorageclassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageclassspecifier(self):

        localctx = CPP14Parser.StorageclassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_storageclassspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            _la = self._input.LA(1)
            if not(((((_la - 35)) & ~0x3f) == 0 and ((1 << (_la - 35)) & ((1 << (CPP14Parser.Extern - 35)) | (1 << (CPP14Parser.Mutable - 35)) | (1 << (CPP14Parser.Register - 35)) | (1 << (CPP14Parser.Static - 35)) | (1 << (CPP14Parser.Thread_local - 35)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def Explicit(self):
            return self.getToken(CPP14Parser.Explicit, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionspecifier" ):
                listener.enterFunctionspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionspecifier" ):
                listener.exitFunctionspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionspecifier" ):
                return visitor.visitFunctionspecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionspecifier(self):

        localctx = CPP14Parser.FunctionspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_functionspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1262
            _la = self._input.LA(1)
            if not(((((_la - 33)) & ~0x3f) == 0 and ((1 << (_la - 33)) & ((1 << (CPP14Parser.Explicit - 33)) | (1 << (CPP14Parser.Inline - 33)) | (1 << (CPP14Parser.Virtual - 33)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypedefnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typedefname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypedefname" ):
                listener.enterTypedefname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypedefname" ):
                listener.exitTypedefname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypedefname" ):
                return visitor.visitTypedefname(self)
            else:
                return visitor.visitChildren(self)




    def typedefname(self):

        localctx = CPP14Parser.TypedefnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_typedefname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1264
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def classspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassspecifierContext,0)


        def enumspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.EnumspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifier" ):
                listener.enterTypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifier" ):
                listener.exitTypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifier" ):
                return visitor.visitTypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def typespecifier(self):

        localctx = CPP14Parser.TypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_typespecifier)
        try:
            self.state = 1269
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,112,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1266
                self.trailingtypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1267
                self.classspecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1268
                self.enumspecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletypespecifierContext,0)


        def elaboratedtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ElaboratedtypespecifierContext,0)


        def typenamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypenamespecifierContext,0)


        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifier" ):
                listener.enterTrailingtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifier" ):
                listener.exitTrailingtypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifier" ):
                return visitor.visitTrailingtypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def trailingtypespecifier(self):

        localctx = CPP14Parser.TrailingtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_trailingtypespecifier)
        try:
            self.state = 1275
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1271
                self.simpletypespecifier()
                pass
            elif token in [CPP14Parser.Class, CPP14Parser.Enum, CPP14Parser.Struct, CPP14Parser.Union]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1272
                self.elaboratedtypespecifier()
                pass
            elif token in [CPP14Parser.Typename_]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1273
                self.typenamespecifier()
                pass
            elif token in [CPP14Parser.Const, CPP14Parser.Volatile]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1274
                self.cvqualifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypespecifierseq" ):
                listener.enterTypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypespecifierseq" ):
                listener.exitTypespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypespecifierseq" ):
                return visitor.visitTypespecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def typespecifierseq(self):

        localctx = CPP14Parser.TypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_typespecifierseq)
        try:
            self.state = 1284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,115,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1277
                self.typespecifier()
                self.state = 1279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,114,self._ctx)
                if la_ == 1:
                    self.state = 1278
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1281
                self.typespecifier()
                self.state = 1282
                self.typespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingtypespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def trailingtypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingtypespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingtypespecifierseq" ):
                listener.enterTrailingtypespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingtypespecifierseq" ):
                listener.exitTrailingtypespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingtypespecifierseq" ):
                return visitor.visitTrailingtypespecifierseq(self)
            else:
                return visitor.visitChildren(self)




    def trailingtypespecifierseq(self):

        localctx = CPP14Parser.TrailingtypespecifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_trailingtypespecifierseq)
        try:
            self.state = 1293
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,117,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1286
                self.trailingtypespecifier()
                self.state = 1288
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,116,self._ctx)
                if la_ == 1:
                    self.state = 1287
                    self.attributespecifierseq(0)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1290
                self.trailingtypespecifier()
                self.state = 1291
                self.trailingtypespecifierseq()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypename(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Char(self):
            return self.getToken(CPP14Parser.Char, 0)

        def Char16(self):
            return self.getToken(CPP14Parser.Char16, 0)

        def Char32(self):
            return self.getToken(CPP14Parser.Char32, 0)

        def Wchar(self):
            return self.getToken(CPP14Parser.Wchar, 0)

        def Bool(self):
            return self.getToken(CPP14Parser.Bool, 0)

        def Short(self):
            return self.getToken(CPP14Parser.Short, 0)

        def Int(self):
            return self.getToken(CPP14Parser.Int, 0)

        def Long(self):
            return self.getToken(CPP14Parser.Long, 0)

        def Signed(self):
            return self.getToken(CPP14Parser.Signed, 0)

        def Unsigned(self):
            return self.getToken(CPP14Parser.Unsigned, 0)

        def Float(self):
            return self.getToken(CPP14Parser.Float, 0)

        def Double(self):
            return self.getToken(CPP14Parser.Double, 0)

        def Void(self):
            return self.getToken(CPP14Parser.Void, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletypespecifier" ):
                listener.enterSimpletypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletypespecifier" ):
                listener.exitSimpletypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletypespecifier" ):
                return visitor.visitSimpletypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def simpletypespecifier(self):

        localctx = CPP14Parser.SimpletypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_simpletypespecifier)
        try:
            self.state = 1318
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,118,self._ctx)
                if la_ == 1:
                    self.state = 1295
                    self.nestednamespecifier(0)


                self.state = 1298
                self.thetypename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1299
                self.nestednamespecifier(0)
                self.state = 1300
                self.match(CPP14Parser.Template)
                self.state = 1301
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1303
                self.match(CPP14Parser.Char)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1304
                self.match(CPP14Parser.Char16)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1305
                self.match(CPP14Parser.Char32)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1306
                self.match(CPP14Parser.Wchar)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1307
                self.match(CPP14Parser.Bool)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 1308
                self.match(CPP14Parser.Short)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 1309
                self.match(CPP14Parser.Int)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 1310
                self.match(CPP14Parser.Long)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 1311
                self.match(CPP14Parser.Signed)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 1312
                self.match(CPP14Parser.Unsigned)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 1313
                self.match(CPP14Parser.Float)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 1314
                self.match(CPP14Parser.Double)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 1315
                self.match(CPP14Parser.Void)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 1316
                self.match(CPP14Parser.Auto)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 1317
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def enumname(self):
            return self.getTypedRuleContext(CPP14Parser.EnumnameContext,0)


        def typedefname(self):
            return self.getTypedRuleContext(CPP14Parser.TypedefnameContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypename" ):
                listener.enterThetypename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypename" ):
                listener.exitThetypename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypename" ):
                return visitor.visitThetypename(self)
            else:
                return visitor.visitChildren(self)




    def thetypename(self):

        localctx = CPP14Parser.ThetypenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_thetypename)
        try:
            self.state = 1324
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1320
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1321
                self.enumname()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1322
                self.typedefname()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1323
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecltypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Decltype(self):
            return self.getToken(CPP14Parser.Decltype, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expression(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Auto(self):
            return self.getToken(CPP14Parser.Auto, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_decltypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecltypespecifier" ):
                listener.enterDecltypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecltypespecifier" ):
                listener.exitDecltypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDecltypespecifier" ):
                return visitor.visitDecltypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def decltypespecifier(self):

        localctx = CPP14Parser.DecltypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_decltypespecifier)
        try:
            self.state = 1335
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,121,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1326
                self.match(CPP14Parser.Decltype)
                self.state = 1327
                self.match(CPP14Parser.LeftParen)
                self.state = 1328
                self.expression(0)
                self.state = 1329
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1331
                self.match(CPP14Parser.Decltype)
                self.state = 1332
                self.match(CPP14Parser.LeftParen)
                self.state = 1333
                self.match(CPP14Parser.Auto)
                self.state = 1334
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElaboratedtypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_elaboratedtypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElaboratedtypespecifier" ):
                listener.enterElaboratedtypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElaboratedtypespecifier" ):
                listener.exitElaboratedtypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitElaboratedtypespecifier" ):
                return visitor.visitElaboratedtypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def elaboratedtypespecifier(self):

        localctx = CPP14Parser.ElaboratedtypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_elaboratedtypespecifier)
        self._la = 0 # Token type
        try:
            self.state = 1361
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,126,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1337
                self.classkey()
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1338
                    self.attributespecifierseq(0)


                self.state = 1342
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
                if la_ == 1:
                    self.state = 1341
                    self.nestednamespecifier(0)


                self.state = 1344
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1346
                self.classkey()
                self.state = 1347
                self.simpletemplateid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1349
                self.classkey()
                self.state = 1350
                self.nestednamespecifier(0)
                self.state = 1352
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 1351
                    self.match(CPP14Parser.Template)


                self.state = 1354
                self.simpletemplateid()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1356
                self.match(CPP14Parser.Enum)
                self.state = 1358
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1357
                    self.nestednamespecifier(0)


                self.state = 1360
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumname" ):
                listener.enterEnumname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumname" ):
                listener.exitEnumname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumname" ):
                return visitor.visitEnumname(self)
            else:
                return visitor.visitChildren(self)




    def enumname(self):

        localctx = CPP14Parser.EnumnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_enumname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1363
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumhead(self):
            return self.getTypedRuleContext(CPP14Parser.EnumheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumspecifier" ):
                listener.enterEnumspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumspecifier" ):
                listener.exitEnumspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumspecifier" ):
                return visitor.visitEnumspecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumspecifier(self):

        localctx = CPP14Parser.EnumspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_enumspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,128,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1365
                self.enumhead()
                self.state = 1366
                self.match(CPP14Parser.LeftBrace)
                self.state = 1368
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1367
                    self.enumeratorlist(0)


                self.state = 1370
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1372
                self.enumhead()
                self.state = 1373
                self.match(CPP14Parser.LeftBrace)
                self.state = 1374
                self.enumeratorlist(0)
                self.state = 1375
                self.match(CPP14Parser.Comma)
                self.state = 1376
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumheadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumhead" ):
                listener.enterEnumhead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumhead" ):
                listener.exitEnumhead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumhead" ):
                return visitor.visitEnumhead(self)
            else:
                return visitor.visitChildren(self)




    def enumhead(self):

        localctx = CPP14Parser.EnumheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_enumhead)
        self._la = 0 # Token type
        try:
            self.state = 1399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1380
                self.enumkey()
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1381
                    self.attributespecifierseq(0)


                self.state = 1385
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 1384
                    self.match(CPP14Parser.Identifier)


                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1387
                    self.enumbase()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1390
                self.enumkey()
                self.state = 1392
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1391
                    self.attributespecifierseq(0)


                self.state = 1394
                self.nestednamespecifier(0)
                self.state = 1395
                self.match(CPP14Parser.Identifier)
                self.state = 1397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1396
                    self.enumbase()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OpaqueenumdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumkey(self):
            return self.getTypedRuleContext(CPP14Parser.EnumkeyContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def enumbase(self):
            return self.getTypedRuleContext(CPP14Parser.EnumbaseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_opaqueenumdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpaqueenumdeclaration" ):
                listener.enterOpaqueenumdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpaqueenumdeclaration" ):
                listener.exitOpaqueenumdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOpaqueenumdeclaration" ):
                return visitor.visitOpaqueenumdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def opaqueenumdeclaration(self):

        localctx = CPP14Parser.OpaqueenumdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_opaqueenumdeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1401
            self.enumkey()
            self.state = 1403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1402
                self.attributespecifierseq(0)


            self.state = 1405
            self.match(CPP14Parser.Identifier)
            self.state = 1407
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 1406
                self.enumbase()


            self.state = 1409
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumkeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Enum(self):
            return self.getToken(CPP14Parser.Enum, 0)

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumkey" ):
                listener.enterEnumkey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumkey" ):
                listener.exitEnumkey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumkey" ):
                return visitor.visitEnumkey(self)
            else:
                return visitor.visitChildren(self)




    def enumkey(self):

        localctx = CPP14Parser.EnumkeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_enumkey)
        try:
            self.state = 1416
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1411
                self.match(CPP14Parser.Enum)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1412
                self.match(CPP14Parser.Enum)
                self.state = 1413
                self.match(CPP14Parser.Class)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1414
                self.match(CPP14Parser.Enum)
                self.state = 1415
                self.match(CPP14Parser.Struct)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumbaseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumbase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumbase" ):
                listener.enterEnumbase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumbase" ):
                listener.exitEnumbase(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumbase" ):
                return visitor.visitEnumbase(self)
            else:
                return visitor.visitChildren(self)




    def enumbase(self):

        localctx = CPP14Parser.EnumbaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_enumbase)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1418
            self.match(CPP14Parser.Colon)
            self.state = 1419
            self.typespecifierseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumeratordefinition(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratordefinitionContext,0)


        def enumeratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratorlist" ):
                listener.enterEnumeratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratorlist" ):
                listener.exitEnumeratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratorlist" ):
                return visitor.visitEnumeratorlist(self)
            else:
                return visitor.visitChildren(self)



    def enumeratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.EnumeratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 176
        self.enterRecursionRule(localctx, 176, self.RULE_enumeratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1422
            self.enumeratordefinition()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1429
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.EnumeratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_enumeratorlist)
                    self.state = 1424
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1425
                    self.match(CPP14Parser.Comma)
                    self.state = 1426
                    self.enumeratordefinition() 
                self.state = 1431
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class EnumeratordefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self):
            return self.getTypedRuleContext(CPP14Parser.EnumeratorContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_enumeratordefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumeratordefinition" ):
                listener.enterEnumeratordefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumeratordefinition" ):
                listener.exitEnumeratordefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumeratordefinition" ):
                return visitor.visitEnumeratordefinition(self)
            else:
                return visitor.visitChildren(self)




    def enumeratordefinition(self):

        localctx = CPP14Parser.EnumeratordefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_enumeratordefinition)
        try:
            self.state = 1437
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,139,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1432
                self.enumerator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1433
                self.enumerator()
                self.state = 1434
                self.match(CPP14Parser.Assign)
                self.state = 1435
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_enumerator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnumerator" ):
                listener.enterEnumerator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnumerator" ):
                listener.exitEnumerator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEnumerator" ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CPP14Parser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_enumerator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1439
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def namespacealias(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacealiasContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacename" ):
                listener.enterNamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacename" ):
                listener.exitNamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacename" ):
                return visitor.visitNamespacename(self)
            else:
                return visitor.visitChildren(self)




    def namespacename(self):

        localctx = CPP14Parser.NamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_namespacename)
        try:
            self.state = 1443
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,140,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1441
                self.originalnamespacename()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1442
                self.namespacealias()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacename" ):
                listener.enterOriginalnamespacename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacename" ):
                listener.exitOriginalnamespacename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacename" ):
                return visitor.visitOriginalnamespacename(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacename(self):

        localctx = CPP14Parser.OriginalnamespacenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_originalnamespacename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1445
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.NamednamespacedefinitionContext,0)


        def unnamednamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.UnnamednamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacedefinition" ):
                listener.enterNamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacedefinition" ):
                listener.exitNamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacedefinition" ):
                return visitor.visitNamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacedefinition(self):

        localctx = CPP14Parser.NamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_namespacedefinition)
        try:
            self.state = 1449
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,141,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1447
                self.namednamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1448
                self.unnamednamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def originalnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacedefinitionContext,0)


        def extensionnamespacedefinition(self):
            return self.getTypedRuleContext(CPP14Parser.ExtensionnamespacedefinitionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamednamespacedefinition" ):
                listener.enterNamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamednamespacedefinition" ):
                listener.exitNamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamednamespacedefinition" ):
                return visitor.visitNamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def namednamespacedefinition(self):

        localctx = CPP14Parser.NamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_namednamespacedefinition)
        try:
            self.state = 1453
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,142,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1451
                self.originalnamespacedefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1452
                self.extensionnamespacedefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OriginalnamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_originalnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOriginalnamespacedefinition" ):
                listener.enterOriginalnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOriginalnamespacedefinition" ):
                listener.exitOriginalnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOriginalnamespacedefinition" ):
                return visitor.visitOriginalnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def originalnamespacedefinition(self):

        localctx = CPP14Parser.OriginalnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_originalnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1455
                self.match(CPP14Parser.Inline)


            self.state = 1458
            self.match(CPP14Parser.Namespace)
            self.state = 1459
            self.match(CPP14Parser.Identifier)
            self.state = 1460
            self.match(CPP14Parser.LeftBrace)
            self.state = 1461
            self.namespacebody()
            self.state = 1462
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExtensionnamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def originalnamespacename(self):
            return self.getTypedRuleContext(CPP14Parser.OriginalnamespacenameContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_extensionnamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtensionnamespacedefinition" ):
                listener.enterExtensionnamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtensionnamespacedefinition" ):
                listener.exitExtensionnamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExtensionnamespacedefinition" ):
                return visitor.visitExtensionnamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def extensionnamespacedefinition(self):

        localctx = CPP14Parser.ExtensionnamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_extensionnamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1464
                self.match(CPP14Parser.Inline)


            self.state = 1467
            self.match(CPP14Parser.Namespace)
            self.state = 1468
            self.originalnamespacename()
            self.state = 1469
            self.match(CPP14Parser.LeftBrace)
            self.state = 1470
            self.namespacebody()
            self.state = 1471
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnnamednamespacedefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def namespacebody(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacebodyContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Inline(self):
            return self.getToken(CPP14Parser.Inline, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_unnamednamespacedefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnnamednamespacedefinition" ):
                listener.enterUnnamednamespacedefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnnamednamespacedefinition" ):
                listener.exitUnnamednamespacedefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUnnamednamespacedefinition" ):
                return visitor.visitUnnamednamespacedefinition(self)
            else:
                return visitor.visitChildren(self)




    def unnamednamespacedefinition(self):

        localctx = CPP14Parser.UnnamednamespacedefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_unnamednamespacedefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Inline:
                self.state = 1473
                self.match(CPP14Parser.Inline)


            self.state = 1476
            self.match(CPP14Parser.Namespace)
            self.state = 1477
            self.match(CPP14Parser.LeftBrace)
            self.state = 1478
            self.namespacebody()
            self.state = 1479
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacebodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacebody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacebody" ):
                listener.enterNamespacebody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacebody" ):
                listener.exitNamespacebody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacebody" ):
                return visitor.visitNamespacebody(self)
            else:
                return visitor.visitChildren(self)




    def namespacebody(self):

        localctx = CPP14Parser.NamespacebodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_namespacebody)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Template - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Using - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14Parser.Semi - 129)) | (1 << (CPP14Parser.Ellipsis - 129)) | (1 << (CPP14Parser.Identifier - 129)))) != 0):
                self.state = 1481
                self.declarationseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealias

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealias" ):
                listener.enterNamespacealias(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealias" ):
                listener.exitNamespacealias(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealias" ):
                return visitor.visitNamespacealias(self)
            else:
                return visitor.visitChildren(self)




    def namespacealias(self):

        localctx = CPP14Parser.NamespacealiasContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_namespacealias)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1484
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NamespacealiasdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def qualifiednamespacespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.QualifiednamespacespecifierContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_namespacealiasdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNamespacealiasdefinition" ):
                listener.enterNamespacealiasdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNamespacealiasdefinition" ):
                listener.exitNamespacealiasdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNamespacealiasdefinition" ):
                return visitor.visitNamespacealiasdefinition(self)
            else:
                return visitor.visitChildren(self)




    def namespacealiasdefinition(self):

        localctx = CPP14Parser.NamespacealiasdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_namespacealiasdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1486
            self.match(CPP14Parser.Namespace)
            self.state = 1487
            self.match(CPP14Parser.Identifier)
            self.state = 1488
            self.match(CPP14Parser.Assign)
            self.state = 1489
            self.qualifiednamespacespecifier()
            self.state = 1490
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QualifiednamespacespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_qualifiednamespacespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQualifiednamespacespecifier" ):
                listener.enterQualifiednamespacespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQualifiednamespacespecifier" ):
                listener.exitQualifiednamespacespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQualifiednamespacespecifier" ):
                return visitor.visitQualifiednamespacespecifier(self)
            else:
                return visitor.visitChildren(self)




    def qualifiednamespacespecifier(self):

        localctx = CPP14Parser.QualifiednamespacespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_qualifiednamespacespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1493
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,147,self._ctx)
            if la_ == 1:
                self.state = 1492
                self.nestednamespecifier(0)


            self.state = 1495
            self.namespacename()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def unqualifiedid(self):
            return self.getTypedRuleContext(CPP14Parser.UnqualifiedidContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Typename_(self):
            return self.getToken(CPP14Parser.Typename_, 0)

        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdeclaration" ):
                listener.enterUsingdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdeclaration" ):
                listener.exitUsingdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdeclaration" ):
                return visitor.visitUsingdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def usingdeclaration(self):

        localctx = CPP14Parser.UsingdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_usingdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1510
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1497
                self.match(CPP14Parser.Using)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Typename_:
                    self.state = 1498
                    self.match(CPP14Parser.Typename_)


                self.state = 1501
                self.nestednamespecifier(0)
                self.state = 1502
                self.unqualifiedid()
                self.state = 1503
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1505
                self.match(CPP14Parser.Using)
                self.state = 1506
                self.match(CPP14Parser.Doublecolon)
                self.state = 1507
                self.unqualifiedid()
                self.state = 1508
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UsingdirectiveContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Using(self):
            return self.getToken(CPP14Parser.Using, 0)

        def Namespace(self):
            return self.getToken(CPP14Parser.Namespace, 0)

        def namespacename(self):
            return self.getTypedRuleContext(CPP14Parser.NamespacenameContext,0)


        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_usingdirective

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUsingdirective" ):
                listener.enterUsingdirective(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUsingdirective" ):
                listener.exitUsingdirective(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUsingdirective" ):
                return visitor.visitUsingdirective(self)
            else:
                return visitor.visitChildren(self)




    def usingdirective(self):

        localctx = CPP14Parser.UsingdirectiveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_usingdirective)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1512
                self.attributespecifierseq(0)


            self.state = 1515
            self.match(CPP14Parser.Using)
            self.state = 1516
            self.match(CPP14Parser.Namespace)
            self.state = 1518
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,151,self._ctx)
            if la_ == 1:
                self.state = 1517
                self.nestednamespecifier(0)


            self.state = 1520
            self.namespacename()
            self.state = 1521
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AsmdefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Asm(self):
            return self.getToken(CPP14Parser.Asm, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_asmdefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAsmdefinition" ):
                listener.enterAsmdefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAsmdefinition" ):
                listener.exitAsmdefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAsmdefinition" ):
                return visitor.visitAsmdefinition(self)
            else:
                return visitor.visitChildren(self)




    def asmdefinition(self):

        localctx = CPP14Parser.AsmdefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_asmdefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1523
            self.match(CPP14Parser.Asm)
            self.state = 1524
            self.match(CPP14Parser.LeftParen)
            self.state = 1525
            self.match(CPP14Parser.Stringliteral)
            self.state = 1526
            self.match(CPP14Parser.RightParen)
            self.state = 1527
            self.match(CPP14Parser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LinkagespecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def declarationseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationseqContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_linkagespecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLinkagespecification" ):
                listener.enterLinkagespecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLinkagespecification" ):
                listener.exitLinkagespecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLinkagespecification" ):
                return visitor.visitLinkagespecification(self)
            else:
                return visitor.visitChildren(self)




    def linkagespecification(self):

        localctx = CPP14Parser.LinkagespecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_linkagespecification)
        self._la = 0 # Token type
        try:
            self.state = 1539
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,153,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1529
                self.match(CPP14Parser.Extern)
                self.state = 1530
                self.match(CPP14Parser.Stringliteral)
                self.state = 1531
                self.match(CPP14Parser.LeftBrace)
                self.state = 1533
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Asm) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Namespace) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Template - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Using - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14Parser.Semi - 129)) | (1 << (CPP14Parser.Ellipsis - 129)) | (1 << (CPP14Parser.Identifier - 129)))) != 0):
                    self.state = 1532
                    self.declarationseq(0)


                self.state = 1535
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1536
                self.match(CPP14Parser.Extern)
                self.state = 1537
                self.match(CPP14Parser.Stringliteral)
                self.state = 1538
                self.declaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributespecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifierseq" ):
                listener.enterAttributespecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifierseq" ):
                listener.exitAttributespecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifierseq" ):
                return visitor.visitAttributespecifierseq(self)
            else:
                return visitor.visitChildren(self)



    def attributespecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributespecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 212
        self.enterRecursionRule(localctx, 212, self.RULE_attributespecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1542
            self.attributespecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1548
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,154,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.AttributespecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_attributespecifierseq)
                    self.state = 1544
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1545
                    self.attributespecifier() 
                self.state = 1550
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,154,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBracket)
            else:
                return self.getToken(CPP14Parser.LeftBracket, i)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBracket)
            else:
                return self.getToken(CPP14Parser.RightBracket, i)

        def alignmentspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AlignmentspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributespecifier" ):
                listener.enterAttributespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributespecifier" ):
                listener.exitAttributespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributespecifier" ):
                return visitor.visitAttributespecifier(self)
            else:
                return visitor.visitChildren(self)




    def attributespecifier(self):

        localctx = CPP14Parser.AttributespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_attributespecifier)
        try:
            self.state = 1558
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1551
                self.match(CPP14Parser.LeftBracket)
                self.state = 1552
                self.match(CPP14Parser.LeftBracket)
                self.state = 1553
                self.attributelist(0)
                self.state = 1554
                self.match(CPP14Parser.RightBracket)
                self.state = 1555
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.Alignas]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1557
                self.alignmentspecifier()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlignmentspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Alignas(self):
            return self.getToken(CPP14Parser.Alignas, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_alignmentspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlignmentspecifier" ):
                listener.enterAlignmentspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlignmentspecifier" ):
                listener.exitAlignmentspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAlignmentspecifier" ):
                return visitor.visitAlignmentspecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentspecifier(self):

        localctx = CPP14Parser.AlignmentspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_alignmentspecifier)
        self._la = 0 # Token type
        try:
            self.state = 1576
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,158,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1560
                self.match(CPP14Parser.Alignas)
                self.state = 1561
                self.match(CPP14Parser.LeftParen)
                self.state = 1562
                self.thetypeid()
                self.state = 1564
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1563
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1566
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1568
                self.match(CPP14Parser.Alignas)
                self.state = 1569
                self.match(CPP14Parser.LeftParen)
                self.state = 1570
                self.constantexpression()
                self.state = 1572
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1571
                    self.match(CPP14Parser.Ellipsis)


                self.state = 1574
                self.match(CPP14Parser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributelistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attribute(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def attributelist(self):
            return self.getTypedRuleContext(CPP14Parser.AttributelistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributelist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributelist" ):
                listener.enterAttributelist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributelist" ):
                listener.exitAttributelist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributelist" ):
                return visitor.visitAttributelist(self)
            else:
                return visitor.visitChildren(self)



    def attributelist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.AttributelistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 218
        self.enterRecursionRule(localctx, 218, self.RULE_attributelist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1585
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,160,self._ctx)
            if la_ == 1:
                self.state = 1580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,159,self._ctx)
                if la_ == 1:
                    self.state = 1579
                    self.attribute()


                pass

            elif la_ == 2:
                self.state = 1582
                self.attribute()
                self.state = 1583
                self.match(CPP14Parser.Ellipsis)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1599
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,163,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1597
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,162,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1587
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1588
                        self.match(CPP14Parser.Comma)
                        self.state = 1590
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,161,self._ctx)
                        if la_ == 1:
                            self.state = 1589
                            self.attribute()


                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.AttributelistContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_attributelist)
                        self.state = 1592
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 1593
                        self.match(CPP14Parser.Comma)
                        self.state = 1594
                        self.attribute()
                        self.state = 1595
                        self.match(CPP14Parser.Ellipsis)
                        pass

             
                self.state = 1601
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,163,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AttributeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributetoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributetokenContext,0)


        def attributeargumentclause(self):
            return self.getTypedRuleContext(CPP14Parser.AttributeargumentclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attribute

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttribute" ):
                listener.enterAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttribute" ):
                listener.exitAttribute(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttribute" ):
                return visitor.visitAttribute(self)
            else:
                return visitor.visitChildren(self)




    def attribute(self):

        localctx = CPP14Parser.AttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_attribute)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1602
            self.attributetoken()
            self.state = 1604
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,164,self._ctx)
            if la_ == 1:
                self.state = 1603
                self.attributeargumentclause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributetokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributescopedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.AttributescopedtokenContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_attributetoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributetoken" ):
                listener.enterAttributetoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributetoken" ):
                listener.exitAttributetoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributetoken" ):
                return visitor.visitAttributetoken(self)
            else:
                return visitor.visitChildren(self)




    def attributetoken(self):

        localctx = CPP14Parser.AttributetokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_attributetoken)
        try:
            self.state = 1608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,165,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1606
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1607
                self.attributescopedtoken()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributescopedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def attributenamespace(self):
            return self.getTypedRuleContext(CPP14Parser.AttributenamespaceContext,0)


        def Doublecolon(self):
            return self.getToken(CPP14Parser.Doublecolon, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributescopedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributescopedtoken" ):
                listener.enterAttributescopedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributescopedtoken" ):
                listener.exitAttributescopedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributescopedtoken" ):
                return visitor.visitAttributescopedtoken(self)
            else:
                return visitor.visitChildren(self)




    def attributescopedtoken(self):

        localctx = CPP14Parser.AttributescopedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_attributescopedtoken)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1610
            self.attributenamespace()
            self.state = 1611
            self.match(CPP14Parser.Doublecolon)
            self.state = 1612
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributenamespaceContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributenamespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributenamespace" ):
                listener.enterAttributenamespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributenamespace" ):
                listener.exitAttributenamespace(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributenamespace" ):
                return visitor.visitAttributenamespace(self)
            else:
                return visitor.visitChildren(self)




    def attributenamespace(self):

        localctx = CPP14Parser.AttributenamespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_attributenamespace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1614
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AttributeargumentclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_attributeargumentclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAttributeargumentclause" ):
                listener.enterAttributeargumentclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAttributeargumentclause" ):
                listener.exitAttributeargumentclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAttributeargumentclause" ):
                return visitor.visitAttributeargumentclause(self)
            else:
                return visitor.visitChildren(self)




    def attributeargumentclause(self):

        localctx = CPP14Parser.AttributeargumentclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_attributeargumentclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1616
            self.match(CPP14Parser.LeftParen)
            self.state = 1617
            self.balancedtokenseq(0)
            self.state = 1618
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BalancedtokenseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def balancedtoken(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenContext,0)


        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtokenseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtokenseq" ):
                listener.enterBalancedtokenseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtokenseq" ):
                listener.exitBalancedtokenseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtokenseq" ):
                return visitor.visitBalancedtokenseq(self)
            else:
                return visitor.visitChildren(self)



    def balancedtokenseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BalancedtokenseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 230
        self.enterRecursionRule(localctx, 230, self.RULE_balancedtokenseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1622
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,166,self._ctx)
            if la_ == 1:
                self.state = 1621
                self.balancedtoken()


            self._ctx.stop = self._input.LT(-1)
            self.state = 1628
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,167,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BalancedtokenseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_balancedtokenseq)
                    self.state = 1624
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1625
                    self.balancedtoken() 
                self.state = 1630
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,167,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BalancedtokenContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftParen)
            else:
                return self.getToken(CPP14Parser.LeftParen, i)

        def balancedtokenseq(self):
            return self.getTypedRuleContext(CPP14Parser.BalancedtokenseqContext,0)


        def RightParen(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightParen)
            else:
                return self.getToken(CPP14Parser.RightParen, i)

        def LeftBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBracket)
            else:
                return self.getToken(CPP14Parser.LeftBracket, i)

        def RightBracket(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBracket)
            else:
                return self.getToken(CPP14Parser.RightBracket, i)

        def LeftBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.LeftBrace)
            else:
                return self.getToken(CPP14Parser.LeftBrace, i)

        def RightBrace(self, i:int=None):
            if i is None:
                return self.getTokens(CPP14Parser.RightBrace)
            else:
                return self.getToken(CPP14Parser.RightBrace, i)

        def getRuleIndex(self):
            return CPP14Parser.RULE_balancedtoken

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBalancedtoken" ):
                listener.enterBalancedtoken(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBalancedtoken" ):
                listener.exitBalancedtoken(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBalancedtoken" ):
                return visitor.visitBalancedtoken(self)
            else:
                return visitor.visitChildren(self)




    def balancedtoken(self):

        localctx = CPP14Parser.BalancedtokenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_balancedtoken)
        self._la = 0 # Token type
        try:
            self.state = 1648
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1631
                self.match(CPP14Parser.LeftParen)
                self.state = 1632
                self.balancedtokenseq(0)
                self.state = 1633
                self.match(CPP14Parser.RightParen)
                pass
            elif token in [CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1635
                self.match(CPP14Parser.LeftBracket)
                self.state = 1636
                self.balancedtokenseq(0)
                self.state = 1637
                self.match(CPP14Parser.RightBracket)
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1639
                self.match(CPP14Parser.LeftBrace)
                self.state = 1640
                self.balancedtokenseq(0)
                self.state = 1641
                self.match(CPP14Parser.RightBrace)
                pass
            elif token in [CPP14Parser.T__0, CPP14Parser.T__1, CPP14Parser.T__2, CPP14Parser.T__3, CPP14Parser.T__4, CPP14Parser.T__5, CPP14Parser.MultiLineMacro, CPP14Parser.Directive, CPP14Parser.Alignas, CPP14Parser.Alignof, CPP14Parser.Asm, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Break, CPP14Parser.Case, CPP14Parser.Catch, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Const_cast, CPP14Parser.Continue, CPP14Parser.Decltype, CPP14Parser.Default, CPP14Parser.Delete, CPP14Parser.Do, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.Else, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Export, CPP14Parser.Extern, CPP14Parser.False_, CPP14Parser.Final, CPP14Parser.Float, CPP14Parser.For, CPP14Parser.Friend, CPP14Parser.Goto, CPP14Parser.If, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Namespace, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Override, CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public, CPP14Parser.Register, CPP14Parser.Reinterpret_cast, CPP14Parser.Return, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Static_cast, CPP14Parser.Struct, CPP14Parser.Switch, CPP14Parser.Template, CPP14Parser.This, CPP14Parser.Thread_local, CPP14Parser.Throw, CPP14Parser.True_, CPP14Parser.Try, CPP14Parser.Typedef, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.While, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.Div, CPP14Parser.Mod, CPP14Parser.Caret, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.Not, CPP14Parser.Assign, CPP14Parser.Less, CPP14Parser.Greater, CPP14Parser.PlusAssign, CPP14Parser.MinusAssign, CPP14Parser.StarAssign, CPP14Parser.DivAssign, CPP14Parser.ModAssign, CPP14Parser.XorAssign, CPP14Parser.AndAssign, CPP14Parser.OrAssign, CPP14Parser.LeftShift, CPP14Parser.RightShift, CPP14Parser.LeftShiftAssign, CPP14Parser.RightShiftAssign, CPP14Parser.Equal, CPP14Parser.NotEqual, CPP14Parser.LessEqual, CPP14Parser.GreaterEqual, CPP14Parser.AndAnd, CPP14Parser.OrOr, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Comma, CPP14Parser.ArrowStar, CPP14Parser.Arrow, CPP14Parser.Question, CPP14Parser.Colon, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Dot, CPP14Parser.DotStar, CPP14Parser.Ellipsis, CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Decimalliteral, CPP14Parser.Octalliteral, CPP14Parser.Hexadecimalliteral, CPP14Parser.Binaryliteral, CPP14Parser.Integersuffix, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral, CPP14Parser.Whitespace, CPP14Parser.Newline, CPP14Parser.BlockComment, CPP14Parser.LineComment]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1644 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 1643
                        _la = self._input.LA(1)
                        if _la <= 0 or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.RightParen - 84)) | (1 << (CPP14Parser.LeftBracket - 84)) | (1 << (CPP14Parser.RightBracket - 84)) | (1 << (CPP14Parser.LeftBrace - 84)) | (1 << (CPP14Parser.RightBrace - 84)))) != 0):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()

                    else:
                        raise NoViableAltException(self)
                    self.state = 1646 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,168,self._ctx)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorContext,0)


        def initdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclaratorlist" ):
                listener.enterInitdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclaratorlist" ):
                listener.exitInitdeclaratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclaratorlist" ):
                return visitor.visitInitdeclaratorlist(self)
            else:
                return visitor.visitChildren(self)



    def initdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 234
        self.enterRecursionRule(localctx, 234, self.RULE_initdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1651
            self.initdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1658
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,170,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initdeclaratorlist)
                    self.state = 1653
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1654
                    self.match(CPP14Parser.Comma)
                    self.state = 1655
                    self.initdeclarator() 
                self.state = 1660
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,170,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class InitdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitdeclarator" ):
                listener.enterInitdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitdeclarator" ):
                listener.exitInitdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitdeclarator" ):
                return visitor.visitInitdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initdeclarator(self):

        localctx = CPP14Parser.InitdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_initdeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1661
            self.declarator()
            self.state = 1663
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                self.state = 1662
                self.initializer()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_declarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclarator" ):
                listener.enterDeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclarator" ):
                listener.exitDeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclarator" ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = CPP14Parser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_declarator)
        try:
            self.state = 1670
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1665
                self.ptrdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1666
                self.noptrdeclarator(0)
                self.state = 1667
                self.parametersandqualifiers()
                self.state = 1668
                self.trailingreturntype()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrdeclarator" ):
                listener.enterPtrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrdeclarator" ):
                listener.exitPtrdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrdeclarator" ):
                return visitor.visitPtrdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def ptrdeclarator(self):

        localctx = CPP14Parser.PtrdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_ptrdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 1679
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1672
                self.noptrdeclarator(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1673
                self.ptroperator()
                self.state = 1675
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Const:
                    self.state = 1674
                    self.match(CPP14Parser.Const)


                self.state = 1677
                self.ptrdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declaratorid(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratoridContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def ptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrdeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def noptrdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrdeclarator" ):
                listener.enterNoptrdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrdeclarator" ):
                listener.exitNoptrdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrdeclarator" ):
                return visitor.visitNoptrdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 242
        self.enterRecursionRule(localctx, 242, self.RULE_noptrdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1690
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Decltype, CPP14Parser.Operator, CPP14Parser.Tilde, CPP14Parser.Doublecolon, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.state = 1682
                self.declaratorid()
                self.state = 1684
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1683
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.LeftParen]:
                self.state = 1686
                self.match(CPP14Parser.LeftParen)
                self.state = 1687
                self.ptrdeclarator()
                self.state = 1688
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 1705
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,180,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1703
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,179,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1692
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1693
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrdeclarator)
                        self.state = 1694
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1695
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1697
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1696
                            self.constantexpression()


                        self.state = 1699
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1701
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,178,self._ctx)
                        if la_ == 1:
                            self.state = 1700
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1707
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,180,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParametersandqualifiersContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def parameterdeclarationclause(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationclauseContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def refqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.RefqualifierContext,0)


        def exceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptionspecificationContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parametersandqualifiers

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParametersandqualifiers" ):
                listener.enterParametersandqualifiers(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParametersandqualifiers" ):
                listener.exitParametersandqualifiers(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParametersandqualifiers" ):
                return visitor.visitParametersandqualifiers(self)
            else:
                return visitor.visitChildren(self)




    def parametersandqualifiers(self):

        localctx = CPP14Parser.ParametersandqualifiersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_parametersandqualifiers)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1708
            self.match(CPP14Parser.LeftParen)
            self.state = 1709
            self.parameterdeclarationclause()
            self.state = 1710
            self.match(CPP14Parser.RightParen)
            self.state = 1712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,181,self._ctx)
            if la_ == 1:
                self.state = 1711
                self.cvqualifierseq()


            self.state = 1715
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,182,self._ctx)
            if la_ == 1:
                self.state = 1714
                self.refqualifier()


            self.state = 1718
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,183,self._ctx)
            if la_ == 1:
                self.state = 1717
                self.exceptionspecification()


            self.state = 1721
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,184,self._ctx)
            if la_ == 1:
                self.state = 1720
                self.attributespecifierseq(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TrailingreturntypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def trailingtypespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingtypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_trailingreturntype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrailingreturntype" ):
                listener.enterTrailingreturntype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrailingreturntype" ):
                listener.exitTrailingreturntype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTrailingreturntype" ):
                return visitor.visitTrailingreturntype(self)
            else:
                return visitor.visitChildren(self)




    def trailingreturntype(self):

        localctx = CPP14Parser.TrailingreturntypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_trailingreturntype)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1723
            self.match(CPP14Parser.Arrow)
            self.state = 1724
            self.trailingtypespecifierseq()
            self.state = 1726
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,185,self._ctx)
            if la_ == 1:
                self.state = 1725
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtroperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptroperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtroperator" ):
                listener.enterPtroperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtroperator" ):
                listener.exitPtroperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtroperator" ):
                return visitor.visitPtroperator(self)
            else:
                return visitor.visitChildren(self)




    def ptroperator(self):

        localctx = CPP14Parser.PtroperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_ptroperator)
        try:
            self.state = 1751
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Star]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1728
                self.match(CPP14Parser.Star)
                self.state = 1730
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,186,self._ctx)
                if la_ == 1:
                    self.state = 1729
                    self.attributespecifierseq(0)


                self.state = 1733
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1732
                    self.cvqualifierseq()


                pass
            elif token in [CPP14Parser.And]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1735
                self.match(CPP14Parser.And)
                self.state = 1737
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,188,self._ctx)
                if la_ == 1:
                    self.state = 1736
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.T__2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1739
                self.match(CPP14Parser.T__2)
                self.state = 1741
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,189,self._ctx)
                if la_ == 1:
                    self.state = 1740
                    self.attributespecifierseq(0)


                pass
            elif token in [CPP14Parser.Decltype, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1743
                self.nestednamespecifier(0)
                self.state = 1744
                self.match(CPP14Parser.Star)
                self.state = 1746
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,190,self._ctx)
                if la_ == 1:
                    self.state = 1745
                    self.attributespecifierseq(0)


                self.state = 1749
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,191,self._ctx)
                if la_ == 1:
                    self.state = 1748
                    self.cvqualifierseq()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cvqualifier(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierContext,0)


        def cvqualifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.CvqualifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifierseq" ):
                listener.enterCvqualifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifierseq" ):
                listener.exitCvqualifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifierseq" ):
                return visitor.visitCvqualifierseq(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifierseq(self):

        localctx = CPP14Parser.CvqualifierseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_cvqualifierseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1753
            self.cvqualifier()
            self.state = 1755
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,193,self._ctx)
            if la_ == 1:
                self.state = 1754
                self.cvqualifierseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CvqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Const(self):
            return self.getToken(CPP14Parser.Const, 0)

        def Volatile(self):
            return self.getToken(CPP14Parser.Volatile, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_cvqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCvqualifier" ):
                listener.enterCvqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCvqualifier" ):
                listener.exitCvqualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCvqualifier" ):
                return visitor.visitCvqualifier(self)
            else:
                return visitor.visitChildren(self)




    def cvqualifier(self):

        localctx = CPP14Parser.CvqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_cvqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1757
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Const or _la==CPP14Parser.Volatile):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RefqualifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_refqualifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRefqualifier" ):
                listener.enterRefqualifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRefqualifier" ):
                listener.exitRefqualifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitRefqualifier" ):
                return visitor.visitRefqualifier(self)
            else:
                return visitor.visitChildren(self)




    def refqualifier(self):

        localctx = CPP14Parser.RefqualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_refqualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1759
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.T__2 or _la==CPP14Parser.And):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclaratoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_declaratorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclaratorid" ):
                listener.enterDeclaratorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclaratorid" ):
                listener.exitDeclaratorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDeclaratorid" ):
                return visitor.visitDeclaratorid(self)
            else:
                return visitor.visitChildren(self)




    def declaratorid(self):

        localctx = CPP14Parser.DeclaratoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_declaratorid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Ellipsis:
                self.state = 1761
                self.match(CPP14Parser.Ellipsis)


            self.state = 1764
            self.idexpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThetypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_thetypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThetypeid" ):
                listener.enterThetypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThetypeid" ):
                listener.exitThetypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThetypeid" ):
                return visitor.visitThetypeid(self)
            else:
                return visitor.visitChildren(self)




    def thetypeid(self):

        localctx = CPP14Parser.ThetypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_thetypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1766
            self.typespecifierseq()
            self.state = 1768
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,195,self._ctx)
            if la_ == 1:
                self.state = 1767
                self.abstractdeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AbstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def trailingreturntype(self):
            return self.getTypedRuleContext(CPP14Parser.TrailingreturntypeContext,0)


        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractdeclarator" ):
                listener.enterAbstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractdeclarator" ):
                listener.exitAbstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractdeclarator" ):
                return visitor.visitAbstractdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractdeclarator(self):

        localctx = CPP14Parser.AbstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_abstractdeclarator)
        try:
            self.state = 1778
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,197,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1770
                self.ptrabstractdeclarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1772
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,196,self._ctx)
                if la_ == 1:
                    self.state = 1771
                    self.noptrabstractdeclarator(0)


                self.state = 1774
                self.parametersandqualifiers()
                self.state = 1775
                self.trailingreturntype()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1777
                self.abstractpackdeclarator()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PtrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPtrabstractdeclarator" ):
                listener.enterPtrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPtrabstractdeclarator" ):
                listener.exitPtrabstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPtrabstractdeclarator" ):
                return visitor.visitPtrabstractdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def ptrabstractdeclarator(self):

        localctx = CPP14Parser.PtrabstractdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_ptrabstractdeclarator)
        try:
            self.state = 1785
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftParen, CPP14Parser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1780
                self.noptrabstractdeclarator(0)
                pass
            elif token in [CPP14Parser.T__2, CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1781
                self.ptroperator()
                self.state = 1783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,198,self._ctx)
                if la_ == 1:
                    self.state = 1782
                    self.ptrabstractdeclarator()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def ptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.PtrabstractdeclaratorContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def noptrabstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractdeclarator" ):
                listener.enterNoptrabstractdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractdeclarator" ):
                listener.exitNoptrabstractdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractdeclarator" ):
                return visitor.visitNoptrabstractdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 264
        self.enterRecursionRule(localctx, 264, self.RULE_noptrabstractdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1801
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,202,self._ctx)
            if la_ == 1:
                self.state = 1788
                self.parametersandqualifiers()
                pass

            elif la_ == 2:
                self.state = 1789
                self.match(CPP14Parser.LeftBracket)
                self.state = 1791
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 1790
                    self.constantexpression()


                self.state = 1793
                self.match(CPP14Parser.RightBracket)
                self.state = 1795
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,201,self._ctx)
                if la_ == 1:
                    self.state = 1794
                    self.attributespecifierseq(0)


                pass

            elif la_ == 3:
                self.state = 1797
                self.match(CPP14Parser.LeftParen)
                self.state = 1798
                self.ptrabstractdeclarator()
                self.state = 1799
                self.match(CPP14Parser.RightParen)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 1816
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,206,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1814
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,205,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1803
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 1804
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractdeclarator)
                        self.state = 1805
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1806
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1808
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1807
                            self.constantexpression()


                        self.state = 1810
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1812
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,204,self._ctx)
                        if la_ == 1:
                            self.state = 1811
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1818
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,206,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class AbstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def abstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractpackdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_abstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAbstractpackdeclarator" ):
                listener.enterAbstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAbstractpackdeclarator" ):
                listener.exitAbstractpackdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAbstractpackdeclarator" ):
                return visitor.visitAbstractpackdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractpackdeclarator(self):

        localctx = CPP14Parser.AbstractpackdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_abstractpackdeclarator)
        try:
            self.state = 1823
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Ellipsis]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1819
                self.noptrabstractpackdeclarator(0)
                pass
            elif token in [CPP14Parser.T__2, CPP14Parser.Decltype, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Doublecolon, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1820
                self.ptroperator()
                self.state = 1821
                self.abstractpackdeclarator()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NoptrabstractpackdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def noptrabstractpackdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.NoptrabstractpackdeclaratorContext,0)


        def parametersandqualifiers(self):
            return self.getTypedRuleContext(CPP14Parser.ParametersandqualifiersContext,0)


        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_noptrabstractpackdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoptrabstractpackdeclarator" ):
                listener.enterNoptrabstractpackdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoptrabstractpackdeclarator" ):
                listener.exitNoptrabstractpackdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoptrabstractpackdeclarator" ):
                return visitor.visitNoptrabstractpackdeclarator(self)
            else:
                return visitor.visitChildren(self)



    def noptrabstractpackdeclarator(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 268
        self.enterRecursionRule(localctx, 268, self.RULE_noptrabstractpackdeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1826
            self.match(CPP14Parser.Ellipsis)
            self._ctx.stop = self._input.LT(-1)
            self.state = 1841
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,211,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 1839
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,210,self._ctx)
                    if la_ == 1:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1828
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 1829
                        self.parametersandqualifiers()
                        pass

                    elif la_ == 2:
                        localctx = CPP14Parser.NoptrabstractpackdeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_noptrabstractpackdeclarator)
                        self.state = 1830
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 1831
                        self.match(CPP14Parser.LeftBracket)
                        self.state = 1833
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                            self.state = 1832
                            self.constantexpression()


                        self.state = 1835
                        self.match(CPP14Parser.RightBracket)
                        self.state = 1837
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,209,self._ctx)
                        if la_ == 1:
                            self.state = 1836
                            self.attributespecifierseq(0)


                        pass

             
                self.state = 1843
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,211,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationclause" ):
                listener.enterParameterdeclarationclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationclause" ):
                listener.exitParameterdeclarationclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationclause" ):
                return visitor.visitParameterdeclarationclause(self)
            else:
                return visitor.visitChildren(self)




    def parameterdeclarationclause(self):

        localctx = CPP14Parser.ParameterdeclarationclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_parameterdeclarationclause)
        self._la = 0 # Token type
        try:
            self.state = 1854
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,214,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1845
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((((_la - 9)) & ~0x3f) == 0 and ((1 << (_la - 9)) & ((1 << (CPP14Parser.Alignas - 9)) | (1 << (CPP14Parser.Auto - 9)) | (1 << (CPP14Parser.Bool - 9)) | (1 << (CPP14Parser.Char - 9)) | (1 << (CPP14Parser.Char16 - 9)) | (1 << (CPP14Parser.Char32 - 9)) | (1 << (CPP14Parser.Class - 9)) | (1 << (CPP14Parser.Const - 9)) | (1 << (CPP14Parser.Constexpr - 9)) | (1 << (CPP14Parser.Decltype - 9)) | (1 << (CPP14Parser.Double - 9)) | (1 << (CPP14Parser.Enum - 9)) | (1 << (CPP14Parser.Explicit - 9)) | (1 << (CPP14Parser.Extern - 9)) | (1 << (CPP14Parser.Float - 9)) | (1 << (CPP14Parser.Friend - 9)) | (1 << (CPP14Parser.Inline - 9)) | (1 << (CPP14Parser.Int - 9)) | (1 << (CPP14Parser.Long - 9)) | (1 << (CPP14Parser.Mutable - 9)) | (1 << (CPP14Parser.Register - 9)) | (1 << (CPP14Parser.Short - 9)) | (1 << (CPP14Parser.Signed - 9)) | (1 << (CPP14Parser.Static - 9)) | (1 << (CPP14Parser.Struct - 9)) | (1 << (CPP14Parser.Thread_local - 9)))) != 0) or ((((_la - 73)) & ~0x3f) == 0 and ((1 << (_la - 73)) & ((1 << (CPP14Parser.Typedef - 73)) | (1 << (CPP14Parser.Typename_ - 73)) | (1 << (CPP14Parser.Union - 73)) | (1 << (CPP14Parser.Unsigned - 73)) | (1 << (CPP14Parser.Virtual - 73)) | (1 << (CPP14Parser.Void - 73)) | (1 << (CPP14Parser.Volatile - 73)) | (1 << (CPP14Parser.Wchar - 73)) | (1 << (CPP14Parser.LeftBracket - 73)) | (1 << (CPP14Parser.Doublecolon - 73)) | (1 << (CPP14Parser.Identifier - 73)))) != 0):
                    self.state = 1844
                    self.parameterdeclarationlist(0)


                self.state = 1848
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 1847
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1850
                self.parameterdeclarationlist(0)
                self.state = 1851
                self.match(CPP14Parser.Comma)
                self.state = 1852
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ParameterdeclarationlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def parameterdeclarationlist(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclarationlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclarationlist" ):
                listener.enterParameterdeclarationlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclarationlist" ):
                listener.exitParameterdeclarationlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclarationlist" ):
                return visitor.visitParameterdeclarationlist(self)
            else:
                return visitor.visitChildren(self)



    def parameterdeclarationlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.ParameterdeclarationlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 272
        self.enterRecursionRule(localctx, 272, self.RULE_parameterdeclarationlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1857
            self.parameterdeclaration()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1864
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,215,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.ParameterdeclarationlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_parameterdeclarationlist)
                    self.state = 1859
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1860
                    self.match(CPP14Parser.Comma)
                    self.state = 1861
                    self.parameterdeclaration() 
                self.state = 1866
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,215,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ParameterdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_parameterdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParameterdeclaration" ):
                listener.enterParameterdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParameterdeclaration" ):
                listener.exitParameterdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitParameterdeclaration" ):
                return visitor.visitParameterdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterdeclaration(self):

        localctx = CPP14Parser.ParameterdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_parameterdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 1898
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,222,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1868
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1867
                    self.attributespecifierseq(0)


                self.state = 1870
                self.declspecifierseq()
                self.state = 1871
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1874
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1873
                    self.attributespecifierseq(0)


                self.state = 1876
                self.declspecifierseq()
                self.state = 1877
                self.declarator()
                self.state = 1878
                self.match(CPP14Parser.Assign)
                self.state = 1879
                self.initializerclause()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1882
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1881
                    self.attributespecifierseq(0)


                self.state = 1884
                self.declspecifierseq()
                self.state = 1886
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,219,self._ctx)
                if la_ == 1:
                    self.state = 1885
                    self.abstractdeclarator()


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1889
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1888
                    self.attributespecifierseq(0)


                self.state = 1891
                self.declspecifierseq()
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.T__2 or _la==CPP14Parser.Decltype or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.LeftBracket - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Doublecolon - 84)) | (1 << (CPP14Parser.Ellipsis - 84)) | (1 << (CPP14Parser.Identifier - 84)))) != 0):
                    self.state = 1892
                    self.abstractdeclarator()


                self.state = 1895
                self.match(CPP14Parser.Assign)
                self.state = 1896
                self.initializerclause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiondefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def functionbody(self):
            return self.getTypedRuleContext(CPP14Parser.FunctionbodyContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiondefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiondefinition" ):
                listener.enterFunctiondefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiondefinition" ):
                listener.exitFunctiondefinition(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiondefinition" ):
                return visitor.visitFunctiondefinition(self)
            else:
                return visitor.visitChildren(self)




    def functiondefinition(self):

        localctx = CPP14Parser.FunctiondefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_functiondefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1901
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                self.state = 1900
                self.attributespecifierseq(0)


            self.state = 1904
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,224,self._ctx)
            if la_ == 1:
                self.state = 1903
                self.declspecifierseq()


            self.state = 1906
            self.declarator()
            self.state = 1908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Final or _la==CPP14Parser.Override:
                self.state = 1907
                self.virtspecifierseq(0)


            self.state = 1910
            self.functionbody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionbodyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def functiontryblock(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiontryblockContext,0)


        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Default(self):
            return self.getToken(CPP14Parser.Default, 0)

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_functionbody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionbody" ):
                listener.enterFunctionbody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionbody" ):
                listener.exitFunctionbody(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctionbody" ):
                return visitor.visitFunctionbody(self)
            else:
                return visitor.visitChildren(self)




    def functionbody(self):

        localctx = CPP14Parser.FunctionbodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_functionbody)
        self._la = 0 # Token type
        try:
            self.state = 1923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,227,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1912
                    self.ctorinitializer()


                self.state = 1915
                self.compoundstatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1916
                self.functiontryblock()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1917
                self.match(CPP14Parser.Assign)
                self.state = 1918
                self.match(CPP14Parser.Default)
                self.state = 1919
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1920
                self.match(CPP14Parser.Assign)
                self.state = 1921
                self.match(CPP14Parser.Delete)
                self.state = 1922
                self.match(CPP14Parser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializer" ):
                listener.enterInitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializer" ):
                listener.exitInitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializer" ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = CPP14Parser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_initializer)
        try:
            self.state = 1930
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.LeftBrace, CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1925
                self.braceorequalinitializer()
                pass
            elif token in [CPP14Parser.LeftParen]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1926
                self.match(CPP14Parser.LeftParen)
                self.state = 1927
                self.expressionlist()
                self.state = 1928
                self.match(CPP14Parser.RightParen)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BraceorequalinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_braceorequalinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBraceorequalinitializer" ):
                listener.enterBraceorequalinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBraceorequalinitializer" ):
                listener.exitBraceorequalinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBraceorequalinitializer" ):
                return visitor.visitBraceorequalinitializer(self)
            else:
                return visitor.visitChildren(self)




    def braceorequalinitializer(self):

        localctx = CPP14Parser.BraceorequalinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_braceorequalinitializer)
        try:
            self.state = 1935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Assign]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1932
                self.match(CPP14Parser.Assign)
                self.state = 1933
                self.initializerclause()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1934
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerclause" ):
                listener.enterInitializerclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerclause" ):
                listener.exitInitializerclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerclause" ):
                return visitor.visitInitializerclause(self)
            else:
                return visitor.visitChildren(self)




    def initializerclause(self):

        localctx = CPP14Parser.InitializerclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_initializerclause)
        try:
            self.state = 1939
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.T__0, CPP14Parser.T__1, CPP14Parser.Alignof, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Const_cast, CPP14Parser.Decltype, CPP14Parser.Delete, CPP14Parser.Double, CPP14Parser.Dynamic_cast, CPP14Parser.False_, CPP14Parser.Float, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.New, CPP14Parser.Noexcept, CPP14Parser.Nullptr, CPP14Parser.Operator, CPP14Parser.Reinterpret_cast, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Sizeof, CPP14Parser.Static_cast, CPP14Parser.This, CPP14Parser.Throw, CPP14Parser.True_, CPP14Parser.Typeid_, CPP14Parser.Typename_, CPP14Parser.Unsigned, CPP14Parser.Void, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Plus, CPP14Parser.Minus, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Or, CPP14Parser.Tilde, CPP14Parser.PlusPlus, CPP14Parser.MinusMinus, CPP14Parser.Doublecolon, CPP14Parser.Identifier, CPP14Parser.Integerliteral, CPP14Parser.Characterliteral, CPP14Parser.Floatingliteral, CPP14Parser.Stringliteral, CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1937
                self.assignmentexpression()
                pass
            elif token in [CPP14Parser.LeftBrace]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1938
                self.bracedinitlist()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def initializerclause(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerclauseContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_initializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInitializerlist" ):
                listener.enterInitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInitializerlist" ):
                listener.exitInitializerlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitInitializerlist" ):
                return visitor.visitInitializerlist(self)
            else:
                return visitor.visitChildren(self)



    def initializerlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.InitializerlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 286
        self.enterRecursionRule(localctx, 286, self.RULE_initializerlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1942
            self.initializerclause()
            self.state = 1944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,231,self._ctx)
            if la_ == 1:
                self.state = 1943
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 1954
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,233,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.InitializerlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerlist)
                    self.state = 1946
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 1947
                    self.match(CPP14Parser.Comma)
                    self.state = 1948
                    self.initializerclause()
                    self.state = 1950
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,232,self._ctx)
                    if la_ == 1:
                        self.state = 1949
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 1956
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,233,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BracedinitlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def initializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.InitializerlistContext,0)


        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_bracedinitlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBracedinitlist" ):
                listener.enterBracedinitlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBracedinitlist" ):
                listener.exitBracedinitlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBracedinitlist" ):
                return visitor.visitBracedinitlist(self)
            else:
                return visitor.visitChildren(self)




    def bracedinitlist(self):

        localctx = CPP14Parser.BracedinitlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_bracedinitlist)
        self._la = 0 # Token type
        try:
            self.state = 1966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,235,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1957
                self.match(CPP14Parser.LeftBrace)
                self.state = 1958
                self.initializerlist(0)
                self.state = 1960
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Comma:
                    self.state = 1959
                    self.match(CPP14Parser.Comma)


                self.state = 1962
                self.match(CPP14Parser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1964
                self.match(CPP14Parser.LeftBrace)
                self.state = 1965
                self.match(CPP14Parser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassname" ):
                listener.enterClassname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassname" ):
                listener.exitClassname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassname" ):
                return visitor.visitClassname(self)
            else:
                return visitor.visitChildren(self)




    def classname(self):

        localctx = CPP14Parser.ClassnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_classname)
        try:
            self.state = 1970
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,236,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1968
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1969
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classhead(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadContext,0)


        def LeftBrace(self):
            return self.getToken(CPP14Parser.LeftBrace, 0)

        def RightBrace(self):
            return self.getToken(CPP14Parser.RightBrace, 0)

        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassspecifier" ):
                listener.enterClassspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassspecifier" ):
                listener.exitClassspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassspecifier" ):
                return visitor.visitClassspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classspecifier(self):

        localctx = CPP14Parser.ClassspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_classspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1972
            self.classhead()
            self.state = 1973
            self.match(CPP14Parser.LeftBrace)
            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Template - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Using - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Colon - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14Parser.Semi - 129)) | (1 << (CPP14Parser.Ellipsis - 129)) | (1 << (CPP14Parser.Identifier - 129)))) != 0):
                self.state = 1974
                self.memberspecification()


            self.state = 1977
            self.match(CPP14Parser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classkey(self):
            return self.getTypedRuleContext(CPP14Parser.ClasskeyContext,0)


        def classheadname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassheadnameContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def classvirtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.ClassvirtspecifierContext,0)


        def baseclause(self):
            return self.getTypedRuleContext(CPP14Parser.BaseclauseContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classhead

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasshead" ):
                listener.enterClasshead(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasshead" ):
                listener.exitClasshead(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasshead" ):
                return visitor.visitClasshead(self)
            else:
                return visitor.visitChildren(self)




    def classhead(self):

        localctx = CPP14Parser.ClassheadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_classhead)
        self._la = 0 # Token type
        try:
            self.state = 1997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,243,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1979
                self.classkey()
                self.state = 1981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1980
                    self.attributespecifierseq(0)


                self.state = 1983
                self.classheadname()
                self.state = 1985
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Final:
                    self.state = 1984
                    self.classvirtspecifier()


                self.state = 1988
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1987
                    self.baseclause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1990
                self.classkey()
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 1991
                    self.attributespecifierseq(0)


                self.state = 1995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Colon:
                    self.state = 1994
                    self.baseclause()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassheadnameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classheadname

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassheadname" ):
                listener.enterClassheadname(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassheadname" ):
                listener.exitClassheadname(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassheadname" ):
                return visitor.visitClassheadname(self)
            else:
                return visitor.visitChildren(self)




    def classheadname(self):

        localctx = CPP14Parser.ClassheadnameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_classheadname)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2000
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,244,self._ctx)
            if la_ == 1:
                self.state = 1999
                self.nestednamespecifier(0)


            self.state = 2002
            self.classname()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassvirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classvirtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassvirtspecifier" ):
                listener.enterClassvirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassvirtspecifier" ):
                listener.exitClassvirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassvirtspecifier" ):
                return visitor.visitClassvirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def classvirtspecifier(self):

        localctx = CPP14Parser.ClassvirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_classvirtspecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2004
            self.match(CPP14Parser.Final)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClasskeyContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Struct(self):
            return self.getToken(CPP14Parser.Struct, 0)

        def Union(self):
            return self.getToken(CPP14Parser.Union, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_classkey

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClasskey" ):
                listener.enterClasskey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClasskey" ):
                listener.exitClasskey(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClasskey" ):
                return visitor.visitClasskey(self)
            else:
                return visitor.visitChildren(self)




    def classkey(self):

        localctx = CPP14Parser.ClasskeyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_classkey)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2006
            _la = self._input.LA(1)
            if not(((((_la - 20)) & ~0x3f) == 0 and ((1 << (_la - 20)) & ((1 << (CPP14Parser.Class - 20)) | (1 << (CPP14Parser.Struct - 20)) | (1 << (CPP14Parser.Union - 20)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclarationContext,0)


        def memberspecification(self):
            return self.getTypedRuleContext(CPP14Parser.MemberspecificationContext,0)


        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberspecification" ):
                listener.enterMemberspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberspecification" ):
                listener.exitMemberspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberspecification" ):
                return visitor.visitMemberspecification(self)
            else:
                return visitor.visitChildren(self)




    def memberspecification(self):

        localctx = CPP14Parser.MemberspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_memberspecification)
        self._la = 0 # Token type
        try:
            self.state = 2017
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.T__2, CPP14Parser.Alignas, CPP14Parser.Auto, CPP14Parser.Bool, CPP14Parser.Char, CPP14Parser.Char16, CPP14Parser.Char32, CPP14Parser.Class, CPP14Parser.Const, CPP14Parser.Constexpr, CPP14Parser.Decltype, CPP14Parser.Double, CPP14Parser.Enum, CPP14Parser.Explicit, CPP14Parser.Extern, CPP14Parser.Float, CPP14Parser.Friend, CPP14Parser.Inline, CPP14Parser.Int, CPP14Parser.Long, CPP14Parser.Mutable, CPP14Parser.Operator, CPP14Parser.Register, CPP14Parser.Short, CPP14Parser.Signed, CPP14Parser.Static, CPP14Parser.Static_assert, CPP14Parser.Struct, CPP14Parser.Template, CPP14Parser.Thread_local, CPP14Parser.Typedef, CPP14Parser.Typename_, CPP14Parser.Union, CPP14Parser.Unsigned, CPP14Parser.Using, CPP14Parser.Virtual, CPP14Parser.Void, CPP14Parser.Volatile, CPP14Parser.Wchar, CPP14Parser.LeftParen, CPP14Parser.LeftBracket, CPP14Parser.Star, CPP14Parser.And, CPP14Parser.Tilde, CPP14Parser.Colon, CPP14Parser.Doublecolon, CPP14Parser.Semi, CPP14Parser.Ellipsis, CPP14Parser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2008
                self.memberdeclaration()
                self.state = 2010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Template - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Using - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Colon - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14Parser.Semi - 129)) | (1 << (CPP14Parser.Ellipsis - 129)) | (1 << (CPP14Parser.Identifier - 129)))) != 0):
                    self.state = 2009
                    self.memberspecification()


                pass
            elif token in [CPP14Parser.Private, CPP14Parser.Protected, CPP14Parser.Public]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2012
                self.accessspecifier()
                self.state = 2013
                self.match(CPP14Parser.Colon)
                self.state = 2015
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Constexpr) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.Explicit) | (1 << CPP14Parser.Extern) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Friend) | (1 << CPP14Parser.Inline) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.Mutable) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public) | (1 << CPP14Parser.Register) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Static) | (1 << CPP14Parser.Static_assert))) != 0) or ((((_la - 65)) & ~0x3f) == 0 and ((1 << (_la - 65)) & ((1 << (CPP14Parser.Struct - 65)) | (1 << (CPP14Parser.Template - 65)) | (1 << (CPP14Parser.Thread_local - 65)) | (1 << (CPP14Parser.Typedef - 65)) | (1 << (CPP14Parser.Typename_ - 65)) | (1 << (CPP14Parser.Union - 65)) | (1 << (CPP14Parser.Unsigned - 65)) | (1 << (CPP14Parser.Using - 65)) | (1 << (CPP14Parser.Virtual - 65)) | (1 << (CPP14Parser.Void - 65)) | (1 << (CPP14Parser.Volatile - 65)) | (1 << (CPP14Parser.Wchar - 65)) | (1 << (CPP14Parser.LeftParen - 65)) | (1 << (CPP14Parser.LeftBracket - 65)) | (1 << (CPP14Parser.Star - 65)) | (1 << (CPP14Parser.And - 65)) | (1 << (CPP14Parser.Tilde - 65)) | (1 << (CPP14Parser.Colon - 65)) | (1 << (CPP14Parser.Doublecolon - 65)))) != 0) or ((((_la - 129)) & ~0x3f) == 0 and ((1 << (_la - 129)) & ((1 << (CPP14Parser.Semi - 129)) | (1 << (CPP14Parser.Ellipsis - 129)) | (1 << (CPP14Parser.Identifier - 129)))) != 0):
                    self.state = 2014
                    self.memberspecification()


                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Semi(self):
            return self.getToken(CPP14Parser.Semi, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def declspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.DeclspecifierseqContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def functiondefinition(self):
            return self.getTypedRuleContext(CPP14Parser.FunctiondefinitionContext,0)


        def usingdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.UsingdeclarationContext,0)


        def static_assertdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.Static_assertdeclarationContext,0)


        def templatedeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatedeclarationContext,0)


        def aliasdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.AliasdeclarationContext,0)


        def emptydeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.EmptydeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaration" ):
                listener.enterMemberdeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaration" ):
                listener.exitMemberdeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaration" ):
                return visitor.visitMemberdeclaration(self)
            else:
                return visitor.visitChildren(self)




    def memberdeclaration(self):

        localctx = CPP14Parser.MemberdeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_memberdeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,251,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2020
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,248,self._ctx)
                if la_ == 1:
                    self.state = 2019
                    self.attributespecifierseq(0)


                self.state = 2023
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,249,self._ctx)
                if la_ == 1:
                    self.state = 2022
                    self.declspecifierseq()


                self.state = 2026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__2) | (1 << CPP14Parser.Alignas) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Operator))) != 0) or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.LeftBracket - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Tilde - 84)) | (1 << (CPP14Parser.Colon - 84)) | (1 << (CPP14Parser.Doublecolon - 84)) | (1 << (CPP14Parser.Ellipsis - 84)) | (1 << (CPP14Parser.Identifier - 84)))) != 0):
                    self.state = 2025
                    self.memberdeclaratorlist(0)


                self.state = 2028
                self.match(CPP14Parser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2029
                self.functiondefinition()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2030
                self.usingdeclaration()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2031
                self.static_assertdeclaration()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2032
                self.templatedeclaration()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2033
                self.aliasdeclaration()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2034
                self.emptydeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MemberdeclaratorlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def memberdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorContext,0)


        def memberdeclaratorlist(self):
            return self.getTypedRuleContext(CPP14Parser.MemberdeclaratorlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclaratorlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclaratorlist" ):
                listener.enterMemberdeclaratorlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclaratorlist" ):
                listener.exitMemberdeclaratorlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclaratorlist" ):
                return visitor.visitMemberdeclaratorlist(self)
            else:
                return visitor.visitChildren(self)



    def memberdeclaratorlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.MemberdeclaratorlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 306
        self.enterRecursionRule(localctx, 306, self.RULE_memberdeclaratorlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2038
            self.memberdeclarator()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2045
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,252,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.MemberdeclaratorlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_memberdeclaratorlist)
                    self.state = 2040
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2041
                    self.match(CPP14Parser.Comma)
                    self.state = 2042
                    self.memberdeclarator() 
                self.state = 2047
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,252,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class MemberdeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def purespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.PurespecifierContext,0)


        def braceorequalinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.BraceorequalinitializerContext,0)


        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_memberdeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMemberdeclarator" ):
                listener.enterMemberdeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMemberdeclarator" ):
                listener.exitMemberdeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMemberdeclarator" ):
                return visitor.visitMemberdeclarator(self)
            else:
                return visitor.visitChildren(self)




    def memberdeclarator(self):

        localctx = CPP14Parser.MemberdeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_memberdeclarator)
        self._la = 0 # Token type
        try:
            self.state = 2067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2048
                self.declarator()
                self.state = 2050
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,253,self._ctx)
                if la_ == 1:
                    self.state = 2049
                    self.virtspecifierseq(0)


                self.state = 2053
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,254,self._ctx)
                if la_ == 1:
                    self.state = 2052
                    self.purespecifier()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2055
                self.declarator()
                self.state = 2057
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,255,self._ctx)
                if la_ == 1:
                    self.state = 2056
                    self.braceorequalinitializer()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2060
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2059
                    self.match(CPP14Parser.Identifier)


                self.state = 2063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2062
                    self.attributespecifierseq(0)


                self.state = 2065
                self.match(CPP14Parser.Colon)
                self.state = 2066
                self.constantexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VirtspecifierseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def virtspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierContext,0)


        def virtspecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.VirtspecifierseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifierseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifierseq" ):
                listener.enterVirtspecifierseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifierseq" ):
                listener.exitVirtspecifierseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifierseq" ):
                return visitor.visitVirtspecifierseq(self)
            else:
                return visitor.visitChildren(self)



    def virtspecifierseq(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.VirtspecifierseqContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 310
        self.enterRecursionRule(localctx, 310, self.RULE_virtspecifierseq, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2070
            self.virtspecifier()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2076
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,259,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.VirtspecifierseqContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_virtspecifierseq)
                    self.state = 2072
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2073
                    self.virtspecifier() 
                self.state = 2078
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,259,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class VirtspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Override(self):
            return self.getToken(CPP14Parser.Override, 0)

        def Final(self):
            return self.getToken(CPP14Parser.Final, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_virtspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVirtspecifier" ):
                listener.enterVirtspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVirtspecifier" ):
                listener.exitVirtspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitVirtspecifier" ):
                return visitor.visitVirtspecifier(self)
            else:
                return visitor.visitChildren(self)




    def virtspecifier(self):

        localctx = CPP14Parser.VirtspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_virtspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2079
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.Final or _la==CPP14Parser.Override):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.val = None # Token

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Octalliteral(self):
            return self.getToken(CPP14Parser.Octalliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_purespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurespecifier" ):
                listener.enterPurespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurespecifier" ):
                listener.exitPurespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPurespecifier" ):
                return visitor.visitPurespecifier(self)
            else:
                return visitor.visitChildren(self)




    def purespecifier(self):

        localctx = CPP14Parser.PurespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_purespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2081
            self.match(CPP14Parser.Assign)
            self.state = 2082
            localctx.val = self.match(CPP14Parser.Octalliteral)
            if((None if localctx.val is None else localctx.val.text).compareTo("0")!=0) throw new InputMismatchException(this);
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseclauseContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_baseclause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBaseclause" ):
                listener.enterBaseclause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBaseclause" ):
                listener.exitBaseclause(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseclause" ):
                return visitor.visitBaseclause(self)
            else:
                return visitor.visitChildren(self)




    def baseclause(self):

        localctx = CPP14Parser.BaseclauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_baseclause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2085
            self.match(CPP14Parser.Colon)
            self.state = 2086
            self.basespecifierlist(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasespecifierlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def basespecifierlist(self):
            return self.getTypedRuleContext(CPP14Parser.BasespecifierlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifierlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifierlist" ):
                listener.enterBasespecifierlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifierlist" ):
                listener.exitBasespecifierlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifierlist" ):
                return visitor.visitBasespecifierlist(self)
            else:
                return visitor.visitChildren(self)



    def basespecifierlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.BasespecifierlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 318
        self.enterRecursionRule(localctx, 318, self.RULE_basespecifierlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2089
            self.basespecifier()
            self.state = 2091
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,260,self._ctx)
            if la_ == 1:
                self.state = 2090
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2101
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,262,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.BasespecifierlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_basespecifierlist)
                    self.state = 2093
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2094
                    self.match(CPP14Parser.Comma)
                    self.state = 2095
                    self.basespecifier()
                    self.state = 2097
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,261,self._ctx)
                    if la_ == 1:
                        self.state = 2096
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2103
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,262,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class BasespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def basetypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.BasetypespecifierContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def Virtual(self):
            return self.getToken(CPP14Parser.Virtual, 0)

        def accessspecifier(self):
            return self.getTypedRuleContext(CPP14Parser.AccessspecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasespecifier" ):
                listener.enterBasespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasespecifier" ):
                listener.exitBasespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasespecifier" ):
                return visitor.visitBasespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basespecifier(self):

        localctx = CPP14Parser.BasespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_basespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,268,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2105
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2104
                    self.attributespecifierseq(0)


                self.state = 2107
                self.basetypespecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2108
                    self.attributespecifierseq(0)


                self.state = 2111
                self.match(CPP14Parser.Virtual)
                self.state = 2113
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0):
                    self.state = 2112
                    self.accessspecifier()


                self.state = 2115
                self.basetypespecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2117
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2116
                    self.attributespecifierseq(0)


                self.state = 2119
                self.accessspecifier()
                self.state = 2121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Virtual:
                    self.state = 2120
                    self.match(CPP14Parser.Virtual)


                self.state = 2123
                self.basetypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ClassordecltypeContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classname(self):
            return self.getTypedRuleContext(CPP14Parser.ClassnameContext,0)


        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def decltypespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.DecltypespecifierContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_classordecltype

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterClassordecltype" ):
                listener.enterClassordecltype(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitClassordecltype" ):
                listener.exitClassordecltype(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitClassordecltype" ):
                return visitor.visitClassordecltype(self)
            else:
                return visitor.visitChildren(self)




    def classordecltype(self):

        localctx = CPP14Parser.ClassordecltypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_classordecltype)
        try:
            self.state = 2132
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,270,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2128
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,269,self._ctx)
                if la_ == 1:
                    self.state = 2127
                    self.nestednamespecifier(0)


                self.state = 2130
                self.classname()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2131
                self.decltypespecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BasetypespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_basetypespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBasetypespecifier" ):
                listener.enterBasetypespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBasetypespecifier" ):
                listener.exitBasetypespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBasetypespecifier" ):
                return visitor.visitBasetypespecifier(self)
            else:
                return visitor.visitChildren(self)




    def basetypespecifier(self):

        localctx = CPP14Parser.BasetypespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_basetypespecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2134
            self.classordecltype()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AccessspecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Private(self):
            return self.getToken(CPP14Parser.Private, 0)

        def Protected(self):
            return self.getToken(CPP14Parser.Protected, 0)

        def Public(self):
            return self.getToken(CPP14Parser.Public, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_accessspecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAccessspecifier" ):
                listener.enterAccessspecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAccessspecifier" ):
                listener.exitAccessspecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAccessspecifier" ):
                return visitor.visitAccessspecifier(self)
            else:
                return visitor.visitChildren(self)




    def accessspecifier(self):

        localctx = CPP14Parser.AccessspecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_accessspecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2136
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.Private) | (1 << CPP14Parser.Protected) | (1 << CPP14Parser.Public))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversionfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def conversiontypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiontypeidContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversionfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversionfunctionid" ):
                listener.enterConversionfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversionfunctionid" ):
                listener.exitConversionfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversionfunctionid" ):
                return visitor.visitConversionfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def conversionfunctionid(self):

        localctx = CPP14Parser.ConversionfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_conversionfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2138
            self.match(CPP14Parser.Operator)
            self.state = 2139
            self.conversiontypeid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiontypeidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiontypeid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiontypeid" ):
                listener.enterConversiontypeid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiontypeid" ):
                listener.exitConversiontypeid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiontypeid" ):
                return visitor.visitConversiontypeid(self)
            else:
                return visitor.visitChildren(self)




    def conversiontypeid(self):

        localctx = CPP14Parser.ConversiontypeidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_conversiontypeid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2141
            self.typespecifierseq()
            self.state = 2143
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,271,self._ctx)
            if la_ == 1:
                self.state = 2142
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConversiondeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ptroperator(self):
            return self.getTypedRuleContext(CPP14Parser.PtroperatorContext,0)


        def conversiondeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.ConversiondeclaratorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_conversiondeclarator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConversiondeclarator" ):
                listener.enterConversiondeclarator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConversiondeclarator" ):
                listener.exitConversiondeclarator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConversiondeclarator" ):
                return visitor.visitConversiondeclarator(self)
            else:
                return visitor.visitChildren(self)




    def conversiondeclarator(self):

        localctx = CPP14Parser.ConversiondeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_conversiondeclarator)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2145
            self.ptroperator()
            self.state = 2147
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
            if la_ == 1:
                self.state = 2146
                self.conversiondeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CtorinitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Colon(self):
            return self.getToken(CPP14Parser.Colon, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_ctorinitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCtorinitializer" ):
                listener.enterCtorinitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCtorinitializer" ):
                listener.exitCtorinitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCtorinitializer" ):
                return visitor.visitCtorinitializer(self)
            else:
                return visitor.visitChildren(self)




    def ctorinitializer(self):

        localctx = CPP14Parser.CtorinitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_ctorinitializer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2149
            self.match(CPP14Parser.Colon)
            self.state = 2150
            self.meminitializerlist()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializer(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def meminitializerlist(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializerlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerlist" ):
                listener.enterMeminitializerlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerlist" ):
                listener.exitMeminitializerlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerlist" ):
                return visitor.visitMeminitializerlist(self)
            else:
                return visitor.visitChildren(self)




    def meminitializerlist(self):

        localctx = CPP14Parser.MeminitializerlistContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_meminitializerlist)
        self._la = 0 # Token type
        try:
            self.state = 2163
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,275,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2152
                self.meminitializer()
                self.state = 2154
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 2153
                    self.match(CPP14Parser.Ellipsis)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2156
                self.meminitializer()
                self.state = 2158
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Ellipsis:
                    self.state = 2157
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2160
                self.match(CPP14Parser.Comma)
                self.state = 2161
                self.meminitializerlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def meminitializerid(self):
            return self.getTypedRuleContext(CPP14Parser.MeminitializeridContext,0)


        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def expressionlist(self):
            return self.getTypedRuleContext(CPP14Parser.ExpressionlistContext,0)


        def bracedinitlist(self):
            return self.getTypedRuleContext(CPP14Parser.BracedinitlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializer" ):
                listener.enterMeminitializer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializer" ):
                listener.exitMeminitializer(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializer" ):
                return visitor.visitMeminitializer(self)
            else:
                return visitor.visitChildren(self)




    def meminitializer(self):

        localctx = CPP14Parser.MeminitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_meminitializer)
        self._la = 0 # Token type
        try:
            self.state = 2175
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,277,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2165
                self.meminitializerid()
                self.state = 2166
                self.match(CPP14Parser.LeftParen)
                self.state = 2168
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.Throw - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.LeftBrace - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2167
                    self.expressionlist()


                self.state = 2170
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2172
                self.meminitializerid()
                self.state = 2173
                self.bracedinitlist()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MeminitializeridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def classordecltype(self):
            return self.getTypedRuleContext(CPP14Parser.ClassordecltypeContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_meminitializerid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMeminitializerid" ):
                listener.enterMeminitializerid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMeminitializerid" ):
                listener.exitMeminitializerid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMeminitializerid" ):
                return visitor.visitMeminitializerid(self)
            else:
                return visitor.visitChildren(self)




    def meminitializerid(self):

        localctx = CPP14Parser.MeminitializeridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_meminitializerid)
        try:
            self.state = 2179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,278,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2177
                self.classordecltype()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2178
                self.match(CPP14Parser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OperatorfunctionidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def theoperator(self):
            return self.getTypedRuleContext(CPP14Parser.TheoperatorContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_operatorfunctionid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOperatorfunctionid" ):
                listener.enterOperatorfunctionid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOperatorfunctionid" ):
                listener.exitOperatorfunctionid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitOperatorfunctionid" ):
                return visitor.visitOperatorfunctionid(self)
            else:
                return visitor.visitChildren(self)




    def operatorfunctionid(self):

        localctx = CPP14Parser.OperatorfunctionidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_operatorfunctionid)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2181
            self.match(CPP14Parser.Operator)
            self.state = 2182
            self.theoperator()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteraloperatoridContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Operator(self):
            return self.getToken(CPP14Parser.Operator, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_literaloperatorid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteraloperatorid" ):
                listener.enterLiteraloperatorid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteraloperatorid" ):
                listener.exitLiteraloperatorid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteraloperatorid" ):
                return visitor.visitLiteraloperatorid(self)
            else:
                return visitor.visitChildren(self)




    def literaloperatorid(self):

        localctx = CPP14Parser.LiteraloperatoridContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_literaloperatorid)
        try:
            self.state = 2189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2184
                self.match(CPP14Parser.Operator)
                self.state = 2185
                self.match(CPP14Parser.Stringliteral)
                self.state = 2186
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2187
                self.match(CPP14Parser.Operator)
                self.state = 2188
                self.match(CPP14Parser.Userdefinedstringliteral)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatedeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templatedeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatedeclaration" ):
                listener.enterTemplatedeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatedeclaration" ):
                listener.exitTemplatedeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatedeclaration" ):
                return visitor.visitTemplatedeclaration(self)
            else:
                return visitor.visitChildren(self)




    def templatedeclaration(self):

        localctx = CPP14Parser.TemplatedeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_templatedeclaration)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2191
            self.match(CPP14Parser.Template)
            self.state = 2192
            self.match(CPP14Parser.Less)
            self.state = 2193
            self.templateparameterlist(0)
            self.state = 2194
            self.match(CPP14Parser.Greater)
            self.state = 2195
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateparameterlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterContext,0)


        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameterlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameterlist" ):
                listener.enterTemplateparameterlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameterlist" ):
                listener.exitTemplateparameterlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameterlist" ):
                return visitor.visitTemplateparameterlist(self)
            else:
                return visitor.visitChildren(self)



    def templateparameterlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateparameterlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 348
        self.enterRecursionRule(localctx, 348, self.RULE_templateparameterlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2198
            self.templateparameter()
            self._ctx.stop = self._input.LT(-1)
            self.state = 2205
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,280,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateparameterlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateparameterlist)
                    self.state = 2200
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2201
                    self.match(CPP14Parser.Comma)
                    self.state = 2202
                    self.templateparameter() 
                self.state = 2207
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,280,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateparameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typeparameter(self):
            return self.getTypedRuleContext(CPP14Parser.TypeparameterContext,0)


        def parameterdeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ParameterdeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateparameter" ):
                listener.enterTemplateparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateparameter" ):
                listener.exitTemplateparameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateparameter" ):
                return visitor.visitTemplateparameter(self)
            else:
                return visitor.visitChildren(self)




    def templateparameter(self):

        localctx = CPP14Parser.TemplateparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_templateparameter)
        try:
            self.state = 2210
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,281,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2208
                self.typeparameter()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2209
                self.parameterdeclaration()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeparameterContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Class(self):
            return self.getToken(CPP14Parser.Class, 0)

        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Typename_(self):
            return self.getToken(CPP14Parser.Typename_, 0)

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def templateparameterlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateparameterlistContext,0)


        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_typeparameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeparameter" ):
                listener.enterTypeparameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeparameter" ):
                listener.exitTypeparameter(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeparameter" ):
                return visitor.visitTypeparameter(self)
            else:
                return visitor.visitChildren(self)




    def typeparameter(self):

        localctx = CPP14Parser.TypeparameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_typeparameter)
        self._la = 0 # Token type
        try:
            self.state = 2260
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,291,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2212
                self.match(CPP14Parser.Class)
                self.state = 2214
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
                if la_ == 1:
                    self.state = 2213
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2217
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,283,self._ctx)
                if la_ == 1:
                    self.state = 2216
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2219
                self.match(CPP14Parser.Class)
                self.state = 2221
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2220
                    self.match(CPP14Parser.Identifier)


                self.state = 2223
                self.match(CPP14Parser.Assign)
                self.state = 2224
                self.thetypeid()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2225
                self.match(CPP14Parser.Typename_)
                self.state = 2227
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,285,self._ctx)
                if la_ == 1:
                    self.state = 2226
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2230
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,286,self._ctx)
                if la_ == 1:
                    self.state = 2229
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2232
                self.match(CPP14Parser.Typename_)
                self.state = 2234
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2233
                    self.match(CPP14Parser.Identifier)


                self.state = 2236
                self.match(CPP14Parser.Assign)
                self.state = 2237
                self.thetypeid()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2238
                self.match(CPP14Parser.Template)
                self.state = 2239
                self.match(CPP14Parser.Less)
                self.state = 2240
                self.templateparameterlist(0)
                self.state = 2241
                self.match(CPP14Parser.Greater)
                self.state = 2242
                self.match(CPP14Parser.Class)
                self.state = 2244
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,288,self._ctx)
                if la_ == 1:
                    self.state = 2243
                    self.match(CPP14Parser.Ellipsis)


                self.state = 2247
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,289,self._ctx)
                if la_ == 1:
                    self.state = 2246
                    self.match(CPP14Parser.Identifier)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2249
                self.match(CPP14Parser.Template)
                self.state = 2250
                self.match(CPP14Parser.Less)
                self.state = 2251
                self.templateparameterlist(0)
                self.state = 2252
                self.match(CPP14Parser.Greater)
                self.state = 2253
                self.match(CPP14Parser.Class)
                self.state = 2255
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Identifier:
                    self.state = 2254
                    self.match(CPP14Parser.Identifier)


                self.state = 2257
                self.match(CPP14Parser.Assign)
                self.state = 2258
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpletemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templatename(self):
            return self.getTypedRuleContext(CPP14Parser.TemplatenameContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_simpletemplateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpletemplateid" ):
                listener.enterSimpletemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpletemplateid" ):
                listener.exitSimpletemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSimpletemplateid" ):
                return visitor.visitSimpletemplateid(self)
            else:
                return visitor.visitChildren(self)




    def simpletemplateid(self):

        localctx = CPP14Parser.SimpletemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_simpletemplateid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2262
            self.templatename()
            self.state = 2263
            self.match(CPP14Parser.Less)
            self.state = 2265
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                self.state = 2264
                self.templateargumentlist(0)


            self.state = 2267
            self.match(CPP14Parser.Greater)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateidContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def operatorfunctionid(self):
            return self.getTypedRuleContext(CPP14Parser.OperatorfunctionidContext,0)


        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def literaloperatorid(self):
            return self.getTypedRuleContext(CPP14Parser.LiteraloperatoridContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateid" ):
                listener.enterTemplateid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateid" ):
                listener.exitTemplateid(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateid" ):
                return visitor.visitTemplateid(self)
            else:
                return visitor.visitChildren(self)




    def templateid(self):

        localctx = CPP14Parser.TemplateidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_templateid)
        self._la = 0 # Token type
        try:
            self.state = 2284
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,295,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2269
                self.simpletemplateid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2270
                self.operatorfunctionid()
                self.state = 2271
                self.match(CPP14Parser.Less)
                self.state = 2273
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2272
                    self.templateargumentlist(0)


                self.state = 2275
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2277
                self.literaloperatorid()
                self.state = 2278
                self.match(CPP14Parser.Less)
                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CPP14Parser.T__0) | (1 << CPP14Parser.T__1) | (1 << CPP14Parser.Alignof) | (1 << CPP14Parser.Auto) | (1 << CPP14Parser.Bool) | (1 << CPP14Parser.Char) | (1 << CPP14Parser.Char16) | (1 << CPP14Parser.Char32) | (1 << CPP14Parser.Class) | (1 << CPP14Parser.Const) | (1 << CPP14Parser.Const_cast) | (1 << CPP14Parser.Decltype) | (1 << CPP14Parser.Delete) | (1 << CPP14Parser.Double) | (1 << CPP14Parser.Dynamic_cast) | (1 << CPP14Parser.Enum) | (1 << CPP14Parser.False_) | (1 << CPP14Parser.Float) | (1 << CPP14Parser.Int) | (1 << CPP14Parser.Long) | (1 << CPP14Parser.New) | (1 << CPP14Parser.Noexcept) | (1 << CPP14Parser.Nullptr) | (1 << CPP14Parser.Operator) | (1 << CPP14Parser.Reinterpret_cast) | (1 << CPP14Parser.Short) | (1 << CPP14Parser.Signed) | (1 << CPP14Parser.Sizeof))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CPP14Parser.Static_cast - 64)) | (1 << (CPP14Parser.Struct - 64)) | (1 << (CPP14Parser.This - 64)) | (1 << (CPP14Parser.True_ - 64)) | (1 << (CPP14Parser.Typeid_ - 64)) | (1 << (CPP14Parser.Typename_ - 64)) | (1 << (CPP14Parser.Union - 64)) | (1 << (CPP14Parser.Unsigned - 64)) | (1 << (CPP14Parser.Void - 64)) | (1 << (CPP14Parser.Volatile - 64)) | (1 << (CPP14Parser.Wchar - 64)) | (1 << (CPP14Parser.LeftParen - 64)) | (1 << (CPP14Parser.LeftBracket - 64)) | (1 << (CPP14Parser.Plus - 64)) | (1 << (CPP14Parser.Minus - 64)) | (1 << (CPP14Parser.Star - 64)) | (1 << (CPP14Parser.And - 64)) | (1 << (CPP14Parser.Or - 64)) | (1 << (CPP14Parser.Tilde - 64)) | (1 << (CPP14Parser.PlusPlus - 64)) | (1 << (CPP14Parser.MinusMinus - 64)))) != 0) or ((((_la - 128)) & ~0x3f) == 0 and ((1 << (_la - 128)) & ((1 << (CPP14Parser.Doublecolon - 128)) | (1 << (CPP14Parser.Identifier - 128)) | (1 << (CPP14Parser.Integerliteral - 128)) | (1 << (CPP14Parser.Characterliteral - 128)) | (1 << (CPP14Parser.Floatingliteral - 128)) | (1 << (CPP14Parser.Stringliteral - 128)) | (1 << (CPP14Parser.Userdefinedintegerliteral - 128)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 128)) | (1 << (CPP14Parser.Userdefinedstringliteral - 128)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 128)))) != 0):
                    self.state = 2279
                    self.templateargumentlist(0)


                self.state = 2282
                self.match(CPP14Parser.Greater)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplatenameContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templatename

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplatename" ):
                listener.enterTemplatename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplatename" ):
                listener.exitTemplatename(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplatename" ):
                return visitor.visitTemplatename(self)
            else:
                return visitor.visitChildren(self)




    def templatename(self):

        localctx = CPP14Parser.TemplatenameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_templatename)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2286
            self.match(CPP14Parser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TemplateargumentlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def templateargument(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def templateargumentlist(self):
            return self.getTypedRuleContext(CPP14Parser.TemplateargumentlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargumentlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargumentlist" ):
                listener.enterTemplateargumentlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargumentlist" ):
                listener.exitTemplateargumentlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargumentlist" ):
                return visitor.visitTemplateargumentlist(self)
            else:
                return visitor.visitChildren(self)



    def templateargumentlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TemplateargumentlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 360
        self.enterRecursionRule(localctx, 360, self.RULE_templateargumentlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2289
            self.templateargument()
            self.state = 2291
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,296,self._ctx)
            if la_ == 1:
                self.state = 2290
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2301
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,298,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TemplateargumentlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_templateargumentlist)
                    self.state = 2293
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2294
                    self.match(CPP14Parser.Comma)
                    self.state = 2295
                    self.templateargument()
                    self.state = 2297
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,297,self._ctx)
                    if la_ == 1:
                        self.state = 2296
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2303
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,298,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class TemplateargumentContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def idexpression(self):
            return self.getTypedRuleContext(CPP14Parser.IdexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_templateargument

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTemplateargument" ):
                listener.enterTemplateargument(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTemplateargument" ):
                listener.exitTemplateargument(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTemplateargument" ):
                return visitor.visitTemplateargument(self)
            else:
                return visitor.visitChildren(self)




    def templateargument(self):

        localctx = CPP14Parser.TemplateargumentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_templateargument)
        try:
            self.state = 2307
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,299,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2304
                self.thetypeid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2305
                self.constantexpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2306
                self.idexpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypenamespecifierContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Typename_(self):
            return self.getToken(CPP14Parser.Typename_, 0)

        def nestednamespecifier(self):
            return self.getTypedRuleContext(CPP14Parser.NestednamespecifierContext,0)


        def Identifier(self):
            return self.getToken(CPP14Parser.Identifier, 0)

        def simpletemplateid(self):
            return self.getTypedRuleContext(CPP14Parser.SimpletemplateidContext,0)


        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typenamespecifier

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypenamespecifier" ):
                listener.enterTypenamespecifier(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypenamespecifier" ):
                listener.exitTypenamespecifier(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypenamespecifier" ):
                return visitor.visitTypenamespecifier(self)
            else:
                return visitor.visitChildren(self)




    def typenamespecifier(self):

        localctx = CPP14Parser.TypenamespecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_typenamespecifier)
        self._la = 0 # Token type
        try:
            self.state = 2320
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,301,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2309
                self.match(CPP14Parser.Typename_)
                self.state = 2310
                self.nestednamespecifier(0)
                self.state = 2311
                self.match(CPP14Parser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2313
                self.match(CPP14Parser.Typename_)
                self.state = 2314
                self.nestednamespecifier(0)
                self.state = 2316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Template:
                    self.state = 2315
                    self.match(CPP14Parser.Template)


                self.state = 2318
                self.simpletemplateid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitinstantiationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def Extern(self):
            return self.getToken(CPP14Parser.Extern, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitinstantiation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitinstantiation" ):
                listener.enterExplicitinstantiation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitinstantiation" ):
                listener.exitExplicitinstantiation(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitinstantiation" ):
                return visitor.visitExplicitinstantiation(self)
            else:
                return visitor.visitChildren(self)




    def explicitinstantiation(self):

        localctx = CPP14Parser.ExplicitinstantiationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_explicitinstantiation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Extern:
                self.state = 2322
                self.match(CPP14Parser.Extern)


            self.state = 2325
            self.match(CPP14Parser.Template)
            self.state = 2326
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExplicitspecializationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Template(self):
            return self.getToken(CPP14Parser.Template, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def declaration(self):
            return self.getTypedRuleContext(CPP14Parser.DeclarationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_explicitspecialization

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExplicitspecialization" ):
                listener.enterExplicitspecialization(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExplicitspecialization" ):
                listener.exitExplicitspecialization(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExplicitspecialization" ):
                return visitor.visitExplicitspecialization(self)
            else:
                return visitor.visitChildren(self)




    def explicitspecialization(self):

        localctx = CPP14Parser.ExplicitspecializationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_explicitspecialization)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2328
            self.match(CPP14Parser.Template)
            self.state = 2329
            self.match(CPP14Parser.Less)
            self.state = 2330
            self.match(CPP14Parser.Greater)
            self.state = 2331
            self.declaration()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TryblockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_tryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTryblock" ):
                listener.enterTryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTryblock" ):
                listener.exitTryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTryblock" ):
                return visitor.visitTryblock(self)
            else:
                return visitor.visitChildren(self)




    def tryblock(self):

        localctx = CPP14Parser.TryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_tryblock)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2333
            self.match(CPP14Parser.Try)
            self.state = 2334
            self.compoundstatement()
            self.state = 2335
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctiontryblockContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Try(self):
            return self.getToken(CPP14Parser.Try, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def ctorinitializer(self):
            return self.getTypedRuleContext(CPP14Parser.CtorinitializerContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_functiontryblock

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctiontryblock" ):
                listener.enterFunctiontryblock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctiontryblock" ):
                listener.exitFunctiontryblock(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitFunctiontryblock" ):
                return visitor.visitFunctiontryblock(self)
            else:
                return visitor.visitChildren(self)




    def functiontryblock(self):

        localctx = CPP14Parser.FunctiontryblockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_functiontryblock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2337
            self.match(CPP14Parser.Try)
            self.state = 2339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==CPP14Parser.Colon:
                self.state = 2338
                self.ctorinitializer()


            self.state = 2341
            self.compoundstatement()
            self.state = 2342
            self.handlerseq()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerseqContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handler(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerContext,0)


        def handlerseq(self):
            return self.getTypedRuleContext(CPP14Parser.HandlerseqContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handlerseq

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerseq" ):
                listener.enterHandlerseq(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerseq" ):
                listener.exitHandlerseq(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandlerseq" ):
                return visitor.visitHandlerseq(self)
            else:
                return visitor.visitChildren(self)




    def handlerseq(self):

        localctx = CPP14Parser.HandlerseqContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_handlerseq)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2344
            self.handler()
            self.state = 2346
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,304,self._ctx)
            if la_ == 1:
                self.state = 2345
                self.handlerseq()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Catch(self):
            return self.getToken(CPP14Parser.Catch, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def exceptiondeclaration(self):
            return self.getTypedRuleContext(CPP14Parser.ExceptiondeclarationContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def compoundstatement(self):
            return self.getTypedRuleContext(CPP14Parser.CompoundstatementContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_handler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandler" ):
                listener.enterHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandler" ):
                listener.exitHandler(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHandler" ):
                return visitor.visitHandler(self)
            else:
                return visitor.visitChildren(self)




    def handler(self):

        localctx = CPP14Parser.HandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_handler)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2348
            self.match(CPP14Parser.Catch)
            self.state = 2349
            self.match(CPP14Parser.LeftParen)
            self.state = 2350
            self.exceptiondeclaration()
            self.state = 2351
            self.match(CPP14Parser.RightParen)
            self.state = 2352
            self.compoundstatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptiondeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def typespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.TypespecifierseqContext,0)


        def declarator(self):
            return self.getTypedRuleContext(CPP14Parser.DeclaratorContext,0)


        def attributespecifierseq(self):
            return self.getTypedRuleContext(CPP14Parser.AttributespecifierseqContext,0)


        def abstractdeclarator(self):
            return self.getTypedRuleContext(CPP14Parser.AbstractdeclaratorContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptiondeclaration

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptiondeclaration" ):
                listener.enterExceptiondeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptiondeclaration" ):
                listener.exitExceptiondeclaration(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptiondeclaration" ):
                return visitor.visitExceptiondeclaration(self)
            else:
                return visitor.visitChildren(self)




    def exceptiondeclaration(self):

        localctx = CPP14Parser.ExceptiondeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_exceptiondeclaration)
        self._la = 0 # Token type
        try:
            self.state = 2368
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,308,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2355
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2354
                    self.attributespecifierseq(0)


                self.state = 2357
                self.typespecifierseq()
                self.state = 2358
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2361
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.Alignas or _la==CPP14Parser.LeftBracket:
                    self.state = 2360
                    self.attributespecifierseq(0)


                self.state = 2363
                self.typespecifierseq()
                self.state = 2365
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==CPP14Parser.T__2 or _la==CPP14Parser.Decltype or ((((_la - 84)) & ~0x3f) == 0 and ((1 << (_la - 84)) & ((1 << (CPP14Parser.LeftParen - 84)) | (1 << (CPP14Parser.LeftBracket - 84)) | (1 << (CPP14Parser.Star - 84)) | (1 << (CPP14Parser.And - 84)) | (1 << (CPP14Parser.Doublecolon - 84)) | (1 << (CPP14Parser.Ellipsis - 84)) | (1 << (CPP14Parser.Identifier - 84)))) != 0):
                    self.state = 2364
                    self.abstractdeclarator()


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2367
                self.match(CPP14Parser.Ellipsis)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThrowexpressionContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def assignmentexpression(self):
            return self.getTypedRuleContext(CPP14Parser.AssignmentexpressionContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_throwexpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThrowexpression" ):
                listener.enterThrowexpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThrowexpression" ):
                listener.exitThrowexpression(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitThrowexpression" ):
                return visitor.visitThrowexpression(self)
            else:
                return visitor.visitChildren(self)




    def throwexpression(self):

        localctx = CPP14Parser.ThrowexpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_throwexpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2370
            self.match(CPP14Parser.Throw)
            self.state = 2372
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,309,self._ctx)
            if la_ == 1:
                self.state = 2371
                self.assignmentexpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dynamicexceptionspecification(self):
            return self.getTypedRuleContext(CPP14Parser.DynamicexceptionspecificationContext,0)


        def noexceptspecification(self):
            return self.getTypedRuleContext(CPP14Parser.NoexceptspecificationContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_exceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExceptionspecification" ):
                listener.enterExceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExceptionspecification" ):
                listener.exitExceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExceptionspecification" ):
                return visitor.visitExceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def exceptionspecification(self):

        localctx = CPP14Parser.ExceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_exceptionspecification)
        try:
            self.state = 2376
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Throw]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2374
                self.dynamicexceptionspecification()
                pass
            elif token in [CPP14Parser.Noexcept]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2375
                self.noexceptspecification()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DynamicexceptionspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Throw(self):
            return self.getToken(CPP14Parser.Throw, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_dynamicexceptionspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDynamicexceptionspecification" ):
                listener.enterDynamicexceptionspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDynamicexceptionspecification" ):
                listener.exitDynamicexceptionspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDynamicexceptionspecification" ):
                return visitor.visitDynamicexceptionspecification(self)
            else:
                return visitor.visitChildren(self)




    def dynamicexceptionspecification(self):

        localctx = CPP14Parser.DynamicexceptionspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_dynamicexceptionspecification)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2378
            self.match(CPP14Parser.Throw)
            self.state = 2379
            self.match(CPP14Parser.LeftParen)
            self.state = 2381
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((((_la - 12)) & ~0x3f) == 0 and ((1 << (_la - 12)) & ((1 << (CPP14Parser.Auto - 12)) | (1 << (CPP14Parser.Bool - 12)) | (1 << (CPP14Parser.Char - 12)) | (1 << (CPP14Parser.Char16 - 12)) | (1 << (CPP14Parser.Char32 - 12)) | (1 << (CPP14Parser.Class - 12)) | (1 << (CPP14Parser.Const - 12)) | (1 << (CPP14Parser.Decltype - 12)) | (1 << (CPP14Parser.Double - 12)) | (1 << (CPP14Parser.Enum - 12)) | (1 << (CPP14Parser.Float - 12)) | (1 << (CPP14Parser.Int - 12)) | (1 << (CPP14Parser.Long - 12)) | (1 << (CPP14Parser.Short - 12)) | (1 << (CPP14Parser.Signed - 12)) | (1 << (CPP14Parser.Struct - 12)) | (1 << (CPP14Parser.Typename_ - 12)))) != 0) or ((((_la - 76)) & ~0x3f) == 0 and ((1 << (_la - 76)) & ((1 << (CPP14Parser.Union - 76)) | (1 << (CPP14Parser.Unsigned - 76)) | (1 << (CPP14Parser.Void - 76)) | (1 << (CPP14Parser.Volatile - 76)) | (1 << (CPP14Parser.Wchar - 76)) | (1 << (CPP14Parser.Doublecolon - 76)) | (1 << (CPP14Parser.Identifier - 76)))) != 0):
                self.state = 2380
                self.typeidlist(0)


            self.state = 2383
            self.match(CPP14Parser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TypeidlistContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def thetypeid(self):
            return self.getTypedRuleContext(CPP14Parser.ThetypeidContext,0)


        def Ellipsis(self):
            return self.getToken(CPP14Parser.Ellipsis, 0)

        def typeidlist(self):
            return self.getTypedRuleContext(CPP14Parser.TypeidlistContext,0)


        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_typeidlist

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTypeidlist" ):
                listener.enterTypeidlist(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTypeidlist" ):
                listener.exitTypeidlist(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTypeidlist" ):
                return visitor.visitTypeidlist(self)
            else:
                return visitor.visitChildren(self)



    def typeidlist(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CPP14Parser.TypeidlistContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 386
        self.enterRecursionRule(localctx, 386, self.RULE_typeidlist, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2386
            self.thetypeid()
            self.state = 2388
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,312,self._ctx)
            if la_ == 1:
                self.state = 2387
                self.match(CPP14Parser.Ellipsis)


            self._ctx.stop = self._input.LT(-1)
            self.state = 2398
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,314,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CPP14Parser.TypeidlistContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_typeidlist)
                    self.state = 2390
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 2391
                    self.match(CPP14Parser.Comma)
                    self.state = 2392
                    self.thetypeid()
                    self.state = 2394
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,313,self._ctx)
                    if la_ == 1:
                        self.state = 2393
                        self.match(CPP14Parser.Ellipsis)

             
                self.state = 2400
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,314,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class NoexceptspecificationContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Noexcept(self):
            return self.getToken(CPP14Parser.Noexcept, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def constantexpression(self):
            return self.getTypedRuleContext(CPP14Parser.ConstantexpressionContext,0)


        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_noexceptspecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNoexceptspecification" ):
                listener.enterNoexceptspecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNoexceptspecification" ):
                listener.exitNoexceptspecification(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitNoexceptspecification" ):
                return visitor.visitNoexceptspecification(self)
            else:
                return visitor.visitChildren(self)




    def noexceptspecification(self):

        localctx = CPP14Parser.NoexceptspecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_noexceptspecification)
        try:
            self.state = 2407
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,315,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2401
                self.match(CPP14Parser.Noexcept)
                self.state = 2402
                self.match(CPP14Parser.LeftParen)
                self.state = 2403
                self.constantexpression()
                self.state = 2404
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2406
                self.match(CPP14Parser.Noexcept)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TheoperatorContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def New(self):
            return self.getToken(CPP14Parser.New, 0)

        def Delete(self):
            return self.getToken(CPP14Parser.Delete, 0)

        def LeftBracket(self):
            return self.getToken(CPP14Parser.LeftBracket, 0)

        def RightBracket(self):
            return self.getToken(CPP14Parser.RightBracket, 0)

        def Plus(self):
            return self.getToken(CPP14Parser.Plus, 0)

        def Minus(self):
            return self.getToken(CPP14Parser.Minus, 0)

        def Star(self):
            return self.getToken(CPP14Parser.Star, 0)

        def Div(self):
            return self.getToken(CPP14Parser.Div, 0)

        def Mod(self):
            return self.getToken(CPP14Parser.Mod, 0)

        def Caret(self):
            return self.getToken(CPP14Parser.Caret, 0)

        def And(self):
            return self.getToken(CPP14Parser.And, 0)

        def Or(self):
            return self.getToken(CPP14Parser.Or, 0)

        def Tilde(self):
            return self.getToken(CPP14Parser.Tilde, 0)

        def Assign(self):
            return self.getToken(CPP14Parser.Assign, 0)

        def Less(self):
            return self.getToken(CPP14Parser.Less, 0)

        def Greater(self):
            return self.getToken(CPP14Parser.Greater, 0)

        def PlusAssign(self):
            return self.getToken(CPP14Parser.PlusAssign, 0)

        def MinusAssign(self):
            return self.getToken(CPP14Parser.MinusAssign, 0)

        def StarAssign(self):
            return self.getToken(CPP14Parser.StarAssign, 0)

        def DivAssign(self):
            return self.getToken(CPP14Parser.DivAssign, 0)

        def ModAssign(self):
            return self.getToken(CPP14Parser.ModAssign, 0)

        def XorAssign(self):
            return self.getToken(CPP14Parser.XorAssign, 0)

        def AndAssign(self):
            return self.getToken(CPP14Parser.AndAssign, 0)

        def OrAssign(self):
            return self.getToken(CPP14Parser.OrAssign, 0)

        def LeftShift(self):
            return self.getToken(CPP14Parser.LeftShift, 0)

        def RightShift(self):
            return self.getToken(CPP14Parser.RightShift, 0)

        def RightShiftAssign(self):
            return self.getToken(CPP14Parser.RightShiftAssign, 0)

        def LeftShiftAssign(self):
            return self.getToken(CPP14Parser.LeftShiftAssign, 0)

        def Equal(self):
            return self.getToken(CPP14Parser.Equal, 0)

        def NotEqual(self):
            return self.getToken(CPP14Parser.NotEqual, 0)

        def LessEqual(self):
            return self.getToken(CPP14Parser.LessEqual, 0)

        def GreaterEqual(self):
            return self.getToken(CPP14Parser.GreaterEqual, 0)

        def PlusPlus(self):
            return self.getToken(CPP14Parser.PlusPlus, 0)

        def MinusMinus(self):
            return self.getToken(CPP14Parser.MinusMinus, 0)

        def Comma(self):
            return self.getToken(CPP14Parser.Comma, 0)

        def ArrowStar(self):
            return self.getToken(CPP14Parser.ArrowStar, 0)

        def Arrow(self):
            return self.getToken(CPP14Parser.Arrow, 0)

        def LeftParen(self):
            return self.getToken(CPP14Parser.LeftParen, 0)

        def RightParen(self):
            return self.getToken(CPP14Parser.RightParen, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_theoperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTheoperator" ):
                listener.enterTheoperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTheoperator" ):
                listener.exitTheoperator(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitTheoperator" ):
                return visitor.visitTheoperator(self)
            else:
                return visitor.visitChildren(self)




    def theoperator(self):

        localctx = CPP14Parser.TheoperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_theoperator)
        try:
            self.state = 2460
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,316,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2409
                self.match(CPP14Parser.New)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2410
                self.match(CPP14Parser.Delete)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2411
                self.match(CPP14Parser.New)
                self.state = 2412
                self.match(CPP14Parser.LeftBracket)
                self.state = 2413
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 2414
                self.match(CPP14Parser.Delete)
                self.state = 2415
                self.match(CPP14Parser.LeftBracket)
                self.state = 2416
                self.match(CPP14Parser.RightBracket)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 2417
                self.match(CPP14Parser.Plus)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 2418
                self.match(CPP14Parser.Minus)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 2419
                self.match(CPP14Parser.Star)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 2420
                self.match(CPP14Parser.Div)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 2421
                self.match(CPP14Parser.Mod)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 2422
                self.match(CPP14Parser.Caret)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 2423
                self.match(CPP14Parser.And)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 2424
                self.match(CPP14Parser.Or)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 2425
                self.match(CPP14Parser.Tilde)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 2426
                self.match(CPP14Parser.T__0)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 2427
                self.match(CPP14Parser.T__1)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 2428
                self.match(CPP14Parser.Assign)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 2429
                self.match(CPP14Parser.Less)
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 2430
                self.match(CPP14Parser.Greater)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 2431
                self.match(CPP14Parser.PlusAssign)
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 2432
                self.match(CPP14Parser.MinusAssign)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 2433
                self.match(CPP14Parser.StarAssign)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 2434
                self.match(CPP14Parser.DivAssign)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 2435
                self.match(CPP14Parser.ModAssign)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 2436
                self.match(CPP14Parser.XorAssign)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 2437
                self.match(CPP14Parser.AndAssign)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 2438
                self.match(CPP14Parser.OrAssign)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 2439
                self.match(CPP14Parser.LeftShift)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 2440
                self.match(CPP14Parser.RightShift)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 2441
                self.match(CPP14Parser.RightShiftAssign)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 2442
                self.match(CPP14Parser.LeftShiftAssign)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 2443
                self.match(CPP14Parser.Equal)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 2444
                self.match(CPP14Parser.NotEqual)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 2445
                self.match(CPP14Parser.LessEqual)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 2446
                self.match(CPP14Parser.GreaterEqual)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 2447
                self.match(CPP14Parser.T__2)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 2448
                self.match(CPP14Parser.T__3)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 2449
                self.match(CPP14Parser.T__4)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 2450
                self.match(CPP14Parser.T__5)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 2451
                self.match(CPP14Parser.PlusPlus)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 2452
                self.match(CPP14Parser.MinusMinus)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 2453
                self.match(CPP14Parser.Comma)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 2454
                self.match(CPP14Parser.ArrowStar)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 2455
                self.match(CPP14Parser.Arrow)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 2456
                self.match(CPP14Parser.LeftParen)
                self.state = 2457
                self.match(CPP14Parser.RightParen)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 2458
                self.match(CPP14Parser.LeftBracket)
                self.state = 2459
                self.match(CPP14Parser.RightBracket)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LiteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Integerliteral(self):
            return self.getToken(CPP14Parser.Integerliteral, 0)

        def Characterliteral(self):
            return self.getToken(CPP14Parser.Characterliteral, 0)

        def Floatingliteral(self):
            return self.getToken(CPP14Parser.Floatingliteral, 0)

        def Stringliteral(self):
            return self.getToken(CPP14Parser.Stringliteral, 0)

        def booleanliteral(self):
            return self.getTypedRuleContext(CPP14Parser.BooleanliteralContext,0)


        def pointerliteral(self):
            return self.getTypedRuleContext(CPP14Parser.PointerliteralContext,0)


        def userdefinedliteral(self):
            return self.getTypedRuleContext(CPP14Parser.UserdefinedliteralContext,0)


        def getRuleIndex(self):
            return CPP14Parser.RULE_literal

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLiteral" ):
                listener.enterLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLiteral" ):
                listener.exitLiteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLiteral" ):
                return visitor.visitLiteral(self)
            else:
                return visitor.visitChildren(self)




    def literal(self):

        localctx = CPP14Parser.LiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_literal)
        try:
            self.state = 2469
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [CPP14Parser.Integerliteral]:
                self.enterOuterAlt(localctx, 1)
                self.state = 2462
                self.match(CPP14Parser.Integerliteral)
                pass
            elif token in [CPP14Parser.Characterliteral]:
                self.enterOuterAlt(localctx, 2)
                self.state = 2463
                self.match(CPP14Parser.Characterliteral)
                pass
            elif token in [CPP14Parser.Floatingliteral]:
                self.enterOuterAlt(localctx, 3)
                self.state = 2464
                self.match(CPP14Parser.Floatingliteral)
                pass
            elif token in [CPP14Parser.Stringliteral]:
                self.enterOuterAlt(localctx, 4)
                self.state = 2465
                self.match(CPP14Parser.Stringliteral)
                pass
            elif token in [CPP14Parser.False_, CPP14Parser.True_]:
                self.enterOuterAlt(localctx, 5)
                self.state = 2466
                self.booleanliteral()
                pass
            elif token in [CPP14Parser.Nullptr]:
                self.enterOuterAlt(localctx, 6)
                self.state = 2467
                self.pointerliteral()
                pass
            elif token in [CPP14Parser.Userdefinedintegerliteral, CPP14Parser.Userdefinedfloatingliteral, CPP14Parser.Userdefinedstringliteral, CPP14Parser.Userdefinedcharacterliteral]:
                self.enterOuterAlt(localctx, 7)
                self.state = 2468
                self.userdefinedliteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def False_(self):
            return self.getToken(CPP14Parser.False_, 0)

        def True_(self):
            return self.getToken(CPP14Parser.True_, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_booleanliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanliteral" ):
                listener.enterBooleanliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanliteral" ):
                listener.exitBooleanliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBooleanliteral" ):
                return visitor.visitBooleanliteral(self)
            else:
                return visitor.visitChildren(self)




    def booleanliteral(self):

        localctx = CPP14Parser.BooleanliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_booleanliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2471
            _la = self._input.LA(1)
            if not(_la==CPP14Parser.False_ or _la==CPP14Parser.True_):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PointerliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Nullptr(self):
            return self.getToken(CPP14Parser.Nullptr, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_pointerliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPointerliteral" ):
                listener.enterPointerliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPointerliteral" ):
                listener.exitPointerliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPointerliteral" ):
                return visitor.visitPointerliteral(self)
            else:
                return visitor.visitChildren(self)




    def pointerliteral(self):

        localctx = CPP14Parser.PointerliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_pointerliteral)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2473
            self.match(CPP14Parser.Nullptr)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserdefinedliteralContext(ParserRuleContext):

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def Userdefinedintegerliteral(self):
            return self.getToken(CPP14Parser.Userdefinedintegerliteral, 0)

        def Userdefinedfloatingliteral(self):
            return self.getToken(CPP14Parser.Userdefinedfloatingliteral, 0)

        def Userdefinedstringliteral(self):
            return self.getToken(CPP14Parser.Userdefinedstringliteral, 0)

        def Userdefinedcharacterliteral(self):
            return self.getToken(CPP14Parser.Userdefinedcharacterliteral, 0)

        def getRuleIndex(self):
            return CPP14Parser.RULE_userdefinedliteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserdefinedliteral" ):
                listener.enterUserdefinedliteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserdefinedliteral" ):
                listener.exitUserdefinedliteral(self)

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUserdefinedliteral" ):
                return visitor.visitUserdefinedliteral(self)
            else:
                return visitor.visitChildren(self)




    def userdefinedliteral(self):

        localctx = CPP14Parser.UserdefinedliteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_userdefinedliteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2475
            _la = self._input.LA(1)
            if not(((((_la - 143)) & ~0x3f) == 0 and ((1 << (_la - 143)) & ((1 << (CPP14Parser.Userdefinedintegerliteral - 143)) | (1 << (CPP14Parser.Userdefinedfloatingliteral - 143)) | (1 << (CPP14Parser.Userdefinedstringliteral - 143)) | (1 << (CPP14Parser.Userdefinedcharacterliteral - 143)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[5] = self.nestednamespecifier_sempred
        self._predicates[10] = self.capturelist_sempred
        self._predicates[15] = self.postfixexpression_sempred
        self._predicates[26] = self.noptrnewdeclarator_sempred
        self._predicates[31] = self.pmexpression_sempred
        self._predicates[32] = self.multiplicativeexpression_sempred
        self._predicates[33] = self.additiveexpression_sempred
        self._predicates[34] = self.shiftexpression_sempred
        self._predicates[36] = self.relationalexpression_sempred
        self._predicates[37] = self.equalityexpression_sempred
        self._predicates[38] = self.andexpression_sempred
        self._predicates[39] = self.exclusiveorexpression_sempred
        self._predicates[40] = self.inclusiveorexpression_sempred
        self._predicates[41] = self.logicalandexpression_sempred
        self._predicates[42] = self.logicalorexpression_sempred
        self._predicates[46] = self.expression_sempred
        self._predicates[52] = self.statementseq_sempred
        self._predicates[61] = self.declarationseq_sempred
        self._predicates[88] = self.enumeratorlist_sempred
        self._predicates[106] = self.attributespecifierseq_sempred
        self._predicates[109] = self.attributelist_sempred
        self._predicates[115] = self.balancedtokenseq_sempred
        self._predicates[117] = self.initdeclaratorlist_sempred
        self._predicates[121] = self.noptrdeclarator_sempred
        self._predicates[132] = self.noptrabstractdeclarator_sempred
        self._predicates[134] = self.noptrabstractpackdeclarator_sempred
        self._predicates[136] = self.parameterdeclarationlist_sempred
        self._predicates[143] = self.initializerlist_sempred
        self._predicates[153] = self.memberdeclaratorlist_sempred
        self._predicates[155] = self.virtspecifierseq_sempred
        self._predicates[159] = self.basespecifierlist_sempred
        self._predicates[174] = self.templateparameterlist_sempred
        self._predicates[180] = self.templateargumentlist_sempred
        self._predicates[193] = self.typeidlist_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def nestednamespecifier_sempred(self, localctx:NestednamespecifierContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 1)
         

    def capturelist_sempred(self, localctx:CapturelistContext, predIndex:int):
            if predIndex == 2:
                return self.precpred(self._ctx, 1)
         

    def postfixexpression_sempred(self, localctx:PostfixexpressionContext, predIndex:int):
            if predIndex == 3:
                return self.precpred(self._ctx, 19)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 18)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 17)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 12)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 11)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 7)
         

    def noptrnewdeclarator_sempred(self, localctx:NoptrnewdeclaratorContext, predIndex:int):
            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def pmexpression_sempred(self, localctx:PmexpressionContext, predIndex:int):
            if predIndex == 13:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 1)
         

    def multiplicativeexpression_sempred(self, localctx:MultiplicativeexpressionContext, predIndex:int):
            if predIndex == 15:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 17:
                return self.precpred(self._ctx, 1)
         

    def additiveexpression_sempred(self, localctx:AdditiveexpressionContext, predIndex:int):
            if predIndex == 18:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def shiftexpression_sempred(self, localctx:ShiftexpressionContext, predIndex:int):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def relationalexpression_sempred(self, localctx:RelationalexpressionContext, predIndex:int):
            if predIndex == 21:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 22:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 23:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 24:
                return self.precpred(self._ctx, 1)
         

    def equalityexpression_sempred(self, localctx:EqualityexpressionContext, predIndex:int):
            if predIndex == 25:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 1)
         

    def andexpression_sempred(self, localctx:AndexpressionContext, predIndex:int):
            if predIndex == 27:
                return self.precpred(self._ctx, 1)
         

    def exclusiveorexpression_sempred(self, localctx:ExclusiveorexpressionContext, predIndex:int):
            if predIndex == 28:
                return self.precpred(self._ctx, 1)
         

    def inclusiveorexpression_sempred(self, localctx:InclusiveorexpressionContext, predIndex:int):
            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def logicalandexpression_sempred(self, localctx:LogicalandexpressionContext, predIndex:int):
            if predIndex == 30:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 1)
         

    def logicalorexpression_sempred(self, localctx:LogicalorexpressionContext, predIndex:int):
            if predIndex == 32:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 1)
         

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def statementseq_sempred(self, localctx:StatementseqContext, predIndex:int):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         

    def declarationseq_sempred(self, localctx:DeclarationseqContext, predIndex:int):
            if predIndex == 36:
                return self.precpred(self._ctx, 1)
         

    def enumeratorlist_sempred(self, localctx:EnumeratorlistContext, predIndex:int):
            if predIndex == 37:
                return self.precpred(self._ctx, 1)
         

    def attributespecifierseq_sempred(self, localctx:AttributespecifierseqContext, predIndex:int):
            if predIndex == 38:
                return self.precpred(self._ctx, 1)
         

    def attributelist_sempred(self, localctx:AttributelistContext, predIndex:int):
            if predIndex == 39:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 40:
                return self.precpred(self._ctx, 1)
         

    def balancedtokenseq_sempred(self, localctx:BalancedtokenseqContext, predIndex:int):
            if predIndex == 41:
                return self.precpred(self._ctx, 1)
         

    def initdeclaratorlist_sempred(self, localctx:InitdeclaratorlistContext, predIndex:int):
            if predIndex == 42:
                return self.precpred(self._ctx, 1)
         

    def noptrdeclarator_sempred(self, localctx:NoptrdeclaratorContext, predIndex:int):
            if predIndex == 43:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 44:
                return self.precpred(self._ctx, 2)
         

    def noptrabstractdeclarator_sempred(self, localctx:NoptrabstractdeclaratorContext, predIndex:int):
            if predIndex == 45:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 46:
                return self.precpred(self._ctx, 3)
         

    def noptrabstractpackdeclarator_sempred(self, localctx:NoptrabstractpackdeclaratorContext, predIndex:int):
            if predIndex == 47:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 48:
                return self.precpred(self._ctx, 2)
         

    def parameterdeclarationlist_sempred(self, localctx:ParameterdeclarationlistContext, predIndex:int):
            if predIndex == 49:
                return self.precpred(self._ctx, 1)
         

    def initializerlist_sempred(self, localctx:InitializerlistContext, predIndex:int):
            if predIndex == 50:
                return self.precpred(self._ctx, 1)
         

    def memberdeclaratorlist_sempred(self, localctx:MemberdeclaratorlistContext, predIndex:int):
            if predIndex == 51:
                return self.precpred(self._ctx, 1)
         

    def virtspecifierseq_sempred(self, localctx:VirtspecifierseqContext, predIndex:int):
            if predIndex == 52:
                return self.precpred(self._ctx, 1)
         

    def basespecifierlist_sempred(self, localctx:BasespecifierlistContext, predIndex:int):
            if predIndex == 53:
                return self.precpred(self._ctx, 1)
         

    def templateparameterlist_sempred(self, localctx:TemplateparameterlistContext, predIndex:int):
            if predIndex == 54:
                return self.precpred(self._ctx, 1)
         

    def templateargumentlist_sempred(self, localctx:TemplateargumentlistContext, predIndex:int):
            if predIndex == 55:
                return self.precpred(self._ctx, 1)
         

    def typeidlist_sempred(self, localctx:TypeidlistContext, predIndex:int):
            if predIndex == 56:
                return self.precpred(self._ctx, 1)
         




